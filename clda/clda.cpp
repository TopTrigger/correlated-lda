/* Generated by Cython 0.21 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__clda
#define __PYX_HAVE_API__clda
#include "math.h"
#include "string.h"
#include "stdio.h"
#include "gsl/gsl_mode.h"
#include "gsl/gsl_math.h"
#include "gsl/gsl_complex.h"
#include "gsl/gsl_complex_math.h"
#include "gsl/gsl_poly.h"
#include "gsl/gsl_sf_result.h"
#include "gsl/gsl_sf_airy.h"
#include "gsl/gsl_sf_bessel.h"
#include "gsl/gsl_sf_clausen.h"
#include "gsl/gsl_sf_coulomb.h"
#include "gsl/gsl_sf_coupling.h"
#include "gsl/gsl_sf_dawson.h"
#include "gsl/gsl_sf_debye.h"
#include "gsl/gsl_sf_dilog.h"
#include "gsl/gsl_sf_elementary.h"
#include "gsl/gsl_sf_ellint.h"
#include "gsl/gsl_sf_elljac.h"
#include "gsl/gsl_sf_erf.h"
#include "gsl/gsl_sf_exp.h"
#include "gsl/gsl_sf_expint.h"
#include "gsl/gsl_sf_fermi_dirac.h"
#include "gsl/gsl_sf_gamma.h"
#include "gsl/gsl_sf_gegenbauer.h"
#include "gsl/gsl_sf_hyperg.h"
#include "gsl/gsl_sf_laguerre.h"
#include "gsl/gsl_sf_lambert.h"
#include "gsl/gsl_sf_legendre.h"
#include "gsl/gsl_sf_log.h"
#include "gsl/gsl_sf_pow_int.h"
#include "gsl/gsl_sf_psi.h"
#include "gsl/gsl_sf_synchrotron.h"
#include "gsl/gsl_sf_transport.h"
#include "gsl/gsl_sf_trig.h"
#include "gsl/gsl_sf_zeta.h"
#include "gsl/gsl_block_double.h"
#include "gsl/gsl_block_complex_double.h"
#include "gsl/gsl_vector.h"
#include "gsl/gsl_vector_complex_double.h"
#include "gsl/gsl_matrix_double.h"
#include "gsl/gsl_matrix_complex_double.h"
#include "gsl/gsl_permutation.h"
#include "gsl/gsl_permute_double.h"
#include "gsl/gsl_permute_vector_double.h"
#include "gsl/gsl_permute_vector_complex_double.h"
#include "gsl/gsl_combination.h"
#include "gsl/gsl_heapsort.h"
#include "gsl/gsl_sort_double.h"
#include "gsl/gsl_sort_vector_double.h"
#include "gsl/gsl_cblas.h"
#include "gsl/gsl_blas_types.h"
#include "gsl/gsl_blas.h"
#include "gsl/gsl_linalg.h"
#include "gsl/gsl_eigen.h"
#include "gsl/gsl_fft.h"
#include "gsl/gsl_fft_complex.h"
#include "gsl/gsl_fft_real.h"
#include "gsl/gsl_fft_halfcomplex.h"
#include "gsl/gsl_integration.h"
#include "gsl/gsl_rng.h"
#include "gsl/gsl_qrng.h"
#include "gsl/gsl_randist.h"
#include "gsl/gsl_cdf.h"
#include "gsl/gsl_statistics_double.h"
#include "gsl/gsl_histogram.h"
#include "gsl/gsl_histogram2d.h"
#include "gsl/gsl_ntuple.h"
#include "gsl/gsl_monte.h"
#include "gsl/gsl_monte_plain.h"
#include "gsl/gsl_monte_miser.h"
#include "gsl/gsl_monte_vegas.h"
#include "gsl/gsl_odeiv.h"
#include "gsl/gsl_odeiv2.h"
#include "gsl/gsl_interp.h"
#include "gsl/gsl_spline.h"
#include "gsl/gsl_diff.h"
#include "gsl/gsl_chebyshev.h"
#include "gsl/gsl_sum.h"
#include "gsl/gsl_roots.h"
#include "gsl/gsl_min.h"
#include "gsl/gsl_fit.h"
#include "gsl/gsl_multimin.h"
#include "gsl/gsl_multifit_nlin.h"
#include "pythread.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "omp.h"
#include "stdint.h"
#include "utils.h"
#include "sampler.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "evaluate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "clda.pyx",
  "__init__.pxd",
  "gsl_matrix.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "cymem.pxd",
};

/* "cython_gsl/gsl_blas_types.pxd":23
 *     CblasRight=142
 * 
 * ctypedef size_t CBLAS_INDEX             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "gsl/gsl_blas_types.h":
 */
typedef size_t __pyx_t_10cython_gsl_14gsl_blas_types_CBLAS_INDEX;

/* "../../../../usr/local/lib/python2.7/dist-packages/cython_gsl/__init__.pxd":57
 *   GSL_EOF      = 32  # end of file
 * 
 * ctypedef int size_t             # <<<<<<<<<<<<<<
 * from cython_gsl.gsl_mode cimport *
 * from cython_gsl.gsl_math cimport *
 */
typedef int __pyx_t_10cython_gsl_size_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "gsl_matrix.pxd":4
 * from cpython.mem cimport PyMem_Malloc, PyMem_Free
 * 
 * ctypedef unsigned int uint             # <<<<<<<<<<<<<<
 * 
 * cdef inline gsl_vector** alloc_2d_gsl_matrix(uint A, uint B, double val):
 */
typedef unsigned int __pyx_t_10gsl_matrix_uint;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_4clda_CLDA;

/* "../../../../usr/local/lib/python2.7/dist-packages/cython_gsl/__init__.pxd":20
 * from libc.stdio cimport *
 * 
 * cdef enum:             # <<<<<<<<<<<<<<
 *   GSL_SUCCESS = 0
 *   GSL_FAILURE  = -1
 */
enum  {
  __pyx_e_10cython_gsl_GSL_SUCCESS = 0,
  __pyx_e_10cython_gsl_GSL_FAILURE = -1,
  __pyx_e_10cython_gsl_GSL_CONTINUE = -2,
  __pyx_e_10cython_gsl_GSL_EDOM = 1,
  __pyx_e_10cython_gsl_GSL_ERANGE = 2,
  __pyx_e_10cython_gsl_GSL_EFAULT = 3,
  __pyx_e_10cython_gsl_GSL_EINVAL = 4,
  __pyx_e_10cython_gsl_GSL_EFAILED = 5,
  __pyx_e_10cython_gsl_GSL_EFACTOR = 6,
  __pyx_e_10cython_gsl_GSL_ESANITY = 7,
  __pyx_e_10cython_gsl_GSL_ENOMEM = 8,
  __pyx_e_10cython_gsl_GSL_EBADFUNC = 9,
  __pyx_e_10cython_gsl_GSL_ERUNAWAY = 10,
  __pyx_e_10cython_gsl_GSL_EMAXITER = 11,
  __pyx_e_10cython_gsl_GSL_EZERODIV = 12,
  __pyx_e_10cython_gsl_GSL_EBADTOL = 13,
  __pyx_e_10cython_gsl_GSL_ETOL = 14,
  __pyx_e_10cython_gsl_GSL_EUNDRFLW = 15,
  __pyx_e_10cython_gsl_GSL_EOVRFLW = 16,
  __pyx_e_10cython_gsl_GSL_ELOSS = 17,
  __pyx_e_10cython_gsl_GSL_EROUND = 18,
  __pyx_e_10cython_gsl_GSL_EBADLEN = 19,
  __pyx_e_10cython_gsl_GSL_ENOTSQR = 20,
  __pyx_e_10cython_gsl_GSL_ESING = 21,
  __pyx_e_10cython_gsl_GSL_EDIVERGE = 22,
  __pyx_e_10cython_gsl_GSL_EUNSUP = 23,
  __pyx_e_10cython_gsl_GSL_EUNIMPL = 24,
  __pyx_e_10cython_gsl_GSL_ECACHE = 25,
  __pyx_e_10cython_gsl_GSL_ETABLE = 26,
  __pyx_e_10cython_gsl_GSL_ENOPROG = 27,
  __pyx_e_10cython_gsl_GSL_ENOPROGJ = 28,
  __pyx_e_10cython_gsl_GSL_ETOLF = 29,
  __pyx_e_10cython_gsl_GSL_ETOLX = 30,
  __pyx_e_10cython_gsl_GSL_ETOLG = 31,
  __pyx_e_10cython_gsl_GSL_EOF = 32
};

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
};


/* "cymem/cymem.pxd":10
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
};


/* "clda.pyx":88
 *         sum += abs(A[i] - B[i])
 * 
 * cdef class CLDA:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef uint C, D, T0, V # D is all the docs
 */
struct __pyx_obj_4clda_CLDA {
  PyObject_HEAD
  struct __pyx_vtabstruct_4clda_CLDA *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  __pyx_t_10gsl_matrix_uint C;
  __pyx_t_10gsl_matrix_uint D;
  __pyx_t_10gsl_matrix_uint T0;
  __pyx_t_10gsl_matrix_uint V;
  PyObject *Dc;
  __pyx_t_10gsl_matrix_uint *Tc;
  PyObject *word2id;
  __pyx_t_10gsl_matrix_uint nW;
  gsl_vector *n0Z;
  gsl_vector *nZ;
  gsl_vector **nYZ;
  gsl_vector **nCZ;
  gsl_vector **n1CZ;
  gsl_vector **n0WZ;
  gsl_vector ***n1CWZ;
  gsl_vector ***nCWZ;
  gsl_vector **nDZ;
  size_t *maxWC;
  double **histCW;
  double ***histCZW;
  PyArrayObject *z0;
  PyObject *zc;
  gsl_rng *rng;
  gsl_ran_discrete_t *disc;
  gsl_vector **pZC;
  gsl_vector *p0;
  gsl_vector *p00;
  PyObject *pydC;
  PyObject *pydocs;
  __pyx_t_5numpy_uint16_t **docs;
  __pyx_t_5numpy_uint8_t *dC;
  __pyx_t_10gsl_matrix_uint *dW;
  __pyx_t_5numpy_uint8_t **dY;
  __pyx_t_5numpy_uint16_t **dZ;
  PyBoolObject *test;
  PyObject *t_pydC;
  PyObject *t_pydocs;
  __pyx_t_10gsl_matrix_uint t_D;
  __pyx_t_10gsl_matrix_uint t_W;
  __pyx_t_10gsl_matrix_uint t_maxWC;
  __pyx_t_5numpy_uint16_t **t_docs;
  __pyx_t_5numpy_uint8_t *t_dC;
  __pyx_t_10gsl_matrix_uint *t_dW;
  FILE *test_out;
  double *unit;
  PyObject *prefix;
  __pyx_t_10gsl_matrix_uint nX;
  double delta[2];
  gsl_vector **alpha;
  double beta;
  __pyx_t_10gsl_matrix_uint n_iter;
  __pyx_t_10gsl_matrix_uint iter;
  double deltaNorm;
  double betaNorm;
  int save_interval;
  int eval_interval;
  __pyx_t_10gsl_matrix_uint burn_in;
};



/* "cymem/cymem.pxd":1
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "clda.pyx":88
 *         sum += abs(A[i] - B[i])
 * 
 * cdef class CLDA:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef uint C, D, T0, V # D is all the docs
 */

struct __pyx_vtabstruct_4clda_CLDA {
  PyObject *(*stat_incr)(struct __pyx_obj_4clda_CLDA *, int, int, int, int, __pyx_t_10gsl_matrix_uint, double);
  PyObject *(*update_alpha)(struct __pyx_obj_4clda_CLDA *, size_t);
};
static struct __pyx_vtabstruct_4clda_CLDA *__pyx_vtabptr_4clda_CLDA;
static CYTHON_INLINE PyObject *__pyx_f_4clda_4CLDA_stat_incr(struct __pyx_obj_4clda_CLDA *, int, int, int, int, __pyx_t_10gsl_matrix_uint, double);
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static CYTHON_INLINE int __Pyx_PyDict_Contains(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static void* __Pyx_GetVtable(PyObject *dict);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE npy_uint8 __Pyx_PyInt_As_npy_uint8(PyObject *);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint16(npy_uint16 value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint8(npy_uint8 value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE PyObject *__pyx_f_4clda_4CLDA_stat_incr(struct __pyx_obj_4clda_CLDA *__pyx_v_self, int __pyx_v_d, int __pyx_v_c, int __pyx_v_w, int __pyx_v_y, __pyx_t_10gsl_matrix_uint __pyx_v_z, double __pyx_v_val); /* proto*/
static PyObject *__pyx_f_4clda_4CLDA_update_alpha(struct __pyx_obj_4clda_CLDA *__pyx_v_self, size_t __pyx_v_c); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cython_gsl.gsl_mode' */

/* Module declarations from 'cython_gsl.gsl_math' */

/* Module declarations from 'cython_gsl.gsl_complex' */

/* Module declarations from 'cython_gsl.gsl_poly' */

/* Module declarations from 'cython_gsl.gsl_sf_result' */

/* Module declarations from 'cython_gsl.gsl_airy' */

/* Module declarations from 'cython_gsl.gsl_bessel' */

/* Module declarations from 'cython_gsl.gsl_clausen' */

/* Module declarations from 'cython_gsl.gsl_coulomb' */

/* Module declarations from 'cython_gsl.gsl_coupling' */

/* Module declarations from 'cython_gsl.gsl_dawson' */

/* Module declarations from 'cython_gsl.gsl_debye' */

/* Module declarations from 'cython_gsl.gsl_dilog' */

/* Module declarations from 'cython_gsl.gsl_elementary' */

/* Module declarations from 'cython_gsl.gsl_ellint' */

/* Module declarations from 'cython_gsl.gsl_elljac' */

/* Module declarations from 'cython_gsl.gsl_erf' */

/* Module declarations from 'cython_gsl.gsl_exp' */

/* Module declarations from 'cython_gsl.gsl_expint' */

/* Module declarations from 'cython_gsl.gsl_fermi_dirac' */

/* Module declarations from 'cython_gsl.gsl_gamma' */

/* Module declarations from 'cython_gsl.gsl_gegenbauer' */

/* Module declarations from 'cython_gsl.gsl_hyperg' */

/* Module declarations from 'cython_gsl.gsl_laguerre' */

/* Module declarations from 'cython_gsl.gsl_lambert' */

/* Module declarations from 'cython_gsl.gsl_legendre' */

/* Module declarations from 'cython_gsl.gsl_log' */

/* Module declarations from 'cython_gsl.gsl_pow_int' */

/* Module declarations from 'cython_gsl.gsl_psi' */

/* Module declarations from 'cython_gsl.gsl_synchrotron' */

/* Module declarations from 'cython_gsl.gsl_transport' */

/* Module declarations from 'cython_gsl.gsl_trig' */

/* Module declarations from 'cython_gsl.gsl_zeta' */

/* Module declarations from 'cython_gsl.gsl_block' */

/* Module declarations from 'cython_gsl.gsl_vector' */

/* Module declarations from 'cython_gsl.gsl_vector_complex' */

/* Module declarations from 'cython_gsl.gsl_matrix' */

/* Module declarations from 'cython_gsl.gsl_matrix_complex' */

/* Module declarations from 'cython_gsl.gsl_permutation' */

/* Module declarations from 'cython_gsl.gsl_combination' */

/* Module declarations from 'cython_gsl.gsl_sort' */

/* Module declarations from 'cython_gsl.gsl_blas_types' */

/* Module declarations from 'cython_gsl.gsl_blas' */

/* Module declarations from 'cython_gsl.gsl_linalg' */

/* Module declarations from 'cython_gsl.gsl_eigen' */

/* Module declarations from 'cython_gsl.gsl_fft' */

/* Module declarations from 'cython_gsl.gsl_integration' */

/* Module declarations from 'cython_gsl.gsl_rng' */

/* Module declarations from 'cython_gsl.gsl_qrng' */

/* Module declarations from 'cython_gsl.gsl_random' */

/* Module declarations from 'cython_gsl.gsl_statistics' */

/* Module declarations from 'cython_gsl.gsl_histogram' */

/* Module declarations from 'cython_gsl.gsl_ntuple' */

/* Module declarations from 'cython_gsl.gsl_monte' */

/* Module declarations from 'cython_gsl.gsl_odeiv' */

/* Module declarations from 'cython_gsl.gsl_odeiv2' */

/* Module declarations from 'cython_gsl.gsl_interp' */

/* Module declarations from 'cython_gsl.gsl_diff' */

/* Module declarations from 'cython_gsl.gsl_chebyshev' */

/* Module declarations from 'cython_gsl.gsl_sum' */

/* Module declarations from 'cython_gsl.gsl_roots' */

/* Module declarations from 'cython_gsl.gsl_min' */

/* Module declarations from 'cython_gsl.gsl_fit' */

/* Module declarations from 'cython_gsl.gsl_multimin' */

/* Module declarations from 'cython_gsl.gsl_multifit_nlin' */

/* Module declarations from 'cython_gsl' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'openmp' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'gsl_matrix' */
static CYTHON_INLINE gsl_vector **__pyx_f_10gsl_matrix_alloc_2d_gsl_matrix(__pyx_t_10gsl_matrix_uint, __pyx_t_10gsl_matrix_uint, double); /*proto*/
static CYTHON_INLINE gsl_vector ***__pyx_f_10gsl_matrix_alloc_3d_gsl_matrix(__pyx_t_10gsl_matrix_uint, __pyx_t_10gsl_matrix_uint, __pyx_t_10gsl_matrix_uint, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_free_2d_gsl_matrix(gsl_vector **, __pyx_t_10gsl_matrix_uint); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_free_3d_gsl_matrix(gsl_vector ***, __pyx_t_10gsl_matrix_uint, __pyx_t_10gsl_matrix_uint); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_1d_matrix_incr(gsl_vector *, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(gsl_vector **, size_t, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_incr(gsl_vector ***, size_t, size_t, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_add_constant(gsl_vector **, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_add_constant(gsl_vector ***, size_t, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(gsl_vector **, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_set_all(gsl_vector ***, size_t, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(gsl_vector **, size_t, double); /*proto*/
static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_scale(gsl_vector ***, size_t, size_t, double); /*proto*/

/* Module declarations from 'clda' */
static PyTypeObject *__pyx_ptype_4clda_CLDA = 0;
static PyArrayObject *__pyx_f_4clda_gsl2numpy(gsl_vector *); /*proto*/
static double *__pyx_f_4clda_alloc_1d_matrix(struct __pyx_obj_5cymem_5cymem_Pool *, size_t); /*proto*/
static double **__pyx_f_4clda_alloc_2d_matrix(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t); /*proto*/
#define __Pyx_MODULE_NAME "clda"
int __pyx_module_is_main_clda = 0;

/* Implementation of 'clda' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static int __pyx_pf_4clda_4CLDA___init__(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_corpus_path, PyObject *__pyx_v_prefix, PyObject *__pyx_v_test_path, PyObject *__pyx_v_num_topics_0, PyObject *__pyx_v_num_topics_c, PyObject *__pyx_v_alpha, PyObject *__pyx_v_delta, PyObject *__pyx_v_beta, PyObject *__pyx_v_n_worker, PyObject *__pyx_v_n_iter, PyObject *__pyx_v_save_interval, PyObject *__pyx_v_eval_interval, PyObject *__pyx_v_burn_in); /* proto */
static void __pyx_pf_4clda_4CLDA_2__dealloc__(struct __pyx_obj_4clda_CLDA *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4clda_4CLDA_4run(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_load); /* proto */
static PyObject *__pyx_pf_4clda_4CLDA_6initialize(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_load); /* proto */
static PyObject *__pyx_pf_4clda_4CLDA_8evaluate(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_resample, PyObject *__pyx_v_single, PyObject *__pyx_v_T0, PyObject *__pyx_v_eval_sigma); /* proto */
static PyObject *__pyx_pf_4clda_4CLDA_10save(struct __pyx_obj_4clda_CLDA *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_stats, PyObject *__pyx_v_k); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_4clda_CLDA(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_r[] = "r";
static char __pyx_k_w[] = "w";
static char __pyx_k_5f[] = "%.5f";
static char __pyx_k_T0[] = "T0";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__7[] = ", ";
static char __pyx_k_np[] = "np";
static char __pyx_k_rb[] = "rb";
static char __pyx_k_wb[] = "wb";
static char __pyx_k_04d[] = "-%04d";
static char __pyx_k__10[] = "\n";
static char __pyx_k_end[] = "end";
static char __pyx_k_now[] = "now";
static char __pyx_k_pkl[] = ".pkl";
static char __pyx_k_psi[] = "psi";
static char __pyx_k_sum[] = "sum";
static char __pyx_k_zip[] = "zip";
static char __pyx_k_CLDA[] = "CLDA";
static char __pyx_k_beta[] = "beta";
static char __pyx_k_done[] = "...done";
static char __pyx_k_dump[] = "dump";
static char __pyx_k_exit[] = "__exit__";
static char __pyx_k_file[] = "file";
static char __pyx_k_info[] = "info";
static char __pyx_k_join[] = "join";
static char __pyx_k_load[] = "load";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_open[] = "open";
static char __pyx_k_save[] = "save";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = ".time";
static char __pyx_k_alpha[] = "alpha";
static char __pyx_k_array[] = "array";
static char __pyx_k_close[] = "close";
static char __pyx_k_delta[] = "delta";
static char __pyx_k_enter[] = "__enter__";
static char __pyx_k_gmean[] = "gmean";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_split[] = "split";
static char __pyx_k_stats[] = "stats";
static char __pyx_k_strip[] = "strip";
static char __pyx_k_write[] = "write";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_append[] = "append";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_logger[] = "logger";
static char __pyx_k_n_iter[] = "n_iter";
static char __pyx_k_pickle[] = "pickle";
static char __pyx_k_prefix[] = "prefix";
static char __pyx_k_random[] = "random";
static char __pyx_k_single[] = "single";
static char __pyx_k_sorted[] = "sorted";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_burn_in[] = "burn_in";
static char __pyx_k_cPickle[] = "cPickle";
static char __pyx_k_d_f_f_f[] = "%d\t%f\t%f\t%f\n";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_randint[] = "randint";
static char __pyx_k_datetime[] = "datetime";
static char __pyx_k_evaluate[] = ".evaluate";
static char __pyx_k_n_worker[] = "n_worker";
static char __pyx_k_resample[] = "resample";
static char __pyx_k_d_alpha_s[] = "%d alpha:\t%s";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_getLogger[] = "getLogger";
static char __pyx_k_polygamma[] = "polygamma";
static char __pyx_k_s_04d_pkl[] = "%s-%04d.pkl";
static char __pyx_k_test_path[] = "test_path";
static char __pyx_k_timedelta[] = "timedelta";
static char __pyx_k_Evaluating[] = "Evaluating...";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_eval_sigma[] = "eval_sigma";
static char __pyx_k_initialize[] = "initialize";
static char __pyx_k_of_terms_d[] = "# of terms: %d";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_Iteration_d[] = "Iteration %d...";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_Test_docs_d[] = "Test docs: %d";
static char __pyx_k_collections[] = "collections";
static char __pyx_k_corpus_path[] = "corpus_path";
static char __pyx_k_defaultdict[] = "defaultdict";
static char __pyx_k_Initializing[] = "Initializing...";
static char __pyx_k_Loading_data[] = "Loading data...";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_Total_docs_d[] = "Total docs: %d";
static char __pyx_k_num_topics_0[] = "num_topics_0";
static char __pyx_k_num_topics_c[] = "num_topics_c";
static char __pyx_k_eval_interval[] = "eval_interval";
static char __pyx_k_save_interval[] = "save_interval";
static char __pyx_k_scipy_special[] = "scipy.special";
static char __pyx_k_total_seconds[] = "total_seconds";
static char __pyx_k_Collection_d_d[] = "Collection %d: %d";
static char __pyx_k_Loading_states[] = "Loading states...";
static char __pyx_k_Optimizing_alpha[] = "Optimizing alpha...";
static char __pyx_k_of_collections_d[] = "# of collections: %d";
static char __pyx_k_of_vocab_words_d[] = "# of vocab words: %d";
static char __pyx_k_Allocating_memory[] = "Allocating memory...";
static char __pyx_k_of_shared_topics_d[] = "# of shared topics: %d";
static char __pyx_k_scipy_stats_mstats[] = "scipy.stats.mstats";
static char __pyx_k_of_isolated_topics_s[] = "# of isolated topics: %s";
static char __pyx_k_Running_with_d_threads[] = "Running with %d threads";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_log_likelihood_2f_perplexity_2f[] = "log likelihood: %2f, perplexity: %2f";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_alpha_became_unstable_terminatin[] = "alpha became unstable, terminating..";
static char __pyx_k_average_running_time_of_each_ite[] = "average running time of each iteration: %s";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_04d;
static PyObject *__pyx_kp_s_5f;
static PyObject *__pyx_kp_s_Allocating_memory;
static PyObject *__pyx_n_s_CLDA;
static PyObject *__pyx_kp_s_Collection_d_d;
static PyObject *__pyx_kp_s_Evaluating;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Initializing;
static PyObject *__pyx_kp_s_Iteration_d;
static PyObject *__pyx_kp_s_Loading_data;
static PyObject *__pyx_kp_s_Loading_states;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_s_Optimizing_alpha;
static PyObject *__pyx_kp_s_Running_with_d_threads;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_T0;
static PyObject *__pyx_kp_s_Test_docs_d;
static PyObject *__pyx_kp_s_Total_docs_d;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__10;
static PyObject *__pyx_kp_s__7;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_kp_s_alpha_became_unstable_terminatin;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_kp_s_average_running_time_of_each_ite;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_burn_in;
static PyObject *__pyx_n_s_cPickle;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_corpus_path;
static PyObject *__pyx_kp_s_d_alpha_s;
static PyObject *__pyx_n_s_datetime;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_kp_s_done;
static PyObject *__pyx_n_s_dump;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eval_interval;
static PyObject *__pyx_n_s_eval_sigma;
static PyObject *__pyx_kp_s_evaluate;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_gmean;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_kp_s_log_likelihood_2f_perplexity_2f;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_n_iter;
static PyObject *__pyx_n_s_n_worker;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_now;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num_topics_0;
static PyObject *__pyx_n_s_num_topics_c;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_of_collections_d;
static PyObject *__pyx_kp_s_of_isolated_topics_s;
static PyObject *__pyx_kp_s_of_shared_topics_d;
static PyObject *__pyx_kp_s_of_terms_d;
static PyObject *__pyx_kp_s_of_vocab_words_d;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_kp_s_pkl;
static PyObject *__pyx_n_s_polygamma;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_psi;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_randint;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rb;
static PyObject *__pyx_n_s_resample;
static PyObject *__pyx_kp_s_s_04d_pkl;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_n_s_save_interval;
static PyObject *__pyx_n_s_scipy_special;
static PyObject *__pyx_n_s_scipy_stats_mstats;
static PyObject *__pyx_n_s_single;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stats;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_path;
static PyObject *__pyx_kp_s_time;
static PyObject *__pyx_n_s_timedelta;
static PyObject *__pyx_n_s_total_seconds;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_wb;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_float__01;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_50_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_500;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k_;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_slice__5;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;

/* "clda.pyx":54
 *             gsl_vector *nZ, gsl_vector *n0Z, gsl_vector **nYZ, gsl_vector **n0WZ, gsl_vector ***n1CWZ, gsl_vector **n1CZ, gsl_vector ***nCWZ, gsl_vector **nCZ)
 * 
 * cdef np.ndarray gsl2numpy(gsl_vector *vector):             # <<<<<<<<<<<<<<
 *     cdef np.ndarray res = np.zeros(vector.size)
 *     cdef size_t i
 */

static PyArrayObject *__pyx_f_4clda_gsl2numpy(gsl_vector *__pyx_v_vector) {
  PyArrayObject *__pyx_v_res = 0;
  size_t __pyx_v_i;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gsl2numpy", 0);

  /* "clda.pyx":55
 * 
 * cdef np.ndarray gsl2numpy(gsl_vector *vector):
 *     cdef np.ndarray res = np.zeros(vector.size)             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(vector.size):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_vector->size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_res = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "clda.pyx":57
 *     cdef np.ndarray res = np.zeros(vector.size)
 *     cdef size_t i
 *     for i in range(vector.size):             # <<<<<<<<<<<<<<
 *         res[i] = gsl_vector_get(vector, i)
 *     return res
 */
  __pyx_t_6 = __pyx_v_vector->size;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "clda.pyx":58
 *     cdef size_t i
 *     for i in range(vector.size):
 *         res[i] = gsl_vector_get(vector, i)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(gsl_vector_get(__pyx_v_vector, __pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_res), __pyx_v_i, __pyx_t_1, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "clda.pyx":59
 *     for i in range(vector.size):
 *         res[i] = gsl_vector_get(vector, i)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef double* alloc_1d_matrix(Pool mem, size_t A):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "clda.pyx":54
 *             gsl_vector *nZ, gsl_vector *n0Z, gsl_vector **nYZ, gsl_vector **n0WZ, gsl_vector ***n1CWZ, gsl_vector **n1CZ, gsl_vector ***nCWZ, gsl_vector **nCZ)
 * 
 * cdef np.ndarray gsl2numpy(gsl_vector *vector):             # <<<<<<<<<<<<<<
 *     cdef np.ndarray res = np.zeros(vector.size)
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("clda.gsl2numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":61
 *     return res
 * 
 * cdef double* alloc_1d_matrix(Pool mem, size_t A):             # <<<<<<<<<<<<<<
 *     cdef double *m = <double*>mem.alloc(A, sizeof(double))
 *     cdef size_t i
 */

static double *__pyx_f_4clda_alloc_1d_matrix(struct __pyx_obj_5cymem_5cymem_Pool *__pyx_v_mem, size_t __pyx_v_A) {
  double *__pyx_v_m;
  size_t __pyx_v_i;
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alloc_1d_matrix", 0);

  /* "clda.pyx":62
 * 
 * cdef double* alloc_1d_matrix(Pool mem, size_t A):
 *     cdef double *m = <double*>mem.alloc(A, sizeof(double))             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_mem->__pyx_vtab)->alloc(__pyx_v_mem, __pyx_v_A, (sizeof(double))); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_m = ((double *)__pyx_t_1);

  /* "clda.pyx":64
 *     cdef double *m = <double*>mem.alloc(A, sizeof(double))
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         m[i] = 0
 *     return m
 */
  __pyx_t_2 = __pyx_v_A;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "clda.pyx":65
 *     cdef size_t i
 *     for i in range(A):
 *         m[i] = 0             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    (__pyx_v_m[__pyx_v_i]) = 0.0;
  }

  /* "clda.pyx":66
 *     for i in range(A):
 *         m[i] = 0
 *     return m             # <<<<<<<<<<<<<<
 * 
 * cdef double** alloc_2d_matrix(Pool mem, size_t A, size_t B):
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "clda.pyx":61
 *     return res
 * 
 * cdef double* alloc_1d_matrix(Pool mem, size_t A):             # <<<<<<<<<<<<<<
 *     cdef double *m = <double*>mem.alloc(A, sizeof(double))
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("clda.alloc_1d_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":68
 *     return m
 * 
 * cdef double** alloc_2d_matrix(Pool mem, size_t A, size_t B):             # <<<<<<<<<<<<<<
 *     cdef double **m = <double**>mem.alloc(A, sizeof(double*))
 *     cdef size_t i
 */

static double **__pyx_f_4clda_alloc_2d_matrix(struct __pyx_obj_5cymem_5cymem_Pool *__pyx_v_mem, size_t __pyx_v_A, size_t __pyx_v_B) {
  double **__pyx_v_m;
  size_t __pyx_v_i;
  double **__pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alloc_2d_matrix", 0);

  /* "clda.pyx":69
 * 
 * cdef double** alloc_2d_matrix(Pool mem, size_t A, size_t B):
 *     cdef double **m = <double**>mem.alloc(A, sizeof(double*))             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_mem->__pyx_vtab)->alloc(__pyx_v_mem, __pyx_v_A, (sizeof(double *))); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_m = ((double **)__pyx_t_1);

  /* "clda.pyx":71
 *     cdef double **m = <double**>mem.alloc(A, sizeof(double*))
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         m[i] = alloc_1d_matrix(mem, B)
 *     return m
 */
  __pyx_t_2 = __pyx_v_A;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "clda.pyx":72
 *     cdef size_t i
 *     for i in range(A):
 *         m[i] = alloc_1d_matrix(mem, B)             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    (__pyx_v_m[__pyx_v_i]) = __pyx_f_4clda_alloc_1d_matrix(__pyx_v_mem, __pyx_v_B);
  }

  /* "clda.pyx":73
 *     for i in range(A):
 *         m[i] = alloc_1d_matrix(mem, B)
 *     return m             # <<<<<<<<<<<<<<
 * 
 * cdef double*** alloc_3d_matrix(Pool mem, size_t A, size_t B, size_t C):
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "clda.pyx":68
 *     return m
 * 
 * cdef double** alloc_2d_matrix(Pool mem, size_t A, size_t B):             # <<<<<<<<<<<<<<
 *     cdef double **m = <double**>mem.alloc(A, sizeof(double*))
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("clda.alloc_2d_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":75
 *     return m
 * 
 * cdef double*** alloc_3d_matrix(Pool mem, size_t A, size_t B, size_t C):             # <<<<<<<<<<<<<<
 *     cdef double ***m = <double***>mem.alloc(A, sizeof(double**))
 *     cdef size_t i
 */

static double ***__pyx_f_4clda_alloc_3d_matrix(struct __pyx_obj_5cymem_5cymem_Pool *__pyx_v_mem, size_t __pyx_v_A, size_t __pyx_v_B, size_t __pyx_v_C) {
  double ***__pyx_v_m;
  size_t __pyx_v_i;
  double ***__pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alloc_3d_matrix", 0);

  /* "clda.pyx":76
 * 
 * cdef double*** alloc_3d_matrix(Pool mem, size_t A, size_t B, size_t C):
 *     cdef double ***m = <double***>mem.alloc(A, sizeof(double**))             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_mem->__pyx_vtab)->alloc(__pyx_v_mem, __pyx_v_A, (sizeof(double **))); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_m = ((double ***)__pyx_t_1);

  /* "clda.pyx":78
 *     cdef double ***m = <double***>mem.alloc(A, sizeof(double**))
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         m[i] = alloc_2d_matrix(mem, B, C)
 *     return m
 */
  __pyx_t_2 = __pyx_v_A;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "clda.pyx":79
 *     cdef size_t i
 *     for i in range(A):
 *         m[i] = alloc_2d_matrix(mem, B, C)             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    (__pyx_v_m[__pyx_v_i]) = __pyx_f_4clda_alloc_2d_matrix(__pyx_v_mem, __pyx_v_B, __pyx_v_C);
  }

  /* "clda.pyx":80
 *     for i in range(A):
 *         m[i] = alloc_2d_matrix(mem, B, C)
 *     return m             # <<<<<<<<<<<<<<
 * 
 * cdef inline double l1(double *A, double *B, size_t n):
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "clda.pyx":75
 *     return m
 * 
 * cdef double*** alloc_3d_matrix(Pool mem, size_t A, size_t B, size_t C):             # <<<<<<<<<<<<<<
 *     cdef double ***m = <double***>mem.alloc(A, sizeof(double**))
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("clda.alloc_3d_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":82
 *     return m
 * 
 * cdef inline double l1(double *A, double *B, size_t n):             # <<<<<<<<<<<<<<
 *     cdef double sum = 0
 *     cdef size_t i
 */

static CYTHON_INLINE double __pyx_f_4clda_l1(double *__pyx_v_A, double *__pyx_v_B, size_t __pyx_v_n) {
  double __pyx_v_sum;
  size_t __pyx_v_i;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("l1", 0);

  /* "clda.pyx":83
 * 
 * cdef inline double l1(double *A, double *B, size_t n):
 *     cdef double sum = 0             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(n):
 */
  __pyx_v_sum = 0.0;

  /* "clda.pyx":85
 *     cdef double sum = 0
 *     cdef size_t i
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         sum += abs(A[i] - B[i])
 * 
 */
  __pyx_t_1 = __pyx_v_n;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "clda.pyx":86
 *     cdef size_t i
 *     for i in range(n):
 *         sum += abs(A[i] - B[i])             # <<<<<<<<<<<<<<
 * 
 * cdef class CLDA:
 */
    __pyx_v_sum = (__pyx_v_sum + fabs(((__pyx_v_A[__pyx_v_i]) - (__pyx_v_B[__pyx_v_i]))));
  }

  /* "clda.pyx":82
 *     return m
 * 
 * cdef inline double l1(double *A, double *B, size_t n):             # <<<<<<<<<<<<<<
 *     cdef double sum = 0
 *     cdef size_t i
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":157
 *     cdef uint burn_in
 * 
 *     def __init__(self, corpus_path, prefix, test_path=None, num_topics_0=10, num_topics_c=10,             # <<<<<<<<<<<<<<
 *             alpha=50.0, delta=[1, 1], beta=.01, n_worker=-1,
 *                  n_iter=20, save_interval=50, eval_interval=10, burn_in=500):
 */

/* Python wrapper */
static int __pyx_pw_4clda_4CLDA_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4clda_4CLDA_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_corpus_path = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_test_path = 0;
  PyObject *__pyx_v_num_topics_0 = 0;
  PyObject *__pyx_v_num_topics_c = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_delta = 0;
  PyObject *__pyx_v_beta = 0;
  PyObject *__pyx_v_n_worker = 0;
  PyObject *__pyx_v_n_iter = 0;
  PyObject *__pyx_v_save_interval = 0;
  PyObject *__pyx_v_eval_interval = 0;
  PyObject *__pyx_v_burn_in = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_corpus_path,&__pyx_n_s_prefix,&__pyx_n_s_test_path,&__pyx_n_s_num_topics_0,&__pyx_n_s_num_topics_c,&__pyx_n_s_alpha,&__pyx_n_s_delta,&__pyx_n_s_beta,&__pyx_n_s_n_worker,&__pyx_n_s_n_iter,&__pyx_n_s_save_interval,&__pyx_n_s_eval_interval,&__pyx_n_s_burn_in,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_int_10);
    values[4] = ((PyObject *)__pyx_int_10);
    values[5] = ((PyObject *)__pyx_float_50_0);
    values[6] = __pyx_k_;
    values[7] = ((PyObject *)__pyx_float__01);
    values[8] = ((PyObject *)__pyx_int_neg_1);
    values[9] = ((PyObject *)__pyx_int_20);
    values[10] = ((PyObject *)__pyx_int_50);
    values[11] = ((PyObject *)__pyx_int_10);
    values[12] = ((PyObject *)__pyx_int_500);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_corpus_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 13, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_test_path);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_topics_0);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_topics_c);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_worker);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_iter);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_save_interval);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eval_interval);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_burn_in);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_corpus_path = values[0];
    __pyx_v_prefix = values[1];
    __pyx_v_test_path = values[2];
    __pyx_v_num_topics_0 = values[3];
    __pyx_v_num_topics_c = values[4];
    __pyx_v_alpha = values[5];
    __pyx_v_delta = values[6];
    __pyx_v_beta = values[7];
    __pyx_v_n_worker = values[8];
    __pyx_v_n_iter = values[9];
    __pyx_v_save_interval = values[10];
    __pyx_v_eval_interval = values[11];
    __pyx_v_burn_in = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 13, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("clda.CLDA.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4clda_4CLDA___init__(((struct __pyx_obj_4clda_CLDA *)__pyx_v_self), __pyx_v_corpus_path, __pyx_v_prefix, __pyx_v_test_path, __pyx_v_num_topics_0, __pyx_v_num_topics_c, __pyx_v_alpha, __pyx_v_delta, __pyx_v_beta, __pyx_v_n_worker, __pyx_v_n_iter, __pyx_v_save_interval, __pyx_v_eval_interval, __pyx_v_burn_in);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4clda_4CLDA___init__(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_corpus_path, PyObject *__pyx_v_prefix, PyObject *__pyx_v_test_path, PyObject *__pyx_v_num_topics_0, PyObject *__pyx_v_num_topics_c, PyObject *__pyx_v_alpha, PyObject *__pyx_v_delta, PyObject *__pyx_v_beta, PyObject *__pyx_v_n_worker, PyObject *__pyx_v_n_iter, PyObject *__pyx_v_save_interval, PyObject *__pyx_v_eval_interval, PyObject *__pyx_v_burn_in) {
  PyObject *__pyx_v_n_thread = NULL;
  PyObject *__pyx_v_Dc = NULL;
  PyObject *__pyx_v_Wc = NULL;
  int __pyx_v_MIN_DOC_LENGTH;
  CYTHON_UNUSED double __pyx_v_ratio;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_collection_id = NULL;
  PyObject *__pyx_v_temp = NULL;
  PyObject *__pyx_v_word = NULL;
  __pyx_t_10gsl_matrix_uint __pyx_v_c;
  PyObject *__pyx_v_tc = NULL;
  PyObject *__pyx_v_unit = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __pyx_t_10gsl_matrix_uint __pyx_t_19;
  __pyx_t_10gsl_matrix_uint __pyx_t_20;
  void *__pyx_t_21;
  size_t __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  double __pyx_t_24;
  char const *__pyx_t_25;
  size_t __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_num_topics_c);
  __Pyx_INCREF(__pyx_v_n_worker);

  /* "clda.pyx":160
 *             alpha=50.0, delta=[1, 1], beta=.01, n_worker=-1,
 *                  n_iter=20, save_interval=50, eval_interval=10, burn_in=500):
 *         self.mem = Pool()             # <<<<<<<<<<<<<<
 *         n_thread = openmp.omp_get_max_threads()
 *         if n_worker < 0:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5cymem_5cymem_Pool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "clda.pyx":161
 *                  n_iter=20, save_interval=50, eval_interval=10, burn_in=500):
 *         self.mem = Pool()
 *         n_thread = openmp.omp_get_max_threads()             # <<<<<<<<<<<<<<
 *         if n_worker < 0:
 *             if n_thread + n_worker > 0:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(omp_get_max_threads()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_n_thread = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "clda.pyx":162
 *         self.mem = Pool()
 *         n_thread = openmp.omp_get_max_threads()
 *         if n_worker < 0:             # <<<<<<<<<<<<<<
 *             if n_thread + n_worker > 0:
 *                 n_worker += n_thread
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_n_worker, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "clda.pyx":163
 *         n_thread = openmp.omp_get_max_threads()
 *         if n_worker < 0:
 *             if n_thread + n_worker > 0:             # <<<<<<<<<<<<<<
 *                 n_worker += n_thread
 *             else:
 */
    __pyx_t_1 = PyNumber_Add(__pyx_v_n_thread, __pyx_v_n_worker); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "clda.pyx":164
 *         if n_worker < 0:
 *             if n_thread + n_worker > 0:
 *                 n_worker += n_thread             # <<<<<<<<<<<<<<
 *             else:
 *                 n_worker = 1
 */
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_n_worker, __pyx_v_n_thread); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_n_worker, __pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "clda.pyx":166
 *                 n_worker += n_thread
 *             else:
 *                 n_worker = 1             # <<<<<<<<<<<<<<
 *         if n_worker > 0 and n_worker < n_thread:
 *             openmp.omp_set_num_threads(n_worker)
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_DECREF_SET(__pyx_v_n_worker, __pyx_int_1);
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "clda.pyx":167
 *             else:
 *                 n_worker = 1
 *         if n_worker > 0 and n_worker < n_thread:             # <<<<<<<<<<<<<<
 *             openmp.omp_set_num_threads(n_worker)
 *         else:
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_n_worker, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {
    goto __pyx_L7_next_and;
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_L7_next_and:;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_n_worker, __pyx_v_n_thread, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "clda.pyx":168
 *                 n_worker = 1
 *         if n_worker > 0 and n_worker < n_thread:
 *             openmp.omp_set_num_threads(n_worker)             # <<<<<<<<<<<<<<
 *         else:
 *             n_worker = n_thread
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_n_worker); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    omp_set_num_threads(__pyx_t_5);
    goto __pyx_L5;
  }
  /*else*/ {

    /* "clda.pyx":170
 *             openmp.omp_set_num_threads(n_worker)
 *         else:
 *             n_worker = n_thread             # <<<<<<<<<<<<<<
 *         # store user-supplied parameters
 *         self.word2id = {}
 */
    __Pyx_INCREF(__pyx_v_n_thread);
    __Pyx_DECREF_SET(__pyx_v_n_worker, __pyx_v_n_thread);
  }
  __pyx_L5:;

  /* "clda.pyx":172
 *             n_worker = n_thread
 *         # store user-supplied parameters
 *         self.word2id = {}             # <<<<<<<<<<<<<<
 *         self.V = 0
 *         self.C = 0
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->word2id);
  __Pyx_DECREF(__pyx_v_self->word2id);
  __pyx_v_self->word2id = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "clda.pyx":173
 *         # store user-supplied parameters
 *         self.word2id = {}
 *         self.V = 0             # <<<<<<<<<<<<<<
 *         self.C = 0
 *         self.pydC = []
 */
  __pyx_v_self->V = 0;

  /* "clda.pyx":174
 *         self.word2id = {}
 *         self.V = 0
 *         self.C = 0             # <<<<<<<<<<<<<<
 *         self.pydC = []
 *         self.pydocs = []
 */
  __pyx_v_self->C = 0;

  /* "clda.pyx":175
 *         self.V = 0
 *         self.C = 0
 *         self.pydC = []             # <<<<<<<<<<<<<<
 *         self.pydocs = []
 *         logger.info("Loading data...")
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->pydC);
  __Pyx_DECREF(__pyx_v_self->pydC);
  __pyx_v_self->pydC = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "clda.pyx":176
 *         self.C = 0
 *         self.pydC = []
 *         self.pydocs = []             # <<<<<<<<<<<<<<
 *         logger.info("Loading data...")
 *         self.nW = 0
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->pydocs);
  __Pyx_DECREF(__pyx_v_self->pydocs);
  __pyx_v_self->pydocs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "clda.pyx":177
 *         self.pydC = []
 *         self.pydocs = []
 *         logger.info("Loading data...")             # <<<<<<<<<<<<<<
 *         self.nW = 0
 *         Dc = defaultdict(int)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "clda.pyx":178
 *         self.pydocs = []
 *         logger.info("Loading data...")
 *         self.nW = 0             # <<<<<<<<<<<<<<
 *         Dc = defaultdict(int)
 *         Wc = defaultdict(int)
 */
  __pyx_v_self->nW = 0;

  /* "clda.pyx":179
 *         logger.info("Loading data...")
 *         self.nW = 0
 *         Dc = defaultdict(int)             # <<<<<<<<<<<<<<
 *         Wc = defaultdict(int)
 *         cdef int MIN_DOC_LENGTH = 10
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defaultdict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)((PyObject*)(&PyInt_Type)))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyInt_Type))));
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)((PyObject*)(&PyInt_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyInt_Type))));
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Dc = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "clda.pyx":180
 *         self.nW = 0
 *         Dc = defaultdict(int)
 *         Wc = defaultdict(int)             # <<<<<<<<<<<<<<
 *         cdef int MIN_DOC_LENGTH = 10
 *         self.test = False
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_defaultdict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)((PyObject*)(&PyInt_Type)))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyInt_Type))));
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)((PyObject*)(&PyInt_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyInt_Type))));
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Wc = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "clda.pyx":181
 *         Dc = defaultdict(int)
 *         Wc = defaultdict(int)
 *         cdef int MIN_DOC_LENGTH = 10             # <<<<<<<<<<<<<<
 *         self.test = False
 *         cdef double ratio = 1.0
 */
  __pyx_v_MIN_DOC_LENGTH = 10;

  /* "clda.pyx":182
 *         Wc = defaultdict(int)
 *         cdef int MIN_DOC_LENGTH = 10
 *         self.test = False             # <<<<<<<<<<<<<<
 *         cdef double ratio = 1.0
 *         cdef size_t i, j
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_GOTREF(__pyx_v_self->test);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->test));
  __pyx_v_self->test = ((PyBoolObject *)Py_False);

  /* "clda.pyx":183
 *         cdef int MIN_DOC_LENGTH = 10
 *         self.test = False
 *         cdef double ratio = 1.0             # <<<<<<<<<<<<<<
 *         cdef size_t i, j
 * 
 */
  __pyx_v_ratio = 1.0;

  /* "clda.pyx":186
 *         cdef size_t i, j
 * 
 *         with open(corpus_path, 'r') as f:             # <<<<<<<<<<<<<<
 *             for line in f:
 *                 line = line.strip().split()
 */
  /*with:*/ {
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_corpus_path);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_corpus_path);
    __Pyx_GIVEREF(__pyx_v_corpus_path);
    __Pyx_INCREF(__pyx_n_s_r);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_r);
    __Pyx_GIVEREF(__pyx_n_s_r);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __pyx_v_f = __pyx_t_6;
          __pyx_t_6 = 0;

          /* "clda.pyx":187
 * 
 *         with open(corpus_path, 'r') as f:
 *             for line in f:             # <<<<<<<<<<<<<<
 *                 line = line.strip().split()
 *                 if len(line) < MIN_DOC_LENGTH + 1:
 */
          if (likely(PyList_CheckExact(__pyx_v_f)) || PyTuple_CheckExact(__pyx_v_f)) {
            __pyx_t_6 = __pyx_v_f; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
            __pyx_t_13 = NULL;
          } else {
            __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_f); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
          }
          for (;;) {
            if (likely(!__pyx_t_13)) {
              if (likely(PyList_CheckExact(__pyx_t_6))) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                #endif
              } else {
                if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_13(__pyx_t_6);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "clda.pyx":188
 *         with open(corpus_path, 'r') as f:
 *             for line in f:
 *                 line = line.strip().split()             # <<<<<<<<<<<<<<
 *                 if len(line) < MIN_DOC_LENGTH + 1:
 *                     continue
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_14 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            if (__pyx_t_14) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_7, function);
              }
            }
            if (__pyx_t_3) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "clda.pyx":189
 *             for line in f:
 *                 line = line.strip().split()
 *                 if len(line) < MIN_DOC_LENGTH + 1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 collection_id = int(line[0])
 */
            __pyx_t_15 = PyObject_Length(__pyx_v_line); if (unlikely(__pyx_t_15 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __pyx_t_2 = ((__pyx_t_15 < (__pyx_v_MIN_DOC_LENGTH + 1)) != 0);
            if (__pyx_t_2) {

              /* "clda.pyx":190
 *                 line = line.strip().split()
 *                 if len(line) < MIN_DOC_LENGTH + 1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 collection_id = int(line[0])
 *                 line = line[1:]
 */
              goto __pyx_L20_continue;
            }

            /* "clda.pyx":191
 *                 if len(line) < MIN_DOC_LENGTH + 1:
 *                     continue
 *                 collection_id = int(line[0])             # <<<<<<<<<<<<<<
 *                 line = line[1:]
 * 
 */
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_line, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L12_error;};
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_7 = PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF_SET(__pyx_v_collection_id, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "clda.pyx":192
 *                     continue
 *                 collection_id = int(line[0])
 *                 line = line[1:]             # <<<<<<<<<<<<<<
 * 
 *                 temp = []
 */
            __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_v_line, 1, 0, NULL, NULL, &__pyx_slice__3, 1, 0, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "clda.pyx":194
 *                 line = line[1:]
 * 
 *                 temp = []             # <<<<<<<<<<<<<<
 *                 for word in line:
 *                     if word not in self.word2id:
 */
            __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_XDECREF_SET(__pyx_v_temp, ((PyObject*)__pyx_t_7));
            __pyx_t_7 = 0;

            /* "clda.pyx":195
 * 
 *                 temp = []
 *                 for word in line:             # <<<<<<<<<<<<<<
 *                     if word not in self.word2id:
 *                         self.word2id[word] = self.V
 */
            if (likely(PyList_CheckExact(__pyx_v_line)) || PyTuple_CheckExact(__pyx_v_line)) {
              __pyx_t_7 = __pyx_v_line; __Pyx_INCREF(__pyx_t_7); __pyx_t_15 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_15 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_line); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_16 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            }
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_7))) {
                  if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_7)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                  #else
                  __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                  #endif
                } else {
                  if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                  #else
                  __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                  #endif
                }
              } else {
                __pyx_t_1 = __pyx_t_16(__pyx_t_7);
                if (unlikely(!__pyx_t_1)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_1);
              }
              __Pyx_XDECREF_SET(__pyx_v_word, __pyx_t_1);
              __pyx_t_1 = 0;

              /* "clda.pyx":196
 *                 temp = []
 *                 for word in line:
 *                     if word not in self.word2id:             # <<<<<<<<<<<<<<
 *                         self.word2id[word] = self.V
 *                         self.V += 1
 */
              if (unlikely(__pyx_v_self->word2id == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              }
              __pyx_t_2 = (__Pyx_PyDict_Contains(__pyx_v_word, __pyx_v_self->word2id, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              __pyx_t_4 = (__pyx_t_2 != 0);
              if (__pyx_t_4) {

                /* "clda.pyx":197
 *                 for word in line:
 *                     if word not in self.word2id:
 *                         self.word2id[word] = self.V             # <<<<<<<<<<<<<<
 *                         self.V += 1
 *                     temp.append(self.word2id[word])
 */
                __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->V); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                __Pyx_GOTREF(__pyx_t_1);
                if (unlikely(__pyx_v_self->word2id == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                }
                if (unlikely(PyDict_SetItem(__pyx_v_self->word2id, __pyx_v_word, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                /* "clda.pyx":198
 *                     if word not in self.word2id:
 *                         self.word2id[word] = self.V
 *                         self.V += 1             # <<<<<<<<<<<<<<
 *                     temp.append(self.word2id[word])
 *                 self.pydocs.append(temp)
 */
                __pyx_v_self->V = (__pyx_v_self->V + 1);
                goto __pyx_L25;
              }
              __pyx_L25:;

              /* "clda.pyx":199
 *                         self.word2id[word] = self.V
 *                         self.V += 1
 *                     temp.append(self.word2id[word])             # <<<<<<<<<<<<<<
 *                 self.pydocs.append(temp)
 * 
 */
              if (unlikely(__pyx_v_self->word2id == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              }
              __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->word2id, __pyx_v_word); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L12_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_temp, __pyx_t_1); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "clda.pyx":195
 * 
 *                 temp = []
 *                 for word in line:             # <<<<<<<<<<<<<<
 *                     if word not in self.word2id:
 *                         self.word2id[word] = self.V
 */
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "clda.pyx":200
 *                         self.V += 1
 *                     temp.append(self.word2id[word])
 *                 self.pydocs.append(temp)             # <<<<<<<<<<<<<<
 * 
 *                 self.pydC.append(collection_id)
 */
            if (unlikely(__pyx_v_self->pydocs == Py_None)) {
              PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            }
            __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->pydocs, __pyx_v_temp); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L12_error;}

            /* "clda.pyx":202
 *                 self.pydocs.append(temp)
 * 
 *                 self.pydC.append(collection_id)             # <<<<<<<<<<<<<<
 *                 Dc[collection_id] += 1
 *                 self.nW += len(line)
 */
            if (unlikely(__pyx_v_self->pydC == Py_None)) {
              PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            }
            __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->pydC, __pyx_v_collection_id); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L12_error;}

            /* "clda.pyx":203
 * 
 *                 self.pydC.append(collection_id)
 *                 Dc[collection_id] += 1             # <<<<<<<<<<<<<<
 *                 self.nW += len(line)
 *                 Wc[collection_id] += len(line)
 */
            __Pyx_INCREF(__pyx_v_collection_id);
            __pyx_t_7 = __pyx_v_collection_id;
            __pyx_t_1 = PyObject_GetItem(__pyx_v_Dc, __pyx_t_7); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L12_error;};
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_Dc, __pyx_t_7, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "clda.pyx":204
 *                 self.pydC.append(collection_id)
 *                 Dc[collection_id] += 1
 *                 self.nW += len(line)             # <<<<<<<<<<<<<<
 *                 Wc[collection_id] += len(line)
 * 
 */
            __pyx_t_15 = PyObject_Length(__pyx_v_line); if (unlikely(__pyx_t_15 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __pyx_v_self->nW = (__pyx_v_self->nW + __pyx_t_15);

            /* "clda.pyx":205
 *                 Dc[collection_id] += 1
 *                 self.nW += len(line)
 *                 Wc[collection_id] += len(line)             # <<<<<<<<<<<<<<
 * 
 *         self.C = len(Dc)
 */
            __Pyx_INCREF(__pyx_v_collection_id);
            __pyx_t_7 = __pyx_v_collection_id;
            __pyx_t_3 = PyObject_GetItem(__pyx_v_Wc, __pyx_t_7); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L12_error;};
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_15 = PyObject_Length(__pyx_v_line); if (unlikely(__pyx_t_15 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_14 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(PyObject_SetItem(__pyx_v_Wc, __pyx_t_7, __pyx_t_14) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "clda.pyx":187
 * 
 *         with open(corpus_path, 'r') as f:
 *             for line in f:             # <<<<<<<<<<<<<<
 *                 line = line.strip().split()
 *                 if len(line) < MIN_DOC_LENGTH + 1:
 */
            __pyx_L20_continue:;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L19_try_end;
        __pyx_L12_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "clda.pyx":186
 *         cdef size_t i, j
 * 
 *         with open(corpus_path, 'r') as f:             # <<<<<<<<<<<<<<
 *             for line in f:
 *                 line = line.strip().split()
 */
        /*except:*/ {
          __Pyx_AddTraceback("clda.CLDA.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_1 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (__pyx_t_4 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
          __pyx_t_2 = ((!(__pyx_t_4 != 0)) != 0);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_7);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_14);
            __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_14 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L13_exception_handled;
        }
        __pyx_L14_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L13_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_L19_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L11;
      }
      __pyx_L11:;
    }
    goto __pyx_L29;
    __pyx_L8_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L29:;
  }

  /* "clda.pyx":207
 *                 Wc[collection_id] += len(line)
 * 
 *         self.C = len(Dc)             # <<<<<<<<<<<<<<
 *         self.Dc = []
 *         for c in xrange(self.C):
 */
  __pyx_t_12 = PyObject_Length(__pyx_v_Dc); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->C = __pyx_t_12;

  /* "clda.pyx":208
 * 
 *         self.C = len(Dc)
 *         self.Dc = []             # <<<<<<<<<<<<<<
 *         for c in xrange(self.C):
 *             self.Dc.append(Dc[c])
 */
  __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  __Pyx_GOTREF(__pyx_v_self->Dc);
  __Pyx_DECREF(__pyx_v_self->Dc);
  __pyx_v_self->Dc = ((PyObject*)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "clda.pyx":209
 *         self.C = len(Dc)
 *         self.Dc = []
 *         for c in xrange(self.C):             # <<<<<<<<<<<<<<
 *             self.Dc.append(Dc[c])
 *         self.D = len(self.pydC)
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
    __pyx_v_c = __pyx_t_20;

    /* "clda.pyx":210
 *         self.Dc = []
 *         for c in xrange(self.C):
 *             self.Dc.append(Dc[c])             # <<<<<<<<<<<<<<
 *         self.D = len(self.pydC)
 * 
 */
    if (unlikely(__pyx_v_self->Dc == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_Dc, __pyx_v_c, __pyx_t_10gsl_matrix_uint, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 0); if (unlikely(__pyx_t_14 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->Dc, __pyx_t_14); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }

  /* "clda.pyx":211
 *         for c in xrange(self.C):
 *             self.Dc.append(Dc[c])
 *         self.D = len(self.pydC)             # <<<<<<<<<<<<<<
 * 
 *         self.T0 = num_topics_0
 */
  __pyx_t_14 = __pyx_v_self->pydC;
  __Pyx_INCREF(__pyx_t_14);
  if (unlikely(__pyx_t_14 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_12 = PyList_GET_SIZE(__pyx_t_14); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_self->D = __pyx_t_12;

  /* "clda.pyx":213
 *         self.D = len(self.pydC)
 * 
 *         self.T0 = num_topics_0             # <<<<<<<<<<<<<<
 *         self.Tc = <uint*>self.mem.alloc(self.C, sizeof(uint))
 *         if isinstance(num_topics_c, int):
 */
  __pyx_t_19 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_topics_0); if (unlikely((__pyx_t_19 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->T0 = __pyx_t_19;

  /* "clda.pyx":214
 * 
 *         self.T0 = num_topics_0
 *         self.Tc = <uint*>self.mem.alloc(self.C, sizeof(uint))             # <<<<<<<<<<<<<<
 *         if isinstance(num_topics_c, int):
 *             num_topics_c = [num_topics_c] * self.C
 */
  __pyx_t_21 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->C, (sizeof(unsigned int))); if (unlikely(__pyx_t_21 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->Tc = ((__pyx_t_10gsl_matrix_uint *)__pyx_t_21);

  /* "clda.pyx":215
 *         self.T0 = num_topics_0
 *         self.Tc = <uint*>self.mem.alloc(self.C, sizeof(uint))
 *         if isinstance(num_topics_c, int):             # <<<<<<<<<<<<<<
 *             num_topics_c = [num_topics_c] * self.C
 *         for i, tc in enumerate(num_topics_c):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_num_topics_c); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "clda.pyx":216
 *         self.Tc = <uint*>self.mem.alloc(self.C, sizeof(uint))
 *         if isinstance(num_topics_c, int):
 *             num_topics_c = [num_topics_c] * self.C             # <<<<<<<<<<<<<<
 *         for i, tc in enumerate(num_topics_c):
 *             tc += self.T0
 */
    __pyx_t_14 = PyList_New(1 * ((__pyx_v_self->C<0) ? 0:__pyx_v_self->C)); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_self->C; __pyx_temp++) {
        __Pyx_INCREF(__pyx_v_num_topics_c);
        PyList_SET_ITEM(__pyx_t_14, __pyx_temp, __pyx_v_num_topics_c);
        __Pyx_GIVEREF(__pyx_v_num_topics_c);
      }
    }
    __Pyx_DECREF_SET(__pyx_v_num_topics_c, __pyx_t_14);
    __pyx_t_14 = 0;
    goto __pyx_L32;
  }
  __pyx_L32:;

  /* "clda.pyx":217
 *         if isinstance(num_topics_c, int):
 *             num_topics_c = [num_topics_c] * self.C
 *         for i, tc in enumerate(num_topics_c):             # <<<<<<<<<<<<<<
 *             tc += self.T0
 *             self.Tc[i] = tc
 */
  __pyx_t_22 = 0;
  if (likely(PyList_CheckExact(__pyx_v_num_topics_c)) || PyTuple_CheckExact(__pyx_v_num_topics_c)) {
    __pyx_t_14 = __pyx_v_num_topics_c; __Pyx_INCREF(__pyx_t_14); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_num_topics_c); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_14))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_13(__pyx_t_14);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_tc, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_v_i = __pyx_t_22;
    __pyx_t_22 = (__pyx_t_22 + 1);

    /* "clda.pyx":218
 *             num_topics_c = [num_topics_c] * self.C
 *         for i, tc in enumerate(num_topics_c):
 *             tc += self.T0             # <<<<<<<<<<<<<<
 *             self.Tc[i] = tc
 *         unit = np.array([1.0*Wc[i]/self.Tc[i] for i in range(self.C)])
 */
    __pyx_t_7 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_tc, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_tc, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "clda.pyx":219
 *         for i, tc in enumerate(num_topics_c):
 *             tc += self.T0
 *             self.Tc[i] = tc             # <<<<<<<<<<<<<<
 *         unit = np.array([1.0*Wc[i]/self.Tc[i] for i in range(self.C)])
 *         unit = gmean(unit) / unit
 */
    __pyx_t_19 = __Pyx_PyInt_As_unsigned_int(__pyx_v_tc); if (unlikely((__pyx_t_19 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->Tc[__pyx_v_i]) = __pyx_t_19;

    /* "clda.pyx":217
 *         if isinstance(num_topics_c, int):
 *             num_topics_c = [num_topics_c] * self.C
 *         for i, tc in enumerate(num_topics_c):             # <<<<<<<<<<<<<<
 *             tc += self.T0
 *             self.Tc[i] = tc
 */
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":220
 *             tc += self.T0
 *             self.Tc[i] = tc
 *         unit = np.array([1.0*Wc[i]/self.Tc[i] for i in range(self.C)])             # <<<<<<<<<<<<<<
 *         unit = gmean(unit) / unit
 *         #unit = np.ones(self.C)
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_Wc, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_float_1_0, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_self->Tc[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_23 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_23))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  }
  __pyx_t_23 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_23)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_23);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_23) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_23); __Pyx_GIVEREF(__pyx_t_23); __pyx_t_23 = NULL;
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_unit = __pyx_t_14;
  __pyx_t_14 = 0;

  /* "clda.pyx":221
 *             self.Tc[i] = tc
 *         unit = np.array([1.0*Wc[i]/self.Tc[i] for i in range(self.C)])
 *         unit = gmean(unit) / unit             # <<<<<<<<<<<<<<
 *         #unit = np.ones(self.C)
 *         self.unit = <double*>self.mem.alloc(self.C, sizeof(double))
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_gmean); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_unit); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_v_unit);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_unit);
    __Pyx_GIVEREF(__pyx_v_unit);
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_14, __pyx_v_unit); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF_SET(__pyx_v_unit, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "clda.pyx":223
 *         unit = gmean(unit) / unit
 *         #unit = np.ones(self.C)
 *         self.unit = <double*>self.mem.alloc(self.C, sizeof(double))             # <<<<<<<<<<<<<<
 *         for i in range(self.C):
 *             self.unit[i] = unit[i]
 */
  __pyx_t_21 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->C, (sizeof(double))); if (unlikely(__pyx_t_21 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->unit = ((double *)__pyx_t_21);

  /* "clda.pyx":224
 *         #unit = np.ones(self.C)
 *         self.unit = <double*>self.mem.alloc(self.C, sizeof(double))
 *         for i in range(self.C):             # <<<<<<<<<<<<<<
 *             self.unit[i] = unit[i]
 * 
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":225
 *         self.unit = <double*>self.mem.alloc(self.C, sizeof(double))
 *         for i in range(self.C):
 *             self.unit[i] = unit[i]             # <<<<<<<<<<<<<<
 * 
 *         if test_path:
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_unit, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    (__pyx_v_self->unit[__pyx_v_i]) = __pyx_t_24;
  }

  /* "clda.pyx":227
 *             self.unit[i] = unit[i]
 * 
 *         if test_path:             # <<<<<<<<<<<<<<
 *             self.test = True
 *             if eval_interval > 0:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_test_path); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "clda.pyx":228
 * 
 *         if test_path:
 *             self.test = True             # <<<<<<<<<<<<<<
 *             if eval_interval > 0:
 *                 self.test_out = fopen(prefix + '.evaluate', 'w')
 */
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    __Pyx_GOTREF(__pyx_v_self->test);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->test));
    __pyx_v_self->test = ((PyBoolObject *)Py_True);

    /* "clda.pyx":229
 *         if test_path:
 *             self.test = True
 *             if eval_interval > 0:             # <<<<<<<<<<<<<<
 *                 self.test_out = fopen(prefix + '.evaluate', 'w')
 *             self.t_pydC = []
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_eval_interval, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {

      /* "clda.pyx":230
 *             self.test = True
 *             if eval_interval > 0:
 *                 self.test_out = fopen(prefix + '.evaluate', 'w')             # <<<<<<<<<<<<<<
 *             self.t_pydC = []
 *             self.t_pydocs = []
 */
      __pyx_t_7 = PyNumber_Add(__pyx_v_prefix, __pyx_kp_s_evaluate); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_25 = __Pyx_PyObject_AsString(__pyx_t_7); if (unlikely((!__pyx_t_25) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->test_out = fopen(__pyx_t_25, __pyx_k_w);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L40;
    }
    __pyx_L40:;

    /* "clda.pyx":231
 *             if eval_interval > 0:
 *                 self.test_out = fopen(prefix + '.evaluate', 'w')
 *             self.t_pydC = []             # <<<<<<<<<<<<<<
 *             self.t_pydocs = []
 *             with open(test_path, 'r') as f:
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->t_pydC);
    __Pyx_DECREF(__pyx_v_self->t_pydC);
    __pyx_v_self->t_pydC = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "clda.pyx":232
 *                 self.test_out = fopen(prefix + '.evaluate', 'w')
 *             self.t_pydC = []
 *             self.t_pydocs = []             # <<<<<<<<<<<<<<
 *             with open(test_path, 'r') as f:
 *                 for line in f:
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_v_self->t_pydocs);
    __Pyx_DECREF(__pyx_v_self->t_pydocs);
    __pyx_v_self->t_pydocs = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "clda.pyx":233
 *             self.t_pydC = []
 *             self.t_pydocs = []
 *             with open(test_path, 'r') as f:             # <<<<<<<<<<<<<<
 *                 for line in f:
 *                     line = line.strip().split()
 */
    /*with:*/ {
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_test_path);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_test_path);
      __Pyx_GIVEREF(__pyx_v_test_path);
      __Pyx_INCREF(__pyx_n_s_r);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_r);
      __Pyx_GIVEREF(__pyx_n_s_r);
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_7, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_14, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_14, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L41_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_1) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L41_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L41_error;}
      }
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      /*try:*/ {
        {
          __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_9);
          /*try:*/ {
            __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_6);
            __pyx_t_6 = 0;

            /* "clda.pyx":234
 *             self.t_pydocs = []
 *             with open(test_path, 'r') as f:
 *                 for line in f:             # <<<<<<<<<<<<<<
 *                     line = line.strip().split()
 *                     collection_id = int(line[0])
 */
            if (likely(PyList_CheckExact(__pyx_v_f)) || PyTuple_CheckExact(__pyx_v_f)) {
              __pyx_t_6 = __pyx_v_f; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
              __pyx_t_13 = NULL;
            } else {
              __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_f); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
            }
            for (;;) {
              if (likely(!__pyx_t_13)) {
                if (likely(PyList_CheckExact(__pyx_t_6))) {
                  if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_14 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  #else
                  __pyx_t_14 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  #endif
                } else {
                  if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  #else
                  __pyx_t_14 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  #endif
                }
              } else {
                __pyx_t_14 = __pyx_t_13(__pyx_t_6);
                if (unlikely(!__pyx_t_14)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_14);
              }
              __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_14);
              __pyx_t_14 = 0;

              /* "clda.pyx":235
 *             with open(test_path, 'r') as f:
 *                 for line in f:
 *                     line = line.strip().split()             # <<<<<<<<<<<<<<
 *                     collection_id = int(line[0])
 *                     line = line[1:]
 */
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_23 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_23)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_23);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                }
              }
              if (__pyx_t_23) {
                __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_23); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              } else {
                __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              }
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_7 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                }
              }
              if (__pyx_t_7) {
                __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else {
                __pyx_t_14 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              }
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_14);
              __pyx_t_14 = 0;

              /* "clda.pyx":236
 *                 for line in f:
 *                     line = line.strip().split()
 *                     collection_id = int(line[0])             # <<<<<<<<<<<<<<
 *                     line = line[1:]
 *                     self.t_pydC.append(collection_id)
 */
              __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_line, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_14 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L45_error;};
              __Pyx_GOTREF(__pyx_t_14);
              __pyx_t_1 = PyNumber_Int(__pyx_t_14); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF_SET(__pyx_v_collection_id, __pyx_t_1);
              __pyx_t_1 = 0;

              /* "clda.pyx":237
 *                     line = line.strip().split()
 *                     collection_id = int(line[0])
 *                     line = line[1:]             # <<<<<<<<<<<<<<
 *                     self.t_pydC.append(collection_id)
 *                     self.t_pydocs.append([self.word2id[w] for w in line if w in self.word2id])
 */
              __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_line, 1, 0, NULL, NULL, &__pyx_slice__5, 1, 0, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_1);
              __pyx_t_1 = 0;

              /* "clda.pyx":238
 *                     collection_id = int(line[0])
 *                     line = line[1:]
 *                     self.t_pydC.append(collection_id)             # <<<<<<<<<<<<<<
 *                     self.t_pydocs.append([self.word2id[w] for w in line if w in self.word2id])
 *                     # assume at least one doc of each collection will show up in training data
 */
              if (unlikely(__pyx_v_self->t_pydC == Py_None)) {
                PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              }
              __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->t_pydC, __pyx_v_collection_id); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L45_error;}

              /* "clda.pyx":239
 *                     line = line[1:]
 *                     self.t_pydC.append(collection_id)
 *                     self.t_pydocs.append([self.word2id[w] for w in line if w in self.word2id])             # <<<<<<<<<<<<<<
 *                     # assume at least one doc of each collection will show up in training data
 *             self.t_D = len(self.t_pydC)
 */
              if (unlikely(__pyx_v_self->t_pydocs == Py_None)) {
                PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              }
              __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_GOTREF(__pyx_t_1);
              if (likely(PyList_CheckExact(__pyx_v_line)) || PyTuple_CheckExact(__pyx_v_line)) {
                __pyx_t_14 = __pyx_v_line; __Pyx_INCREF(__pyx_t_14); __pyx_t_15 = 0;
                __pyx_t_16 = NULL;
              } else {
                __pyx_t_15 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_line); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_16 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              }
              for (;;) {
                if (likely(!__pyx_t_16)) {
                  if (likely(PyList_CheckExact(__pyx_t_14))) {
                    if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_COMPILING_IN_CPYTHON
                    __pyx_t_7 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_15); __Pyx_INCREF(__pyx_t_7); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                    #else
                    __pyx_t_7 = PySequence_ITEM(__pyx_t_14, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                    #endif
                  } else {
                    if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_COMPILING_IN_CPYTHON
                    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_15); __Pyx_INCREF(__pyx_t_7); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                    #else
                    __pyx_t_7 = PySequence_ITEM(__pyx_t_14, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                    #endif
                  }
                } else {
                  __pyx_t_7 = __pyx_t_16(__pyx_t_14);
                  if (unlikely(!__pyx_t_7)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_7);
                }
                __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_7);
                __pyx_t_7 = 0;
                if (unlikely(__pyx_v_self->word2id == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
                  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                }
                __pyx_t_4 = (__Pyx_PyDict_Contains(__pyx_v_w, __pyx_v_self->word2id, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                __pyx_t_2 = (__pyx_t_4 != 0);
                if (__pyx_t_2) {
                  if (unlikely(__pyx_v_self->word2id == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  }
                  __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_self->word2id, __pyx_v_w); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;};
                  __Pyx_GOTREF(__pyx_t_7);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  goto __pyx_L57;
                }
                __pyx_L57:;
              }
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_self->t_pydocs, __pyx_t_1); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L45_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "clda.pyx":234
 *             self.t_pydocs = []
 *             with open(test_path, 'r') as f:
 *                 for line in f:             # <<<<<<<<<<<<<<
 *                     line = line.strip().split()
 *                     collection_id = int(line[0])
 */
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L52_try_end;
          __pyx_L45_error:;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "clda.pyx":233
 *             self.t_pydC = []
 *             self.t_pydocs = []
 *             with open(test_path, 'r') as f:             # <<<<<<<<<<<<<<
 *                 for line in f:
 *                     line = line.strip().split()
 */
          /*except:*/ {
            __Pyx_AddTraceback("clda.CLDA.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_1, &__pyx_t_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L47_except_error;}
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_7 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_1, __pyx_t_14); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L47_except_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L47_except_error;}
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_2 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L47_except_error;}
            __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_6);
              __Pyx_GIVEREF(__pyx_t_1);
              __Pyx_XGIVEREF(__pyx_t_14);
              __Pyx_ErrRestore(__pyx_t_6, __pyx_t_1, __pyx_t_14);
              __pyx_t_6 = 0; __pyx_t_1 = 0; __pyx_t_14 = 0; 
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L47_except_error;}
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            goto __pyx_L46_exception_handled;
          }
          __pyx_L47_except_error:;
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          goto __pyx_L1_error;
          __pyx_L46_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          __pyx_L52_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          goto __pyx_L44;
        }
        __pyx_L44:;
      }
      goto __pyx_L61;
      __pyx_L41_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L61:;
    }

    /* "clda.pyx":241
 *                     self.t_pydocs.append([self.word2id[w] for w in line if w in self.word2id])
 *                     # assume at least one doc of each collection will show up in training data
 *             self.t_D = len(self.t_pydC)             # <<<<<<<<<<<<<<
 * 
 *         logger.info("Total docs: %d" % (self.D))
 */
    __pyx_t_14 = __pyx_v_self->t_pydC;
    __Pyx_INCREF(__pyx_t_14);
    if (unlikely(__pyx_t_14 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_12 = PyList_GET_SIZE(__pyx_t_14); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_self->t_D = __pyx_t_12;
    goto __pyx_L39;
  }
  __pyx_L39:;

  /* "clda.pyx":243
 *             self.t_D = len(self.t_pydC)
 * 
 *         logger.info("Total docs: %d" % (self.D))             # <<<<<<<<<<<<<<
 *         logger.info("# of collections: %d" % (self.C))
 *         logger.info("# of vocab words: %d" % (self.V))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->D); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Total_docs_d, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_23 = PyTuple_New(1+1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    PyTuple_SET_ITEM(__pyx_t_23, 0+1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_23, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":244
 * 
 *         logger.info("Total docs: %d" % (self.D))
 *         logger.info("# of collections: %d" % (self.C))             # <<<<<<<<<<<<<<
 *         logger.info("# of vocab words: %d" % (self.V))
 *         logger.info("# of terms: %d" % (self.nW))
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->C); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_of_collections_d, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_23))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_23);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_23, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":245
 *         logger.info("Total docs: %d" % (self.D))
 *         logger.info("# of collections: %d" % (self.C))
 *         logger.info("# of vocab words: %d" % (self.V))             # <<<<<<<<<<<<<<
 *         logger.info("# of terms: %d" % (self.nW))
 *         logger.info("# of shared topics: %d" % (self.T0))
 */
  __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->V); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_of_vocab_words_d, __pyx_t_23); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_23)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_23);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_23) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_23); __Pyx_GIVEREF(__pyx_t_23); __pyx_t_23 = NULL;
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":246
 *         logger.info("# of collections: %d" % (self.C))
 *         logger.info("# of vocab words: %d" % (self.V))
 *         logger.info("# of terms: %d" % (self.nW))             # <<<<<<<<<<<<<<
 *         logger.info("# of shared topics: %d" % (self.T0))
 *         logger.info("# of isolated topics: %s" % (', '.join([str(x) for x in num_topics_c])))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->nW); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_of_terms_d, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_23 = PyTuple_New(1+1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    PyTuple_SET_ITEM(__pyx_t_23, 0+1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_23, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":247
 *         logger.info("# of vocab words: %d" % (self.V))
 *         logger.info("# of terms: %d" % (self.nW))
 *         logger.info("# of shared topics: %d" % (self.T0))             # <<<<<<<<<<<<<<
 *         logger.info("# of isolated topics: %s" % (', '.join([str(x) for x in num_topics_c])))
 *         for i in xrange(self.C):
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_of_shared_topics_d, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_23))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_23);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_23, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":248
 *         logger.info("# of terms: %d" % (self.nW))
 *         logger.info("# of shared topics: %d" % (self.T0))
 *         logger.info("# of isolated topics: %s" % (', '.join([str(x) for x in num_topics_c])))             # <<<<<<<<<<<<<<
 *         for i in xrange(self.C):
 *             logger.info("Collection %d: %d" % (i, Dc[i]))
 */
  __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyList_New(0); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  if (likely(PyList_CheckExact(__pyx_v_num_topics_c)) || PyTuple_CheckExact(__pyx_v_num_topics_c)) {
    __pyx_t_7 = __pyx_v_num_topics_c; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_num_topics_c); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_6); __pyx_t_12++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_13(__pyx_t_7);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_23, (PyObject*)__pyx_t_3))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__7, __pyx_t_23); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyString_Format(__pyx_kp_s_of_isolated_topics_s, __pyx_t_7); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_23); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_23);
    __Pyx_GIVEREF(__pyx_t_23);
    __pyx_t_23 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":249
 *         logger.info("# of shared topics: %d" % (self.T0))
 *         logger.info("# of isolated topics: %s" % (', '.join([str(x) for x in num_topics_c])))
 *         for i in xrange(self.C):             # <<<<<<<<<<<<<<
 *             logger.info("Collection %d: %d" % (i, Dc[i]))
 *         logger.info("Running with %d threads" % n_worker)
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":250
 *         logger.info("# of isolated topics: %s" % (', '.join([str(x) for x in num_topics_c])))
 *         for i in xrange(self.C):
 *             logger.info("Collection %d: %d" % (i, Dc[i]))             # <<<<<<<<<<<<<<
 *         logger.info("Running with %d threads" % n_worker)
 *         if self.test:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_23 = __Pyx_GetItemInt(__pyx_v_Dc, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_23 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_23);
    __Pyx_GIVEREF(__pyx_t_23);
    __pyx_t_1 = 0;
    __pyx_t_23 = 0;
    __pyx_t_23 = __Pyx_PyString_Format(__pyx_kp_s_Collection_d_d, __pyx_t_7); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_23); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_GOTREF(__pyx_t_14);
    } else {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_23);
      __pyx_t_23 = 0;
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }

  /* "clda.pyx":251
 *         for i in xrange(self.C):
 *             logger.info("Collection %d: %d" % (i, Dc[i]))
 *         logger.info("Running with %d threads" % n_worker)             # <<<<<<<<<<<<<<
 *         if self.test:
 *             logger.info("Test docs: %d" % (self.t_D))
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Running_with_d_threads, __pyx_v_n_worker); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_23 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_23)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_23);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_23) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_14);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_23); __Pyx_GIVEREF(__pyx_t_23); __pyx_t_23 = NULL;
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "clda.pyx":252
 *             logger.info("Collection %d: %d" % (i, Dc[i]))
 *         logger.info("Running with %d threads" % n_worker)
 *         if self.test:             # <<<<<<<<<<<<<<
 *             logger.info("Test docs: %d" % (self.t_D))
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->test)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "clda.pyx":253
 *         logger.info("Running with %d threads" % n_worker)
 *         if self.test:
 *             logger.info("Test docs: %d" % (self.t_D))             # <<<<<<<<<<<<<<
 * 
 *         self.prefix = prefix
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t_D); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Test_docs_d, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_14);
    } else {
      __pyx_t_23 = PyTuple_New(1+1); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
      PyTuple_SET_ITEM(__pyx_t_23, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_23, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    goto __pyx_L66;
  }
  __pyx_L66:;

  /* "clda.pyx":255
 *             logger.info("Test docs: %d" % (self.t_D))
 * 
 *         self.prefix = prefix             # <<<<<<<<<<<<<<
 *         self.deltaNorm = 0
 *         for i in range(2):
 */
  if (!(likely(PyString_CheckExact(__pyx_v_prefix))||((__pyx_v_prefix) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_prefix)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = __pyx_v_prefix;
  __Pyx_INCREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  __Pyx_GOTREF(__pyx_v_self->prefix);
  __Pyx_DECREF(__pyx_v_self->prefix);
  __pyx_v_self->prefix = ((PyObject*)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "clda.pyx":256
 * 
 *         self.prefix = prefix
 *         self.deltaNorm = 0             # <<<<<<<<<<<<<<
 *         for i in range(2):
 *             self.delta[i] = delta[i]
 */
  __pyx_v_self->deltaNorm = 0.0;

  /* "clda.pyx":257
 *         self.prefix = prefix
 *         self.deltaNorm = 0
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             self.delta[i] = delta[i]
 *             self.deltaNorm += delta[i]
 */
  for (__pyx_t_22 = 0; __pyx_t_22 < 2; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":258
 *         self.deltaNorm = 0
 *         for i in range(2):
 *             self.delta[i] = delta[i]             # <<<<<<<<<<<<<<
 *             self.deltaNorm += delta[i]
 *         self.alpha = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 */
    __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_delta, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_14 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_14); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    (__pyx_v_self->delta[__pyx_v_i]) = __pyx_t_24;

    /* "clda.pyx":259
 *         for i in range(2):
 *             self.delta[i] = delta[i]
 *             self.deltaNorm += delta[i]             # <<<<<<<<<<<<<<
 *         self.alpha = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for c in xrange(self.C):
 */
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->deltaNorm); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_delta, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_23 = PyNumber_InPlaceAdd(__pyx_t_14, __pyx_t_7); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_23); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_v_self->deltaNorm = __pyx_t_24;
  }

  /* "clda.pyx":260
 *             self.delta[i] = delta[i]
 *             self.deltaNorm += delta[i]
 *         self.alpha = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))             # <<<<<<<<<<<<<<
 *         for c in xrange(self.C):
 *             self.alpha[c] = gsl_vector_alloc(self.Tc[c])
 */
  __pyx_v_self->alpha = ((gsl_vector **)PyMem_Malloc((__pyx_v_self->C * (sizeof(gsl_vector *)))));

  /* "clda.pyx":261
 *             self.deltaNorm += delta[i]
 *         self.alpha = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for c in xrange(self.C):             # <<<<<<<<<<<<<<
 *             self.alpha[c] = gsl_vector_alloc(self.Tc[c])
 *             gsl_vector_set_all(self.alpha[c], 1.0 * alpha / self.Tc[c])
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
    __pyx_v_c = __pyx_t_20;

    /* "clda.pyx":262
 *         self.alpha = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for c in xrange(self.C):
 *             self.alpha[c] = gsl_vector_alloc(self.Tc[c])             # <<<<<<<<<<<<<<
 *             gsl_vector_set_all(self.alpha[c], 1.0 * alpha / self.Tc[c])
 *         self.beta = beta
 */
    (__pyx_v_self->alpha[__pyx_v_c]) = gsl_vector_alloc((__pyx_v_self->Tc[__pyx_v_c]));

    /* "clda.pyx":263
 *         for c in xrange(self.C):
 *             self.alpha[c] = gsl_vector_alloc(self.Tc[c])
 *             gsl_vector_set_all(self.alpha[c], 1.0 * alpha / self.Tc[c])             # <<<<<<<<<<<<<<
 *         self.beta = beta
 *         self.n_iter = n_iter
 */
    __pyx_t_23 = PyNumber_Multiply(__pyx_float_1_0, __pyx_v_alpha); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_7 = __Pyx_PyInt_From_unsigned_int((__pyx_v_self->Tc[__pyx_v_c])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_PyNumber_Divide(__pyx_t_23, __pyx_t_7); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_14); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    gsl_vector_set_all((__pyx_v_self->alpha[__pyx_v_c]), __pyx_t_24);
  }

  /* "clda.pyx":264
 *             self.alpha[c] = gsl_vector_alloc(self.Tc[c])
 *             gsl_vector_set_all(self.alpha[c], 1.0 * alpha / self.Tc[c])
 *         self.beta = beta             # <<<<<<<<<<<<<<
 *         self.n_iter = n_iter
 *         self.betaNorm = beta * self.V
 */
  __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_v_beta); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->beta = __pyx_t_24;

  /* "clda.pyx":265
 *             gsl_vector_set_all(self.alpha[c], 1.0 * alpha / self.Tc[c])
 *         self.beta = beta
 *         self.n_iter = n_iter             # <<<<<<<<<<<<<<
 *         self.betaNorm = beta * self.V
 *         self.save_interval = save_interval
 */
  __pyx_t_19 = __Pyx_PyInt_As_unsigned_int(__pyx_v_n_iter); if (unlikely((__pyx_t_19 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->n_iter = __pyx_t_19;

  /* "clda.pyx":266
 *         self.beta = beta
 *         self.n_iter = n_iter
 *         self.betaNorm = beta * self.V             # <<<<<<<<<<<<<<
 *         self.save_interval = save_interval
 *         self.eval_interval = eval_interval
 */
  __pyx_t_14 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->V); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_beta, __pyx_t_14); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_24 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_24 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_self->betaNorm = __pyx_t_24;

  /* "clda.pyx":267
 *         self.n_iter = n_iter
 *         self.betaNorm = beta * self.V
 *         self.save_interval = save_interval             # <<<<<<<<<<<<<<
 *         self.eval_interval = eval_interval
 *         self.burn_in = burn_in
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_save_interval); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->save_interval = __pyx_t_5;

  /* "clda.pyx":268
 *         self.betaNorm = beta * self.V
 *         self.save_interval = save_interval
 *         self.eval_interval = eval_interval             # <<<<<<<<<<<<<<
 *         self.burn_in = burn_in
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_eval_interval); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->eval_interval = __pyx_t_5;

  /* "clda.pyx":269
 *         self.save_interval = save_interval
 *         self.eval_interval = eval_interval
 *         self.burn_in = burn_in             # <<<<<<<<<<<<<<
 * 
 *         logger.info("Allocating memory...")
 */
  __pyx_t_19 = __Pyx_PyInt_As_unsigned_int(__pyx_v_burn_in); if (unlikely((__pyx_t_19 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->burn_in = __pyx_t_19;

  /* "clda.pyx":271
 *         self.burn_in = burn_in
 * 
 *         logger.info("Allocating memory...")             # <<<<<<<<<<<<<<
 * 
 *         self.n0Z = gsl_vector_alloc(self.T0)
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "clda.pyx":273
 *         logger.info("Allocating memory...")
 * 
 *         self.n0Z = gsl_vector_alloc(self.T0)             # <<<<<<<<<<<<<<
 *         gsl_vector_set_all(self.n0Z, self.betaNorm)
 *         self.nZ = gsl_vector_alloc(self.T0)
 */
  __pyx_v_self->n0Z = gsl_vector_alloc(__pyx_v_self->T0);

  /* "clda.pyx":274
 * 
 *         self.n0Z = gsl_vector_alloc(self.T0)
 *         gsl_vector_set_all(self.n0Z, self.betaNorm)             # <<<<<<<<<<<<<<
 *         self.nZ = gsl_vector_alloc(self.T0)
 *         gsl_vector_set_all(self.nZ, self.deltaNorm)
 */
  gsl_vector_set_all(__pyx_v_self->n0Z, __pyx_v_self->betaNorm);

  /* "clda.pyx":275
 *         self.n0Z = gsl_vector_alloc(self.T0)
 *         gsl_vector_set_all(self.n0Z, self.betaNorm)
 *         self.nZ = gsl_vector_alloc(self.T0)             # <<<<<<<<<<<<<<
 *         gsl_vector_set_all(self.nZ, self.deltaNorm)
 *         self.nYZ = alloc_2d_gsl_matrix(2, self.T0, 0)
 */
  __pyx_v_self->nZ = gsl_vector_alloc(__pyx_v_self->T0);

  /* "clda.pyx":276
 *         gsl_vector_set_all(self.n0Z, self.betaNorm)
 *         self.nZ = gsl_vector_alloc(self.T0)
 *         gsl_vector_set_all(self.nZ, self.deltaNorm)             # <<<<<<<<<<<<<<
 *         self.nYZ = alloc_2d_gsl_matrix(2, self.T0, 0)
 *         gsl_vector_set_all(self.nYZ[0], self.delta[0])
 */
  gsl_vector_set_all(__pyx_v_self->nZ, __pyx_v_self->deltaNorm);

  /* "clda.pyx":277
 *         self.nZ = gsl_vector_alloc(self.T0)
 *         gsl_vector_set_all(self.nZ, self.deltaNorm)
 *         self.nYZ = alloc_2d_gsl_matrix(2, self.T0, 0)             # <<<<<<<<<<<<<<
 *         gsl_vector_set_all(self.nYZ[0], self.delta[0])
 *         gsl_vector_set_all(self.nYZ[1], self.delta[1])
 */
  __pyx_v_self->nYZ = __pyx_f_10gsl_matrix_alloc_2d_gsl_matrix(2, __pyx_v_self->T0, 0.0);

  /* "clda.pyx":278
 *         gsl_vector_set_all(self.nZ, self.deltaNorm)
 *         self.nYZ = alloc_2d_gsl_matrix(2, self.T0, 0)
 *         gsl_vector_set_all(self.nYZ[0], self.delta[0])             # <<<<<<<<<<<<<<
 *         gsl_vector_set_all(self.nYZ[1], self.delta[1])
 *         self.n1CZ = alloc_2d_gsl_matrix(self.C, self.T0, self.betaNorm)
 */
  gsl_vector_set_all((__pyx_v_self->nYZ[0]), (__pyx_v_self->delta[0]));

  /* "clda.pyx":279
 *         self.nYZ = alloc_2d_gsl_matrix(2, self.T0, 0)
 *         gsl_vector_set_all(self.nYZ[0], self.delta[0])
 *         gsl_vector_set_all(self.nYZ[1], self.delta[1])             # <<<<<<<<<<<<<<
 *         self.n1CZ = alloc_2d_gsl_matrix(self.C, self.T0, self.betaNorm)
 *         self.n0WZ = alloc_2d_gsl_matrix(self.V, self.T0, self.beta)
 */
  gsl_vector_set_all((__pyx_v_self->nYZ[1]), (__pyx_v_self->delta[1]));

  /* "clda.pyx":280
 *         gsl_vector_set_all(self.nYZ[0], self.delta[0])
 *         gsl_vector_set_all(self.nYZ[1], self.delta[1])
 *         self.n1CZ = alloc_2d_gsl_matrix(self.C, self.T0, self.betaNorm)             # <<<<<<<<<<<<<<
 *         self.n0WZ = alloc_2d_gsl_matrix(self.V, self.T0, self.beta)
 *         self.n1CWZ = alloc_3d_gsl_matrix(self.C, self.V, self.T0, self.beta)
 */
  __pyx_v_self->n1CZ = __pyx_f_10gsl_matrix_alloc_2d_gsl_matrix(__pyx_v_self->C, __pyx_v_self->T0, __pyx_v_self->betaNorm);

  /* "clda.pyx":281
 *         gsl_vector_set_all(self.nYZ[1], self.delta[1])
 *         self.n1CZ = alloc_2d_gsl_matrix(self.C, self.T0, self.betaNorm)
 *         self.n0WZ = alloc_2d_gsl_matrix(self.V, self.T0, self.beta)             # <<<<<<<<<<<<<<
 *         self.n1CWZ = alloc_3d_gsl_matrix(self.C, self.V, self.T0, self.beta)
 * 
 */
  __pyx_v_self->n0WZ = __pyx_f_10gsl_matrix_alloc_2d_gsl_matrix(__pyx_v_self->V, __pyx_v_self->T0, __pyx_v_self->beta);

  /* "clda.pyx":282
 *         self.n1CZ = alloc_2d_gsl_matrix(self.C, self.T0, self.betaNorm)
 *         self.n0WZ = alloc_2d_gsl_matrix(self.V, self.T0, self.beta)
 *         self.n1CWZ = alloc_3d_gsl_matrix(self.C, self.V, self.T0, self.beta)             # <<<<<<<<<<<<<<
 * 
 *         self.nCZ = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 */
  __pyx_v_self->n1CWZ = __pyx_f_10gsl_matrix_alloc_3d_gsl_matrix(__pyx_v_self->C, __pyx_v_self->V, __pyx_v_self->T0, __pyx_v_self->beta);

  /* "clda.pyx":284
 *         self.n1CWZ = alloc_3d_gsl_matrix(self.C, self.V, self.T0, self.beta)
 * 
 *         self.nCZ = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))             # <<<<<<<<<<<<<<
 *         for i in range(self.C):
 *             if self.Tc[i] - self.T0 <= 0:
 */
  __pyx_v_self->nCZ = ((gsl_vector **)PyMem_Malloc((__pyx_v_self->C * (sizeof(gsl_vector *)))));

  /* "clda.pyx":285
 * 
 *         self.nCZ = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for i in range(self.C):             # <<<<<<<<<<<<<<
 *             if self.Tc[i] - self.T0 <= 0:
 *                 continue
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":286
 *         self.nCZ = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for i in range(self.C):
 *             if self.Tc[i] - self.T0 <= 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             self.nCZ[i] = gsl_vector_alloc(self.Tc[i] - self.T0)
 */
    __pyx_t_4 = ((((__pyx_v_self->Tc[__pyx_v_i]) - __pyx_v_self->T0) <= 0) != 0);
    if (__pyx_t_4) {

      /* "clda.pyx":287
 *         for i in range(self.C):
 *             if self.Tc[i] - self.T0 <= 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             self.nCZ[i] = gsl_vector_alloc(self.Tc[i] - self.T0)
 *             gsl_vector_set_all(self.nCZ[i], self.betaNorm)
 */
      goto __pyx_L71_continue;
    }

    /* "clda.pyx":288
 *             if self.Tc[i] - self.T0 <= 0:
 *                 continue
 *             self.nCZ[i] = gsl_vector_alloc(self.Tc[i] - self.T0)             # <<<<<<<<<<<<<<
 *             gsl_vector_set_all(self.nCZ[i], self.betaNorm)
 * 
 */
    (__pyx_v_self->nCZ[__pyx_v_i]) = gsl_vector_alloc(((__pyx_v_self->Tc[__pyx_v_i]) - __pyx_v_self->T0));

    /* "clda.pyx":289
 *                 continue
 *             self.nCZ[i] = gsl_vector_alloc(self.Tc[i] - self.T0)
 *             gsl_vector_set_all(self.nCZ[i], self.betaNorm)             # <<<<<<<<<<<<<<
 * 
 *         self.nCWZ = <gsl_vector***>PyMem_Malloc(self.C * sizeof(gsl_vector**))
 */
    gsl_vector_set_all((__pyx_v_self->nCZ[__pyx_v_i]), __pyx_v_self->betaNorm);
    __pyx_L71_continue:;
  }

  /* "clda.pyx":291
 *             gsl_vector_set_all(self.nCZ[i], self.betaNorm)
 * 
 *         self.nCWZ = <gsl_vector***>PyMem_Malloc(self.C * sizeof(gsl_vector**))             # <<<<<<<<<<<<<<
 *         for i in range(self.C):
 *             self.nCWZ[i] = <gsl_vector**>PyMem_Malloc(self.V * sizeof(gsl_vector*))
 */
  __pyx_v_self->nCWZ = ((gsl_vector ***)PyMem_Malloc((__pyx_v_self->C * (sizeof(gsl_vector **)))));

  /* "clda.pyx":292
 * 
 *         self.nCWZ = <gsl_vector***>PyMem_Malloc(self.C * sizeof(gsl_vector**))
 *         for i in range(self.C):             # <<<<<<<<<<<<<<
 *             self.nCWZ[i] = <gsl_vector**>PyMem_Malloc(self.V * sizeof(gsl_vector*))
 *             if self.Tc[i] - self.T0 <= 0:
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":293
 *         self.nCWZ = <gsl_vector***>PyMem_Malloc(self.C * sizeof(gsl_vector**))
 *         for i in range(self.C):
 *             self.nCWZ[i] = <gsl_vector**>PyMem_Malloc(self.V * sizeof(gsl_vector*))             # <<<<<<<<<<<<<<
 *             if self.Tc[i] - self.T0 <= 0:
 *                 continue
 */
    (__pyx_v_self->nCWZ[__pyx_v_i]) = ((gsl_vector **)PyMem_Malloc((__pyx_v_self->V * (sizeof(gsl_vector *)))));

    /* "clda.pyx":294
 *         for i in range(self.C):
 *             self.nCWZ[i] = <gsl_vector**>PyMem_Malloc(self.V * sizeof(gsl_vector*))
 *             if self.Tc[i] - self.T0 <= 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             for j in range(self.V):
 */
    __pyx_t_4 = ((((__pyx_v_self->Tc[__pyx_v_i]) - __pyx_v_self->T0) <= 0) != 0);
    if (__pyx_t_4) {

      /* "clda.pyx":295
 *             self.nCWZ[i] = <gsl_vector**>PyMem_Malloc(self.V * sizeof(gsl_vector*))
 *             if self.Tc[i] - self.T0 <= 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             for j in range(self.V):
 *                 self.nCWZ[i][j] = gsl_vector_alloc(self.Tc[i] - self.T0)
 */
      goto __pyx_L74_continue;
    }

    /* "clda.pyx":296
 *             if self.Tc[i] - self.T0 <= 0:
 *                 continue
 *             for j in range(self.V):             # <<<<<<<<<<<<<<
 *                 self.nCWZ[i][j] = gsl_vector_alloc(self.Tc[i] - self.T0)
 *                 gsl_vector_set_all(self.nCWZ[i][j], self.beta)
 */
    __pyx_t_20 = __pyx_v_self->V;
    for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_20; __pyx_t_26+=1) {
      __pyx_v_j = __pyx_t_26;

      /* "clda.pyx":297
 *                 continue
 *             for j in range(self.V):
 *                 self.nCWZ[i][j] = gsl_vector_alloc(self.Tc[i] - self.T0)             # <<<<<<<<<<<<<<
 *                 gsl_vector_set_all(self.nCWZ[i][j], self.beta)
 * 
 */
      ((__pyx_v_self->nCWZ[__pyx_v_i])[__pyx_v_j]) = gsl_vector_alloc(((__pyx_v_self->Tc[__pyx_v_i]) - __pyx_v_self->T0));

      /* "clda.pyx":298
 *             for j in range(self.V):
 *                 self.nCWZ[i][j] = gsl_vector_alloc(self.Tc[i] - self.T0)
 *                 gsl_vector_set_all(self.nCWZ[i][j], self.beta)             # <<<<<<<<<<<<<<
 * 
 *         self.nDZ = <gsl_vector**>PyMem_Malloc(self.D * sizeof(gsl_vector*))
 */
      gsl_vector_set_all(((__pyx_v_self->nCWZ[__pyx_v_i])[__pyx_v_j]), __pyx_v_self->beta);
    }
    __pyx_L74_continue:;
  }

  /* "clda.pyx":300
 *                 gsl_vector_set_all(self.nCWZ[i][j], self.beta)
 * 
 *         self.nDZ = <gsl_vector**>PyMem_Malloc(self.D * sizeof(gsl_vector*))             # <<<<<<<<<<<<<<
 *         for i in range(self.D):
 *             self.nDZ[i] = gsl_vector_alloc(self.Tc[self.pydC[i]])
 */
  __pyx_v_self->nDZ = ((gsl_vector **)PyMem_Malloc((__pyx_v_self->D * (sizeof(gsl_vector *)))));

  /* "clda.pyx":301
 * 
 *         self.nDZ = <gsl_vector**>PyMem_Malloc(self.D * sizeof(gsl_vector*))
 *         for i in range(self.D):             # <<<<<<<<<<<<<<
 *             self.nDZ[i] = gsl_vector_alloc(self.Tc[self.pydC[i]])
 *             gsl_vector_set_all(self.nDZ[i], 0)
 */
  __pyx_t_19 = __pyx_v_self->D;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":302
 *         self.nDZ = <gsl_vector**>PyMem_Malloc(self.D * sizeof(gsl_vector*))
 *         for i in range(self.D):
 *             self.nDZ[i] = gsl_vector_alloc(self.Tc[self.pydC[i]])             # <<<<<<<<<<<<<<
 *             gsl_vector_set_all(self.nDZ[i], 0)
 * 
 */
    if (unlikely(__pyx_v_self->pydC == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(PyList_GET_ITEM(__pyx_v_self->pydC, __pyx_v_i)); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->nDZ[__pyx_v_i]) = gsl_vector_alloc((__pyx_v_self->Tc[__pyx_t_12]));

    /* "clda.pyx":303
 *         for i in range(self.D):
 *             self.nDZ[i] = gsl_vector_alloc(self.Tc[self.pydC[i]])
 *             gsl_vector_set_all(self.nDZ[i], 0)             # <<<<<<<<<<<<<<
 * 
 *         gsl_rng_env_setup()
 */
    gsl_vector_set_all((__pyx_v_self->nDZ[__pyx_v_i]), 0.0);
  }

  /* "clda.pyx":305
 *             gsl_vector_set_all(self.nDZ[i], 0)
 * 
 *         gsl_rng_env_setup()             # <<<<<<<<<<<<<<
 *         self.rng = gsl_rng_alloc(gsl_rng_default)
 * 
 */
  gsl_rng_env_setup();

  /* "clda.pyx":306
 * 
 *         gsl_rng_env_setup()
 *         self.rng = gsl_rng_alloc(gsl_rng_default)             # <<<<<<<<<<<<<<
 * 
 *         self.p0 = gsl_vector_alloc(self.T0)
 */
  __pyx_v_self->rng = gsl_rng_alloc(gsl_rng_default);

  /* "clda.pyx":308
 *         self.rng = gsl_rng_alloc(gsl_rng_default)
 * 
 *         self.p0 = gsl_vector_alloc(self.T0)             # <<<<<<<<<<<<<<
 *         self.p00 = gsl_vector_alloc(self.T0)
 *         self.pZC = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 */
  __pyx_v_self->p0 = gsl_vector_alloc(__pyx_v_self->T0);

  /* "clda.pyx":309
 * 
 *         self.p0 = gsl_vector_alloc(self.T0)
 *         self.p00 = gsl_vector_alloc(self.T0)             # <<<<<<<<<<<<<<
 *         self.pZC = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for i in range(self.C):
 */
  __pyx_v_self->p00 = gsl_vector_alloc(__pyx_v_self->T0);

  /* "clda.pyx":310
 *         self.p0 = gsl_vector_alloc(self.T0)
 *         self.p00 = gsl_vector_alloc(self.T0)
 *         self.pZC = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))             # <<<<<<<<<<<<<<
 *         for i in range(self.C):
 *             self.pZC[i] = gsl_vector_alloc(self.Tc[i])
 */
  __pyx_v_self->pZC = ((gsl_vector **)PyMem_Malloc((__pyx_v_self->C * (sizeof(gsl_vector *)))));

  /* "clda.pyx":311
 *         self.p00 = gsl_vector_alloc(self.T0)
 *         self.pZC = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for i in range(self.C):             # <<<<<<<<<<<<<<
 *             self.pZC[i] = gsl_vector_alloc(self.Tc[i])
 * 
 */
  __pyx_t_19 = __pyx_v_self->C;
  for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_19; __pyx_t_22+=1) {
    __pyx_v_i = __pyx_t_22;

    /* "clda.pyx":312
 *         self.pZC = <gsl_vector**>PyMem_Malloc(self.C * sizeof(gsl_vector*))
 *         for i in range(self.C):
 *             self.pZC[i] = gsl_vector_alloc(self.Tc[i])             # <<<<<<<<<<<<<<
 * 
 *         gsl_rng_set(self.rng, 0)
 */
    (__pyx_v_self->pZC[__pyx_v_i]) = gsl_vector_alloc((__pyx_v_self->Tc[__pyx_v_i]));
  }

  /* "clda.pyx":314
 *             self.pZC[i] = gsl_vector_alloc(self.Tc[i])
 * 
 *         gsl_rng_set(self.rng, 0)             # <<<<<<<<<<<<<<
 *         srand48(0)
 * 
 */
  gsl_rng_set(__pyx_v_self->rng, 0);

  /* "clda.pyx":315
 * 
 *         gsl_rng_set(self.rng, 0)
 *         srand48(0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  srand48(0);

  /* "clda.pyx":157
 *     cdef uint burn_in
 * 
 *     def __init__(self, corpus_path, prefix, test_path=None, num_topics_0=10, num_topics_c=10,             # <<<<<<<<<<<<<<
 *             alpha=50.0, delta=[1, 1], beta=.01, n_worker=-1,
 *                  n_iter=20, save_interval=50, eval_interval=10, burn_in=500):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("clda.CLDA.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n_thread);
  __Pyx_XDECREF(__pyx_v_Dc);
  __Pyx_XDECREF(__pyx_v_Wc);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_collection_id);
  __Pyx_XDECREF(__pyx_v_temp);
  __Pyx_XDECREF(__pyx_v_word);
  __Pyx_XDECREF(__pyx_v_tc);
  __Pyx_XDECREF(__pyx_v_unit);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_num_topics_c);
  __Pyx_XDECREF(__pyx_v_n_worker);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":318
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.test_out:
 */

/* Python wrapper */
static void __pyx_pw_4clda_4CLDA_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4clda_4CLDA_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4clda_4CLDA_2__dealloc__(((struct __pyx_obj_4clda_CLDA *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4clda_4CLDA_2__dealloc__(struct __pyx_obj_4clda_CLDA *__pyx_v_self) {
  __pyx_t_10gsl_matrix_uint __pyx_v_c;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_10gsl_matrix_uint __pyx_t_2;
  __pyx_t_10gsl_matrix_uint __pyx_t_3;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "clda.pyx":320
 *     def __dealloc__(self):
 * 
 *         if self.test_out:             # <<<<<<<<<<<<<<
 *             fclose(self.test_out)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->test_out != 0);
  if (__pyx_t_1) {

    /* "clda.pyx":321
 * 
 *         if self.test_out:
 *             fclose(self.test_out)             # <<<<<<<<<<<<<<
 * 
 *         gsl_vector_free(self.n0Z)
 */
    fclose(__pyx_v_self->test_out);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "clda.pyx":323
 *             fclose(self.test_out)
 * 
 *         gsl_vector_free(self.n0Z)             # <<<<<<<<<<<<<<
 *         gsl_vector_free(self.nZ)
 *         free_2d_gsl_matrix(self.nYZ, 2)
 */
  gsl_vector_free(__pyx_v_self->n0Z);

  /* "clda.pyx":324
 * 
 *         gsl_vector_free(self.n0Z)
 *         gsl_vector_free(self.nZ)             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(self.nYZ, 2)
 *         free_2d_gsl_matrix(self.n1CZ, self.C)
 */
  gsl_vector_free(__pyx_v_self->nZ);

  /* "clda.pyx":325
 *         gsl_vector_free(self.n0Z)
 *         gsl_vector_free(self.nZ)
 *         free_2d_gsl_matrix(self.nYZ, 2)             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(self.n1CZ, self.C)
 *         free_2d_gsl_matrix(self.n0WZ, self.V)
 */
  __pyx_f_10gsl_matrix_free_2d_gsl_matrix(__pyx_v_self->nYZ, 2);

  /* "clda.pyx":326
 *         gsl_vector_free(self.nZ)
 *         free_2d_gsl_matrix(self.nYZ, 2)
 *         free_2d_gsl_matrix(self.n1CZ, self.C)             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(self.n0WZ, self.V)
 *         free_3d_gsl_matrix(self.n1CWZ, self.C, self.V)
 */
  __pyx_f_10gsl_matrix_free_2d_gsl_matrix(__pyx_v_self->n1CZ, __pyx_v_self->C);

  /* "clda.pyx":327
 *         free_2d_gsl_matrix(self.nYZ, 2)
 *         free_2d_gsl_matrix(self.n1CZ, self.C)
 *         free_2d_gsl_matrix(self.n0WZ, self.V)             # <<<<<<<<<<<<<<
 *         free_3d_gsl_matrix(self.n1CWZ, self.C, self.V)
 *         free_2d_gsl_matrix(self.nDZ, self.D)
 */
  __pyx_f_10gsl_matrix_free_2d_gsl_matrix(__pyx_v_self->n0WZ, __pyx_v_self->V);

  /* "clda.pyx":328
 *         free_2d_gsl_matrix(self.n1CZ, self.C)
 *         free_2d_gsl_matrix(self.n0WZ, self.V)
 *         free_3d_gsl_matrix(self.n1CWZ, self.C, self.V)             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(self.nDZ, self.D)
 * 
 */
  __pyx_f_10gsl_matrix_free_3d_gsl_matrix(__pyx_v_self->n1CWZ, __pyx_v_self->C, __pyx_v_self->V);

  /* "clda.pyx":329
 *         free_2d_gsl_matrix(self.n0WZ, self.V)
 *         free_3d_gsl_matrix(self.n1CWZ, self.C, self.V)
 *         free_2d_gsl_matrix(self.nDZ, self.D)             # <<<<<<<<<<<<<<
 * 
 *         for c in xrange(self.C):
 */
  __pyx_f_10gsl_matrix_free_2d_gsl_matrix(__pyx_v_self->nDZ, __pyx_v_self->D);

  /* "clda.pyx":331
 *         free_2d_gsl_matrix(self.nDZ, self.D)
 * 
 *         for c in xrange(self.C):             # <<<<<<<<<<<<<<
 *             if self.Tc[c] - self.T0 > 0:
 *                 gsl_vector_free(self.nCZ[c])
 */
  __pyx_t_2 = __pyx_v_self->C;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_c = __pyx_t_3;

    /* "clda.pyx":332
 * 
 *         for c in xrange(self.C):
 *             if self.Tc[c] - self.T0 > 0:             # <<<<<<<<<<<<<<
 *                 gsl_vector_free(self.nCZ[c])
 *                 free_2d_gsl_matrix(self.nCWZ[c], self.V)
 */
    __pyx_t_1 = ((((__pyx_v_self->Tc[__pyx_v_c]) - __pyx_v_self->T0) > 0) != 0);
    if (__pyx_t_1) {

      /* "clda.pyx":333
 *         for c in xrange(self.C):
 *             if self.Tc[c] - self.T0 > 0:
 *                 gsl_vector_free(self.nCZ[c])             # <<<<<<<<<<<<<<
 *                 free_2d_gsl_matrix(self.nCWZ[c], self.V)
 *         PyMem_Free(self.nCZ)
 */
      gsl_vector_free((__pyx_v_self->nCZ[__pyx_v_c]));

      /* "clda.pyx":334
 *             if self.Tc[c] - self.T0 > 0:
 *                 gsl_vector_free(self.nCZ[c])
 *                 free_2d_gsl_matrix(self.nCWZ[c], self.V)             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.nCZ)
 *         PyMem_Free(self.nCWZ)
 */
      __pyx_f_10gsl_matrix_free_2d_gsl_matrix((__pyx_v_self->nCWZ[__pyx_v_c]), __pyx_v_self->V);
      goto __pyx_L6;
    }
    __pyx_L6:;
  }

  /* "clda.pyx":335
 *                 gsl_vector_free(self.nCZ[c])
 *                 free_2d_gsl_matrix(self.nCWZ[c], self.V)
 *         PyMem_Free(self.nCZ)             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.nCWZ)
 * 
 */
  PyMem_Free(__pyx_v_self->nCZ);

  /* "clda.pyx":336
 *                 free_2d_gsl_matrix(self.nCWZ[c], self.V)
 *         PyMem_Free(self.nCZ)
 *         PyMem_Free(self.nCWZ)             # <<<<<<<<<<<<<<
 * 
 *         gsl_rng_free(self.rng)
 */
  PyMem_Free(__pyx_v_self->nCWZ);

  /* "clda.pyx":338
 *         PyMem_Free(self.nCWZ)
 * 
 *         gsl_rng_free(self.rng)             # <<<<<<<<<<<<<<
 *         gsl_vector_free(self.p0)
 *         gsl_vector_free(self.p00)
 */
  gsl_rng_free(__pyx_v_self->rng);

  /* "clda.pyx":339
 * 
 *         gsl_rng_free(self.rng)
 *         gsl_vector_free(self.p0)             # <<<<<<<<<<<<<<
 *         gsl_vector_free(self.p00)
 *         free_2d_gsl_matrix(self.pZC, self.C)
 */
  gsl_vector_free(__pyx_v_self->p0);

  /* "clda.pyx":340
 *         gsl_rng_free(self.rng)
 *         gsl_vector_free(self.p0)
 *         gsl_vector_free(self.p00)             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(self.pZC, self.C)
 *         free_2d_gsl_matrix(self.alpha, self.C)
 */
  gsl_vector_free(__pyx_v_self->p00);

  /* "clda.pyx":341
 *         gsl_vector_free(self.p0)
 *         gsl_vector_free(self.p00)
 *         free_2d_gsl_matrix(self.pZC, self.C)             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(self.alpha, self.C)
 * 
 */
  __pyx_f_10gsl_matrix_free_2d_gsl_matrix(__pyx_v_self->pZC, __pyx_v_self->C);

  /* "clda.pyx":342
 *         gsl_vector_free(self.p00)
 *         free_2d_gsl_matrix(self.pZC, self.C)
 *         free_2d_gsl_matrix(self.alpha, self.C)             # <<<<<<<<<<<<<<
 * 
 *     def run(self, load=False):
 */
  __pyx_f_10gsl_matrix_free_2d_gsl_matrix(__pyx_v_self->alpha, __pyx_v_self->C);

  /* "clda.pyx":318
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.test_out:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "clda.pyx":344
 *         free_2d_gsl_matrix(self.alpha, self.C)
 * 
 *     def run(self, load=False):             # <<<<<<<<<<<<<<
 *         self.initialize(load)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4clda_4CLDA_5run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4clda_4CLDA_5run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_load = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_load,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_load);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_load = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("clda.CLDA.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4clda_4CLDA_4run(((struct __pyx_obj_4clda_CLDA *)__pyx_v_self), __pyx_v_load);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4clda_4CLDA_4run(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_load) {
  Sampler *__pyx_v_sampler;
  double __pyx_v_loglik;
  double __pyx_v_perplexity;
  double __pyx_v_cur_time;
  double __pyx_v_eval_time;
  CYTHON_UNUSED double *__pyx_v_count;
  size_t __pyx_v_k;
  PyObject *__pyx_v_timediff = NULL;
  PyObject *__pyx_v_timeout = NULL;
  PyObject *__pyx_v_begin_time = NULL;
  PyObject *__pyx_v_start_time = NULL;
  __pyx_t_10gsl_matrix_uint __pyx_v_c;
  PyObject *__pyx_v_timed = NULL;
  PyObject *__pyx_v_avgdiff = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Sampler *__pyx_t_5;
  void *__pyx_t_6;
  __pyx_t_10gsl_matrix_uint __pyx_t_7;
  size_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __pyx_t_10gsl_matrix_uint __pyx_t_12;
  __pyx_t_10gsl_matrix_uint __pyx_t_13;
  int __pyx_t_14;
  double __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "clda.pyx":345
 * 
 *     def run(self, load=False):
 *         self.initialize(load)             # <<<<<<<<<<<<<<
 * 
 *         cdef Sampler *sampler
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_load); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_load);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_load);
    __Pyx_GIVEREF(__pyx_v_load);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "clda.pyx":348
 * 
 *         cdef Sampler *sampler
 *         sampler = new Sampler(self.burn_in, self.T0, self.Tc, self.C, self.D, self.V, self.unit,             # <<<<<<<<<<<<<<
 *                                   self.dW, self.dC, self.docs, self.dY, self.dZ, self.alpha,
 *                                   self.nDZ, self.nZ, self.n0Z, self.nYZ, self.n0WZ, self.n1CWZ, self.n1CZ, self.nCWZ, self.nCZ)
 */
  try {
    __pyx_t_5 = new Sampler(__pyx_v_self->burn_in, __pyx_v_self->T0, __pyx_v_self->Tc, __pyx_v_self->C, __pyx_v_self->D, __pyx_v_self->V, __pyx_v_self->unit, __pyx_v_self->dW, __pyx_v_self->dC, __pyx_v_self->docs, __pyx_v_self->dY, __pyx_v_self->dZ, __pyx_v_self->alpha, __pyx_v_self->nDZ, __pyx_v_self->nZ, __pyx_v_self->n0Z, __pyx_v_self->nYZ, __pyx_v_self->n0WZ, __pyx_v_self->n1CWZ, __pyx_v_self->n1CZ, __pyx_v_self->nCWZ, __pyx_v_self->nCZ);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_sampler = __pyx_t_5;

  /* "clda.pyx":351
 *                                   self.dW, self.dC, self.docs, self.dY, self.dZ, self.alpha,
 *                                   self.nDZ, self.nZ, self.n0Z, self.nYZ, self.n0WZ, self.n1CWZ, self.n1CZ, self.nCWZ, self.nCZ)
 *         cdef double loglik, perplexity, cur_time, eval_time = 0             # <<<<<<<<<<<<<<
 *         cdef double count0
 *         cdef double *count = <double*>self.mem.alloc(self.C, sizeof(double))
 */
  __pyx_v_eval_time = 0.0;

  /* "clda.pyx":353
 *         cdef double loglik, perplexity, cur_time, eval_time = 0
 *         cdef double count0
 *         cdef double *count = <double*>self.mem.alloc(self.C, sizeof(double))             # <<<<<<<<<<<<<<
 *         cdef size_t d, n, k
 *         timediff = []
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->C, (sizeof(double))); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((double *)__pyx_t_6);

  /* "clda.pyx":355
 *         cdef double *count = <double*>self.mem.alloc(self.C, sizeof(double))
 *         cdef size_t d, n, k
 *         timediff = []             # <<<<<<<<<<<<<<
 *         timeout = open(self.prefix + '.time', 'w')
 *         begin_time = datetime.datetime.now()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_timediff = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "clda.pyx":356
 *         cdef size_t d, n, k
 *         timediff = []
 *         timeout = open(self.prefix + '.time', 'w')             # <<<<<<<<<<<<<<
 *         begin_time = datetime.datetime.now()
 *         for k in range(self.iter, self.n_iter):
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_self->prefix, __pyx_kp_s_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_w);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_w);
  __Pyx_GIVEREF(__pyx_n_s_w);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_timeout = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "clda.pyx":357
 *         timediff = []
 *         timeout = open(self.prefix + '.time', 'w')
 *         begin_time = datetime.datetime.now()             # <<<<<<<<<<<<<<
 *         for k in range(self.iter, self.n_iter):
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_datetime); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_now); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_begin_time = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "clda.pyx":358
 *         timeout = open(self.prefix + '.time', 'w')
 *         begin_time = datetime.datetime.now()
 *         for k in range(self.iter, self.n_iter):             # <<<<<<<<<<<<<<
 * 
 *             logger.info('Iteration %d...' % (k))
 */
  __pyx_t_7 = __pyx_v_self->n_iter;
  for (__pyx_t_8 = __pyx_v_self->iter; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "clda.pyx":360
 *         for k in range(self.iter, self.n_iter):
 * 
 *             logger.info('Iteration %d...' % (k))             # <<<<<<<<<<<<<<
 *             start_time = datetime.datetime.now()
 *             if False:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_k); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Iteration_d, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "clda.pyx":361
 * 
 *             logger.info('Iteration %d...' % (k))
 *             start_time = datetime.datetime.now()             # <<<<<<<<<<<<<<
 *             if False:
 *                 self.doSampling()
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_datetime); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_now); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_start_time, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "clda.pyx":365
 *                 self.doSampling()
 *             else:
 *                 sampler.sampling(k)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_sampler->sampling(__pyx_v_k);

    /* "clda.pyx":368
 * 
 * 
 *             if k > self.burn_in and k % 10 == 0:             # <<<<<<<<<<<<<<
 *                 logger.info('Optimizing alpha...')
 *                 for c in xrange(self.C):
 */
    __pyx_t_11 = ((__pyx_v_k > __pyx_v_self->burn_in) != 0);
    if (__pyx_t_11) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_11 = (((__pyx_v_k % 10) == 0) != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_10) {

      /* "clda.pyx":369
 * 
 *             if k > self.burn_in and k % 10 == 0:
 *                 logger.info('Optimizing alpha...')             # <<<<<<<<<<<<<<
 *                 for c in xrange(self.C):
 *                     self.update_alpha(c)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "clda.pyx":370
 *             if k > self.burn_in and k % 10 == 0:
 *                 logger.info('Optimizing alpha...')
 *                 for c in xrange(self.C):             # <<<<<<<<<<<<<<
 *                     self.update_alpha(c)
 * 
 */
      __pyx_t_12 = __pyx_v_self->C;
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_c = __pyx_t_13;

        /* "clda.pyx":371
 *                 logger.info('Optimizing alpha...')
 *                 for c in xrange(self.C):
 *                     self.update_alpha(c)             # <<<<<<<<<<<<<<
 * 
 *             timed = datetime.datetime.now() - start_time
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_4clda_CLDA *)__pyx_v_self->__pyx_vtab)->update_alpha(__pyx_v_self, __pyx_v_c); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "clda.pyx":373
 *                     self.update_alpha(c)
 * 
 *             timed = datetime.datetime.now() - start_time             # <<<<<<<<<<<<<<
 *             timediff.append(timed)
 *             timeout.write(str(timed.total_seconds()) + '\n')
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_datetime); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_now); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_v_start_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_timed, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "clda.pyx":374
 * 
 *             timed = datetime.datetime.now() - start_time
 *             timediff.append(timed)             # <<<<<<<<<<<<<<
 *             timeout.write(str(timed.total_seconds()) + '\n')
 * 
 */
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_timediff, __pyx_v_timed); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "clda.pyx":375
 *             timed = datetime.datetime.now() - start_time
 *             timediff.append(timed)
 *             timeout.write(str(timed.total_seconds()) + '\n')             # <<<<<<<<<<<<<<
 * 
 *             if self.eval_interval > 0 and self.test and k % self.eval_interval == 0:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_timeout, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_timed, __pyx_n_s_total_seconds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_9, __pyx_kp_s__10); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "clda.pyx":377
 *             timeout.write(str(timed.total_seconds()) + '\n')
 * 
 *             if self.eval_interval > 0 and self.test and k % self.eval_interval == 0:             # <<<<<<<<<<<<<<
 *                 logger.info('Evaluating...')
 *                 start_time = datetime.datetime.now()
 */
    __pyx_t_11 = ((__pyx_v_self->eval_interval > 0) != 0);
    if (__pyx_t_11) {
      goto __pyx_L12_next_and;
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_L12_next_and:;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->test)); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_11) {
      goto __pyx_L13_next_and;
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_L13_next_and:;
    __pyx_t_11 = (((__pyx_v_k % __pyx_v_self->eval_interval) == 0) != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_10) {

      /* "clda.pyx":378
 * 
 *             if self.eval_interval > 0 and self.test and k % self.eval_interval == 0:
 *                 logger.info('Evaluating...')             # <<<<<<<<<<<<<<
 *                 start_time = datetime.datetime.now()
 *                 loglik = evaluate(20, 0,
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "clda.pyx":379
 *             if self.eval_interval > 0 and self.test and k % self.eval_interval == 0:
 *                 logger.info('Evaluating...')
 *                 start_time = datetime.datetime.now()             # <<<<<<<<<<<<<<
 *                 loglik = evaluate(20, 0,
 *                     self.Tc, self.T0, self.t_maxWC, self.C, self.t_D, self.t_dC, self.t_dW, self.t_docs,
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_now); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_start_time, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "clda.pyx":380
 *                 logger.info('Evaluating...')
 *                 start_time = datetime.datetime.now()
 *                 loglik = evaluate(20, 0,             # <<<<<<<<<<<<<<
 *                     self.Tc, self.T0, self.t_maxWC, self.C, self.t_D, self.t_dC, self.t_dW, self.t_docs,
 *                     self.alpha, self.unit,
 */
      __pyx_v_loglik = evaluate(20, 0, __pyx_v_self->Tc, __pyx_v_self->T0, __pyx_v_self->t_maxWC, __pyx_v_self->C, __pyx_v_self->t_D, __pyx_v_self->t_dC, __pyx_v_self->t_dW, __pyx_v_self->t_docs, __pyx_v_self->alpha, __pyx_v_self->unit, __pyx_v_self->nZ, __pyx_v_self->n0Z, __pyx_v_self->nYZ, __pyx_v_self->n0WZ, __pyx_v_self->n1CWZ, __pyx_v_self->n1CZ, __pyx_v_self->nCWZ, __pyx_v_self->nCZ);

      /* "clda.pyx":384
 *                     self.alpha, self.unit,
 *                     self.nZ, self.n0Z, self.nYZ, self.n0WZ, self.n1CWZ, self.n1CZ, self.nCWZ, self.nCZ)
 *                 perplexity = exp(- loglik / self.t_W)             # <<<<<<<<<<<<<<
 *                 logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 */
      __pyx_v_perplexity = exp(((-__pyx_v_loglik) / __pyx_v_self->t_W));

      /* "clda.pyx":385
 *                     self.nZ, self.n0Z, self.nYZ, self.n0WZ, self.n1CWZ, self.n1CZ, self.nCWZ, self.nCZ)
 *                 perplexity = exp(- loglik / self.t_W)
 *                 logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))             # <<<<<<<<<<<<<<
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 *                 cur_time = (datetime.datetime.now() - begin_time).total_seconds() - eval_time
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_loglik); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_perplexity); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_log_likelihood_2f_perplexity_2f, __pyx_t_9); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __Pyx_GIVEREF(__pyx_t_9); __pyx_t_9 = NULL;
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "clda.pyx":386
 *                 perplexity = exp(- loglik / self.t_W)
 *                 logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()             # <<<<<<<<<<<<<<
 *                 cur_time = (datetime.datetime.now() - begin_time).total_seconds() - eval_time
 *                 fprintf(self.test_out, '%d\t%f\t%f\t%f\n', k, cur_time, loglik, perplexity)
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_eval_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_datetime); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_now); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_v_start_time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_total_seconds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_eval_time = __pyx_t_15;

      /* "clda.pyx":387
 *                 logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 *                 cur_time = (datetime.datetime.now() - begin_time).total_seconds() - eval_time             # <<<<<<<<<<<<<<
 *                 fprintf(self.test_out, '%d\t%f\t%f\t%f\n', k, cur_time, loglik, perplexity)
 *                 fflush(self.test_out)
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_datetime); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_now); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_v_begin_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_total_seconds); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_eval_time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_cur_time = __pyx_t_15;

      /* "clda.pyx":388
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 *                 cur_time = (datetime.datetime.now() - begin_time).total_seconds() - eval_time
 *                 fprintf(self.test_out, '%d\t%f\t%f\t%f\n', k, cur_time, loglik, perplexity)             # <<<<<<<<<<<<<<
 *                 fflush(self.test_out)
 * 
 */
      fprintf(__pyx_v_self->test_out, __pyx_k_d_f_f_f, __pyx_v_k, __pyx_v_cur_time, __pyx_v_loglik, __pyx_v_perplexity);

      /* "clda.pyx":389
 *                 cur_time = (datetime.datetime.now() - begin_time).total_seconds() - eval_time
 *                 fprintf(self.test_out, '%d\t%f\t%f\t%f\n', k, cur_time, loglik, perplexity)
 *                 fflush(self.test_out)             # <<<<<<<<<<<<<<
 * 
 *             if self.save_interval > 0 and k >= self.burn_in and k % self.save_interval == 0:
 */
      fflush(__pyx_v_self->test_out);
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "clda.pyx":391
 *                 fflush(self.test_out)
 * 
 *             if self.save_interval > 0 and k >= self.burn_in and k % self.save_interval == 0:             # <<<<<<<<<<<<<<
 *                 start_time = datetime.datetime.now()
 *                 self.save(False, k)
 */
    __pyx_t_11 = ((__pyx_v_self->save_interval > 0) != 0);
    if (__pyx_t_11) {
      goto __pyx_L16_next_and;
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_L16_next_and:;
    __pyx_t_11 = ((__pyx_v_k >= __pyx_v_self->burn_in) != 0);
    if (__pyx_t_11) {
      goto __pyx_L17_next_and;
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_L17_next_and:;
    __pyx_t_11 = (((__pyx_v_k % __pyx_v_self->save_interval) == 0) != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_10) {

      /* "clda.pyx":392
 * 
 *             if self.save_interval > 0 and k >= self.burn_in and k % self.save_interval == 0:
 *                 start_time = datetime.datetime.now()             # <<<<<<<<<<<<<<
 *                 self.save(False, k)
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_now); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_1) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_start_time, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "clda.pyx":393
 *             if self.save_interval > 0 and k >= self.burn_in and k % self.save_interval == 0:
 *                 start_time = datetime.datetime.now()
 *                 self.save(False, k)             # <<<<<<<<<<<<<<
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 *         del sampler
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_save); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_k); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      __pyx_t_16 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_16 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_3) {
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_16, Py_False);
      __Pyx_GIVEREF(Py_False);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_16, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "clda.pyx":394
 *                 start_time = datetime.datetime.now()
 *                 self.save(False, k)
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()             # <<<<<<<<<<<<<<
 *         del sampler
 * 
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_eval_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_now); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_9, __pyx_v_start_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_total_seconds); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_eval_time = __pyx_t_15;
      goto __pyx_L14;
    }
    __pyx_L14:;
  }

  /* "clda.pyx":395
 *                 self.save(False, k)
 *                 eval_time += (datetime.datetime.now() - start_time).total_seconds()
 *         del sampler             # <<<<<<<<<<<<<<
 * 
 *         self.save()
 */
  delete __pyx_v_sampler;

  /* "clda.pyx":397
 *         del sampler
 * 
 *         self.save()             # <<<<<<<<<<<<<<
 *         logger.info('...done')
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_save); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "clda.pyx":398
 * 
 *         self.save()
 *         logger.info('...done')             # <<<<<<<<<<<<<<
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)
 *         logger.info('average running time of each iteration: %s' % (avgdiff))
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "clda.pyx":399
 *         self.save()
 *         logger.info('...done')
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)             # <<<<<<<<<<<<<<
 *         logger.info('average running time of each iteration: %s' % (avgdiff))
 *         timeout.close()
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_timedelta); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_timediff);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_timediff);
  __Pyx_GIVEREF(__pyx_v_timediff);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_16 = PyList_GET_SIZE(__pyx_v_timediff); if (unlikely(__pyx_t_16 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_avgdiff = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "clda.pyx":400
 *         logger.info('...done')
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)
 *         logger.info('average running time of each iteration: %s' % (avgdiff))             # <<<<<<<<<<<<<<
 *         timeout.close()
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_average_running_time_of_each_ite, __pyx_v_avgdiff); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "clda.pyx":401
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)
 *         logger.info('average running time of each iteration: %s' % (avgdiff))
 *         timeout.close()             # <<<<<<<<<<<<<<
 * 
 *     cdef inline stat_incr(self, int d, int c, int w, int y, uint z, double val):
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_timeout, __pyx_n_s_close); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "clda.pyx":344
 *         free_2d_gsl_matrix(self.alpha, self.C)
 * 
 *     def run(self, load=False):             # <<<<<<<<<<<<<<
 *         self.initialize(load)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("clda.CLDA.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_timediff);
  __Pyx_XDECREF(__pyx_v_timeout);
  __Pyx_XDECREF(__pyx_v_begin_time);
  __Pyx_XDECREF(__pyx_v_start_time);
  __Pyx_XDECREF(__pyx_v_timed);
  __Pyx_XDECREF(__pyx_v_avgdiff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":403
 *         timeout.close()
 * 
 *     cdef inline stat_incr(self, int d, int c, int w, int y, uint z, double val):             # <<<<<<<<<<<<<<
 *         gsl_2d_matrix_incr(self.nDZ, d, z, val)
 *         if z < self.T0:
 */

static CYTHON_INLINE PyObject *__pyx_f_4clda_4CLDA_stat_incr(struct __pyx_obj_4clda_CLDA *__pyx_v_self, int __pyx_v_d, int __pyx_v_c, int __pyx_v_w, int __pyx_v_y, __pyx_t_10gsl_matrix_uint __pyx_v_z, double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("stat_incr", 0);

  /* "clda.pyx":404
 * 
 *     cdef inline stat_incr(self, int d, int c, int w, int y, uint z, double val):
 *         gsl_2d_matrix_incr(self.nDZ, d, z, val)             # <<<<<<<<<<<<<<
 *         if z < self.T0:
 *             gsl_2d_matrix_incr(self.nYZ, y, z, val)
 */
  __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(__pyx_v_self->nDZ, __pyx_v_d, __pyx_v_z, __pyx_v_val);

  /* "clda.pyx":405
 *     cdef inline stat_incr(self, int d, int c, int w, int y, uint z, double val):
 *         gsl_2d_matrix_incr(self.nDZ, d, z, val)
 *         if z < self.T0:             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_incr(self.nYZ, y, z, val)
 *             gsl_1d_matrix_incr(self.nZ, z, val)
 */
  __pyx_t_1 = ((__pyx_v_z < __pyx_v_self->T0) != 0);
  if (__pyx_t_1) {

    /* "clda.pyx":406
 *         gsl_2d_matrix_incr(self.nDZ, d, z, val)
 *         if z < self.T0:
 *             gsl_2d_matrix_incr(self.nYZ, y, z, val)             # <<<<<<<<<<<<<<
 *             gsl_1d_matrix_incr(self.nZ, z, val)
 *             if y == 0:
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(__pyx_v_self->nYZ, __pyx_v_y, __pyx_v_z, __pyx_v_val);

    /* "clda.pyx":407
 *         if z < self.T0:
 *             gsl_2d_matrix_incr(self.nYZ, y, z, val)
 *             gsl_1d_matrix_incr(self.nZ, z, val)             # <<<<<<<<<<<<<<
 *             if y == 0:
 *                 gsl_2d_matrix_incr(self.n0WZ, w, z, val)
 */
    __pyx_f_10gsl_matrix_gsl_1d_matrix_incr(__pyx_v_self->nZ, __pyx_v_z, __pyx_v_val);

    /* "clda.pyx":408
 *             gsl_2d_matrix_incr(self.nYZ, y, z, val)
 *             gsl_1d_matrix_incr(self.nZ, z, val)
 *             if y == 0:             # <<<<<<<<<<<<<<
 *                 gsl_2d_matrix_incr(self.n0WZ, w, z, val)
 *                 gsl_1d_matrix_incr(self.n0Z, z, val)
 */
    __pyx_t_1 = ((__pyx_v_y == 0) != 0);
    if (__pyx_t_1) {

      /* "clda.pyx":409
 *             gsl_1d_matrix_incr(self.nZ, z, val)
 *             if y == 0:
 *                 gsl_2d_matrix_incr(self.n0WZ, w, z, val)             # <<<<<<<<<<<<<<
 *                 gsl_1d_matrix_incr(self.n0Z, z, val)
 *             else:
 */
      __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(__pyx_v_self->n0WZ, __pyx_v_w, __pyx_v_z, __pyx_v_val);

      /* "clda.pyx":410
 *             if y == 0:
 *                 gsl_2d_matrix_incr(self.n0WZ, w, z, val)
 *                 gsl_1d_matrix_incr(self.n0Z, z, val)             # <<<<<<<<<<<<<<
 *             else:
 *                 gsl_3d_matrix_incr(self.n1CWZ, c, w, z, val)
 */
      __pyx_f_10gsl_matrix_gsl_1d_matrix_incr(__pyx_v_self->n0Z, __pyx_v_z, __pyx_v_val);
      goto __pyx_L4;
    }
    /*else*/ {

      /* "clda.pyx":412
 *                 gsl_1d_matrix_incr(self.n0Z, z, val)
 *             else:
 *                 gsl_3d_matrix_incr(self.n1CWZ, c, w, z, val)             # <<<<<<<<<<<<<<
 *                 gsl_2d_matrix_incr(self.n1CZ, c, z, val)
 *         else:
 */
      __pyx_f_10gsl_matrix_gsl_3d_matrix_incr(__pyx_v_self->n1CWZ, __pyx_v_c, __pyx_v_w, __pyx_v_z, __pyx_v_val);

      /* "clda.pyx":413
 *             else:
 *                 gsl_3d_matrix_incr(self.n1CWZ, c, w, z, val)
 *                 gsl_2d_matrix_incr(self.n1CZ, c, z, val)             # <<<<<<<<<<<<<<
 *         else:
 *             gsl_3d_matrix_incr(self.nCWZ, c, w, z - self.T0, val)
 */
      __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(__pyx_v_self->n1CZ, __pyx_v_c, __pyx_v_z, __pyx_v_val);
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "clda.pyx":415
 *                 gsl_2d_matrix_incr(self.n1CZ, c, z, val)
 *         else:
 *             gsl_3d_matrix_incr(self.nCWZ, c, w, z - self.T0, val)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_incr(self.nCZ, c, z - self.T0, val)
 * 
 */
    __pyx_f_10gsl_matrix_gsl_3d_matrix_incr(__pyx_v_self->nCWZ, __pyx_v_c, __pyx_v_w, (__pyx_v_z - __pyx_v_self->T0), __pyx_v_val);

    /* "clda.pyx":416
 *         else:
 *             gsl_3d_matrix_incr(self.nCWZ, c, w, z - self.T0, val)
 *             gsl_2d_matrix_incr(self.nCZ, c, z - self.T0, val)             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, load=False):
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(__pyx_v_self->nCZ, __pyx_v_c, (__pyx_v_z - __pyx_v_self->T0), __pyx_v_val);
  }
  __pyx_L3:;

  /* "clda.pyx":403
 *         timeout.close()
 * 
 *     cdef inline stat_incr(self, int d, int c, int w, int y, uint z, double val):             # <<<<<<<<<<<<<<
 *         gsl_2d_matrix_incr(self.nDZ, d, z, val)
 *         if z < self.T0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":418
 *             gsl_2d_matrix_incr(self.nCZ, c, z - self.T0, val)
 * 
 *     def initialize(self, load=False):             # <<<<<<<<<<<<<<
 *         logger.info("Initializing...")
 *         cdef size_t d
 */

/* Python wrapper */
static PyObject *__pyx_pw_4clda_4CLDA_7initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4clda_4CLDA_7initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_load = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_load,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_load);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_load = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("clda.CLDA.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4clda_4CLDA_6initialize(((struct __pyx_obj_4clda_CLDA *)__pyx_v_self), __pyx_v_load);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4clda_4CLDA_6initialize(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_load) {
  size_t __pyx_v_d;
  size_t __pyx_v_n;
  PyObject *__pyx_v_doc = 0;
  size_t __pyx_v_w;
  size_t __pyx_v_y;
  size_t __pyx_v_z;
  size_t __pyx_v_c;
  PyObject *__pyx_v__Y = NULL;
  PyObject *__pyx_v__Z = NULL;
  PyObject *__pyx_v_alpha = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_N = NULL;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  __pyx_t_10gsl_matrix_uint __pyx_t_15;
  size_t __pyx_t_16;
  __pyx_t_10gsl_matrix_uint __pyx_t_17;
  size_t __pyx_t_18;
  double __pyx_t_19;
  void *__pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  size_t __pyx_t_24;
  size_t __pyx_t_25;
  size_t __pyx_t_26;
  __pyx_t_5numpy_uint8_t __pyx_t_27;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "clda.pyx":419
 * 
 *     def initialize(self, load=False):
 *         logger.info("Initializing...")             # <<<<<<<<<<<<<<
 *         cdef size_t d
 *         cdef size_t n
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "clda.pyx":427
 *         cdef size_t z
 *         cdef size_t c
 *         if load:             # <<<<<<<<<<<<<<
 *             logger.info("Loading states...")
 *             _Y, _Z, alpha, self.iter, _, _, _, _, _, _ = pickle.load(open(self.prefix + '.pkl', 'rb'))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_load); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "clda.pyx":428
 *         cdef size_t c
 *         if load:
 *             logger.info("Loading states...")             # <<<<<<<<<<<<<<
 *             _Y, _Z, alpha, self.iter, _, _, _, _, _, _ = pickle.load(open(self.prefix + '.pkl', 'rb'))
 *             for c in range(self.C):
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "clda.pyx":429
 *         if load:
 *             logger.info("Loading states...")
 *             _Y, _Z, alpha, self.iter, _, _, _, _, _, _ = pickle.load(open(self.prefix + '.pkl', 'rb'))             # <<<<<<<<<<<<<<
 *             for c in range(self.C):
 *                 for z in range(self.Tc[c]):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pickle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_load); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_v_self->prefix, __pyx_kp_s_pkl); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 10)) {
        if (size > 10) __Pyx_RaiseTooManyValuesError(10);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 6); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 7); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 8); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 9); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 7); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 8); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 9); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[10] = {&__pyx_t_4,&__pyx_t_6,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12};
        for (i=0; i < 10; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[10] = {&__pyx_t_4,&__pyx_t_6,&__pyx_t_2,&__pyx_t_5,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12};
      __pyx_t_13 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_14 = Py_TYPE(__pyx_t_13)->tp_iternext;
      for (index=0; index < 10; index++) {
        PyObject* item = __pyx_t_14(__pyx_t_13); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_14 = NULL;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L5_unpacking_done:;
    }
    __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v__Y = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v__Z = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_v_alpha = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_self->iter = __pyx_t_15;
    __pyx_v__ = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "clda.pyx":430
 *             logger.info("Loading states...")
 *             _Y, _Z, alpha, self.iter, _, _, _, _, _, _ = pickle.load(open(self.prefix + '.pkl', 'rb'))
 *             for c in range(self.C):             # <<<<<<<<<<<<<<
 *                 for z in range(self.Tc[c]):
 *                     gsl_vector_set(self.alpha[c], z, alpha[c][z])
 */
    __pyx_t_15 = __pyx_v_self->C;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_c = __pyx_t_16;

      /* "clda.pyx":431
 *             _Y, _Z, alpha, self.iter, _, _, _, _, _, _ = pickle.load(open(self.prefix + '.pkl', 'rb'))
 *             for c in range(self.C):
 *                 for z in range(self.Tc[c]):             # <<<<<<<<<<<<<<
 *                     gsl_vector_set(self.alpha[c], z, alpha[c][z])
 *         else:
 */
      __pyx_t_17 = (__pyx_v_self->Tc[__pyx_v_c]);
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_v_z = __pyx_t_18;

        /* "clda.pyx":432
 *             for c in range(self.C):
 *                 for z in range(self.Tc[c]):
 *                     gsl_vector_set(self.alpha[c], z, alpha[c][z])             # <<<<<<<<<<<<<<
 *         else:
 *             self.iter = 0
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_alpha, __pyx_v_c, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_z, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_19 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_19 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        gsl_vector_set((__pyx_v_self->alpha[__pyx_v_c]), __pyx_v_z, __pyx_t_19);
      }
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "clda.pyx":434
 *                     gsl_vector_set(self.alpha[c], z, alpha[c][z])
 *         else:
 *             self.iter = 0             # <<<<<<<<<<<<<<
 *         self.n_iter += self.iter
 * 
 */
    __pyx_v_self->iter = 0;
  }
  __pyx_L3:;

  /* "clda.pyx":435
 *         else:
 *             self.iter = 0
 *         self.n_iter += self.iter             # <<<<<<<<<<<<<<
 * 
 *         self.dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 */
  __pyx_v_self->n_iter = (__pyx_v_self->n_iter + __pyx_v_self->iter);

  /* "clda.pyx":437
 *         self.n_iter += self.iter
 * 
 *         self.dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length             # <<<<<<<<<<<<<<
 *         self.dY = <np.uint8_t**>self.mem.alloc(self.D, sizeof(np.uint8_t*))
 *         self.dZ = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(unsigned int))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->dW = ((__pyx_t_10gsl_matrix_uint *)__pyx_t_20);

  /* "clda.pyx":438
 * 
 *         self.dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 *         self.dY = <np.uint8_t**>self.mem.alloc(self.D, sizeof(np.uint8_t*))             # <<<<<<<<<<<<<<
 *         self.dZ = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 * 
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(__pyx_t_5numpy_uint8_t *))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->dY = ((__pyx_t_5numpy_uint8_t **)__pyx_t_20);

  /* "clda.pyx":439
 *         self.dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 *         self.dY = <np.uint8_t**>self.mem.alloc(self.D, sizeof(np.uint8_t*))
 *         self.dZ = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))             # <<<<<<<<<<<<<<
 * 
 *         self.docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(__pyx_t_5numpy_uint16_t *))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->dZ = ((__pyx_t_5numpy_uint16_t **)__pyx_t_20);

  /* "clda.pyx":441
 *         self.dZ = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 * 
 *         self.docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))             # <<<<<<<<<<<<<<
 *         self.dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 * 
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(__pyx_t_5numpy_uint16_t *))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->docs = ((__pyx_t_5numpy_uint16_t **)__pyx_t_20);

  /* "clda.pyx":442
 * 
 *         self.docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 *         self.dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))             # <<<<<<<<<<<<<<
 * 
 *         self.maxWC = <size_t*>self.mem.alloc(self.C, sizeof(size_t))
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(__pyx_t_5numpy_uint8_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->dC = ((__pyx_t_5numpy_uint8_t *)__pyx_t_20);

  /* "clda.pyx":444
 *         self.dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 * 
 *         self.maxWC = <size_t*>self.mem.alloc(self.C, sizeof(size_t))             # <<<<<<<<<<<<<<
 *         for c in range(self.C):
 *             self.maxWC[c] = 0
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->C, (sizeof(size_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->maxWC = ((size_t *)__pyx_t_20);

  /* "clda.pyx":445
 * 
 *         self.maxWC = <size_t*>self.mem.alloc(self.C, sizeof(size_t))
 *         for c in range(self.C):             # <<<<<<<<<<<<<<
 *             self.maxWC[c] = 0
 *         for d, doc in enumerate(self.pydocs):
 */
  __pyx_t_15 = __pyx_v_self->C;
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
    __pyx_v_c = __pyx_t_16;

    /* "clda.pyx":446
 *         self.maxWC = <size_t*>self.mem.alloc(self.C, sizeof(size_t))
 *         for c in range(self.C):
 *             self.maxWC[c] = 0             # <<<<<<<<<<<<<<
 *         for d, doc in enumerate(self.pydocs):
 *             N = len(doc)
 */
    (__pyx_v_self->maxWC[__pyx_v_c]) = 0;
  }

  /* "clda.pyx":447
 *         for c in range(self.C):
 *             self.maxWC[c] = 0
 *         for d, doc in enumerate(self.pydocs):             # <<<<<<<<<<<<<<
 *             N = len(doc)
 *             c = self.pydC[d]
 */
  __pyx_t_16 = 0;
  __pyx_t_12 = __pyx_v_self->pydocs; __Pyx_INCREF(__pyx_t_12); __pyx_t_21 = 0;
  for (;;) {
    if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_12)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_21); __Pyx_INCREF(__pyx_t_1); __pyx_t_21++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_doc, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_v_d = __pyx_t_16;
    __pyx_t_16 = (__pyx_t_16 + 1);

    /* "clda.pyx":448
 *             self.maxWC[c] = 0
 *         for d, doc in enumerate(self.pydocs):
 *             N = len(doc)             # <<<<<<<<<<<<<<
 *             c = self.pydC[d]
 *             if N > self.maxWC[c]:
 */
    if (unlikely(__pyx_v_doc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_22 = PyList_GET_SIZE(__pyx_v_doc); if (unlikely(__pyx_t_22 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_22); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_N, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "clda.pyx":449
 *         for d, doc in enumerate(self.pydocs):
 *             N = len(doc)
 *             c = self.pydC[d]             # <<<<<<<<<<<<<<
 *             if N > self.maxWC[c]:
 *                 self.maxWC[c] = N
 */
    if (unlikely(__pyx_v_self->pydC == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_18 = __Pyx_PyInt_As_size_t(PyList_GET_ITEM(__pyx_v_self->pydC, __pyx_v_d)); if (unlikely((__pyx_t_18 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c = __pyx_t_18;

    /* "clda.pyx":450
 *             N = len(doc)
 *             c = self.pydC[d]
 *             if N > self.maxWC[c]:             # <<<<<<<<<<<<<<
 *                 self.maxWC[c] = N
 *             self.dW[d] = N
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->maxWC[__pyx_v_c])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyObject_RichCompare(__pyx_v_N, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_3) {

      /* "clda.pyx":451
 *             c = self.pydC[d]
 *             if N > self.maxWC[c]:
 *                 self.maxWC[c] = N             # <<<<<<<<<<<<<<
 *             self.dW[d] = N
 *             self.dC[d] = c
 */
      __pyx_t_18 = __Pyx_PyInt_As_size_t(__pyx_v_N); if (unlikely((__pyx_t_18 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_self->maxWC[__pyx_v_c]) = __pyx_t_18;
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "clda.pyx":452
 *             if N > self.maxWC[c]:
 *                 self.maxWC[c] = N
 *             self.dW[d] = N             # <<<<<<<<<<<<<<
 *             self.dC[d] = c
 *             self.dY[d] = <np.uint8_t*>self.mem.alloc(N, sizeof(np.uint8_t))
 */
    __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_v_N); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->dW[__pyx_v_d]) = __pyx_t_15;

    /* "clda.pyx":453
 *                 self.maxWC[c] = N
 *             self.dW[d] = N
 *             self.dC[d] = c             # <<<<<<<<<<<<<<
 *             self.dY[d] = <np.uint8_t*>self.mem.alloc(N, sizeof(np.uint8_t))
 *             self.dZ[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 */
    (__pyx_v_self->dC[__pyx_v_d]) = __pyx_v_c;

    /* "clda.pyx":454
 *             self.dW[d] = N
 *             self.dC[d] = c
 *             self.dY[d] = <np.uint8_t*>self.mem.alloc(N, sizeof(np.uint8_t))             # <<<<<<<<<<<<<<
 *             self.dZ[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 *             self.docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 */
    __pyx_t_18 = __Pyx_PyInt_As_size_t(__pyx_v_N); if (unlikely((__pyx_t_18 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_t_18, (sizeof(__pyx_t_5numpy_uint8_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->dY[__pyx_v_d]) = ((__pyx_t_5numpy_uint8_t *)__pyx_t_20);

    /* "clda.pyx":455
 *             self.dC[d] = c
 *             self.dY[d] = <np.uint8_t*>self.mem.alloc(N, sizeof(np.uint8_t))
 *             self.dZ[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))             # <<<<<<<<<<<<<<
 *             self.docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 * 
 */
    __pyx_t_18 = __Pyx_PyInt_As_size_t(__pyx_v_N); if (unlikely((__pyx_t_18 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_t_18, (sizeof(__pyx_t_5numpy_uint16_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->dZ[__pyx_v_d]) = ((__pyx_t_5numpy_uint16_t *)__pyx_t_20);

    /* "clda.pyx":456
 *             self.dY[d] = <np.uint8_t*>self.mem.alloc(N, sizeof(np.uint8_t))
 *             self.dZ[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 *             self.docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))             # <<<<<<<<<<<<<<
 * 
 *             if load:
 */
    __pyx_t_18 = __Pyx_PyInt_As_size_t(__pyx_v_N); if (unlikely((__pyx_t_18 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_t_18, (sizeof(__pyx_t_5numpy_uint16_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_self->docs[__pyx_v_d]) = ((__pyx_t_5numpy_uint16_t *)__pyx_t_20);

    /* "clda.pyx":458
 *             self.docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 * 
 *             if load:             # <<<<<<<<<<<<<<
 *                 Y = _Y[d]
 *                 Z = _Z[d]
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_load); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_3) {

      /* "clda.pyx":459
 * 
 *             if load:
 *                 Y = _Y[d]             # <<<<<<<<<<<<<<
 *                 Z = _Z[d]
 *             else:
 */
      if (unlikely(!__pyx_v__Y)) { __Pyx_RaiseUnboundLocalError("_Y"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v__Y, __pyx_v_d, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_Y, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "clda.pyx":460
 *             if load:
 *                 Y = _Y[d]
 *                 Z = _Z[d]             # <<<<<<<<<<<<<<
 *             else:
 *                 Y = np.random.randint(2, size=N)
 */
      if (unlikely(!__pyx_v__Z)) { __Pyx_RaiseUnboundLocalError("_Z"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v__Z, __pyx_v_d, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_Z, __pyx_t_11);
      __pyx_t_11 = 0;
      goto __pyx_L15;
    }
    /*else*/ {

      /* "clda.pyx":462
 *                 Z = _Z[d]
 *             else:
 *                 Y = np.random.randint(2, size=N)             # <<<<<<<<<<<<<<
 *                 Z = np.random.randint(self.Tc[c], size=N)
 * 
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_size, __pyx_v_N) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__16, __pyx_t_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Y, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "clda.pyx":463
 *             else:
 *                 Y = np.random.randint(2, size=N)
 *                 Z = np.random.randint(self.Tc[c], size=N)             # <<<<<<<<<<<<<<
 * 
 *             for n, val in enumerate(zip(doc, Y, Z)):
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_self->Tc[__pyx_v_c])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_size, __pyx_v_N) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Z, __pyx_t_9);
      __pyx_t_9 = 0;
    }
    __pyx_L15:;

    /* "clda.pyx":465
 *                 Z = np.random.randint(self.Tc[c], size=N)
 * 
 *             for n, val in enumerate(zip(doc, Y, Z)):             # <<<<<<<<<<<<<<
 *                 w, y, z = val
 * 
 */
    __pyx_t_18 = 0;
    __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_doc);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_doc);
    __Pyx_GIVEREF(__pyx_v_doc);
    __Pyx_INCREF(__pyx_v_Y);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_Y);
    __Pyx_GIVEREF(__pyx_v_Y);
    __Pyx_INCREF(__pyx_v_Z);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_Z);
    __Pyx_GIVEREF(__pyx_v_Z);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_22 = 0;
      __pyx_t_23 = NULL;
    } else {
      __pyx_t_22 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_23 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_23)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_22); __Pyx_INCREF(__pyx_t_1); __pyx_t_22++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_22); __Pyx_INCREF(__pyx_t_1); __pyx_t_22++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_23(__pyx_t_9);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_v_n = __pyx_t_18;
      __pyx_t_18 = (__pyx_t_18 + 1);

      /* "clda.pyx":466
 * 
 *             for n, val in enumerate(zip(doc, Y, Z)):
 *                 w, y, z = val             # <<<<<<<<<<<<<<
 * 
 *                 self.docs[d][n] = w
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_val))) || (PyList_CheckExact(__pyx_v_val))) {
        PyObject* sequence = __pyx_v_val;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_v_val); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_11 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_11)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 2; __pyx_t_10 = __pyx_t_14(__pyx_t_8); if (unlikely(!__pyx_t_10)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_8), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L19_unpacking_done;
        __pyx_L18_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L19_unpacking_done:;
      }
      __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_25 = __Pyx_PyInt_As_size_t(__pyx_t_11); if (unlikely((__pyx_t_25 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_26 = __Pyx_PyInt_As_size_t(__pyx_t_10); if (unlikely((__pyx_t_26 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_w = __pyx_t_24;
      __pyx_v_y = __pyx_t_25;
      __pyx_v_z = __pyx_t_26;

      /* "clda.pyx":468
 *                 w, y, z = val
 * 
 *                 self.docs[d][n] = w             # <<<<<<<<<<<<<<
 *                 self.dY[d][n] = y
 *                 self.dZ[d][n] = z
 */
      ((__pyx_v_self->docs[__pyx_v_d])[__pyx_v_n]) = __pyx_v_w;

      /* "clda.pyx":469
 * 
 *                 self.docs[d][n] = w
 *                 self.dY[d][n] = y             # <<<<<<<<<<<<<<
 *                 self.dZ[d][n] = z
 * 
 */
      ((__pyx_v_self->dY[__pyx_v_d])[__pyx_v_n]) = __pyx_v_y;

      /* "clda.pyx":470
 *                 self.docs[d][n] = w
 *                 self.dY[d][n] = y
 *                 self.dZ[d][n] = z             # <<<<<<<<<<<<<<
 * 
 *                 self.stat_incr(d, c, w, y, z, self.unit[c])
 */
      ((__pyx_v_self->dZ[__pyx_v_d])[__pyx_v_n]) = __pyx_v_z;

      /* "clda.pyx":472
 *                 self.dZ[d][n] = z
 * 
 *                 self.stat_incr(d, c, w, y, z, self.unit[c])             # <<<<<<<<<<<<<<
 * 
 *         self.histCW = <double**>self.mem.alloc(self.C, sizeof(double*))
 */
      __pyx_t_10 = __pyx_f_4clda_4CLDA_stat_incr(__pyx_v_self, __pyx_v_d, __pyx_v_c, __pyx_v_w, __pyx_v_y, __pyx_v_z, (__pyx_v_self->unit[__pyx_v_c])); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "clda.pyx":465
 *                 Z = np.random.randint(self.Tc[c], size=N)
 * 
 *             for n, val in enumerate(zip(doc, Y, Z)):             # <<<<<<<<<<<<<<
 *                 w, y, z = val
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "clda.pyx":447
 *         for c in range(self.C):
 *             self.maxWC[c] = 0
 *         for d, doc in enumerate(self.pydocs):             # <<<<<<<<<<<<<<
 *             N = len(doc)
 *             c = self.pydC[d]
 */
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "clda.pyx":474
 *                 self.stat_incr(d, c, w, y, z, self.unit[c])
 * 
 *         self.histCW = <double**>self.mem.alloc(self.C, sizeof(double*))             # <<<<<<<<<<<<<<
 *         self.histCZW = <double***>self.mem.alloc(self.C, sizeof(double**))
 *         for c in range(self.C):
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->C, (sizeof(double *))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->histCW = ((double **)__pyx_t_20);

  /* "clda.pyx":475
 * 
 *         self.histCW = <double**>self.mem.alloc(self.C, sizeof(double*))
 *         self.histCZW = <double***>self.mem.alloc(self.C, sizeof(double**))             # <<<<<<<<<<<<<<
 *         for c in range(self.C):
 *             self.histCW[c] = alloc_1d_matrix(self.mem, self.maxWC[c] + 1)
 */
  __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->C, (sizeof(double **))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->histCZW = ((double ***)__pyx_t_20);

  /* "clda.pyx":476
 *         self.histCW = <double**>self.mem.alloc(self.C, sizeof(double*))
 *         self.histCZW = <double***>self.mem.alloc(self.C, sizeof(double**))
 *         for c in range(self.C):             # <<<<<<<<<<<<<<
 *             self.histCW[c] = alloc_1d_matrix(self.mem, self.maxWC[c] + 1)
 *             self.histCZW[c] = alloc_2d_matrix(self.mem, self.Tc[c], self.maxWC[c] + 1)
 */
  __pyx_t_15 = __pyx_v_self->C;
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
    __pyx_v_c = __pyx_t_16;

    /* "clda.pyx":477
 *         self.histCZW = <double***>self.mem.alloc(self.C, sizeof(double**))
 *         for c in range(self.C):
 *             self.histCW[c] = alloc_1d_matrix(self.mem, self.maxWC[c] + 1)             # <<<<<<<<<<<<<<
 *             self.histCZW[c] = alloc_2d_matrix(self.mem, self.Tc[c], self.maxWC[c] + 1)
 *         for d in range(self.D):
 */
    __pyx_t_12 = ((PyObject *)__pyx_v_self->mem);
    __Pyx_INCREF(__pyx_t_12);
    (__pyx_v_self->histCW[__pyx_v_c]) = __pyx_f_4clda_alloc_1d_matrix(((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_12), ((__pyx_v_self->maxWC[__pyx_v_c]) + 1));
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "clda.pyx":478
 *         for c in range(self.C):
 *             self.histCW[c] = alloc_1d_matrix(self.mem, self.maxWC[c] + 1)
 *             self.histCZW[c] = alloc_2d_matrix(self.mem, self.Tc[c], self.maxWC[c] + 1)             # <<<<<<<<<<<<<<
 *         for d in range(self.D):
 *             c = self.dC[d]
 */
    __pyx_t_12 = ((PyObject *)__pyx_v_self->mem);
    __Pyx_INCREF(__pyx_t_12);
    (__pyx_v_self->histCZW[__pyx_v_c]) = __pyx_f_4clda_alloc_2d_matrix(((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_12), (__pyx_v_self->Tc[__pyx_v_c]), ((__pyx_v_self->maxWC[__pyx_v_c]) + 1));
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }

  /* "clda.pyx":479
 *             self.histCW[c] = alloc_1d_matrix(self.mem, self.maxWC[c] + 1)
 *             self.histCZW[c] = alloc_2d_matrix(self.mem, self.Tc[c], self.maxWC[c] + 1)
 *         for d in range(self.D):             # <<<<<<<<<<<<<<
 *             c = self.dC[d]
 *             self.histCW[c][self.dW[d]] += self.unit[c]
 */
  __pyx_t_15 = __pyx_v_self->D;
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
    __pyx_v_d = __pyx_t_16;

    /* "clda.pyx":480
 *             self.histCZW[c] = alloc_2d_matrix(self.mem, self.Tc[c], self.maxWC[c] + 1)
 *         for d in range(self.D):
 *             c = self.dC[d]             # <<<<<<<<<<<<<<
 *             self.histCW[c][self.dW[d]] += self.unit[c]
 * 
 */
    __pyx_v_c = (__pyx_v_self->dC[__pyx_v_d]);

    /* "clda.pyx":481
 *         for d in range(self.D):
 *             c = self.dC[d]
 *             self.histCW[c][self.dW[d]] += self.unit[c]             # <<<<<<<<<<<<<<
 * 
 *         self.pydC =None
 */
    __pyx_t_18 = __pyx_v_c;
    __pyx_t_17 = (__pyx_v_self->dW[__pyx_v_d]);
    ((__pyx_v_self->histCW[__pyx_t_18])[__pyx_t_17]) = (((__pyx_v_self->histCW[__pyx_t_18])[__pyx_t_17]) + (__pyx_v_self->unit[__pyx_v_c]));
  }

  /* "clda.pyx":483
 *             self.histCW[c][self.dW[d]] += self.unit[c]
 * 
 *         self.pydC =None             # <<<<<<<<<<<<<<
 *         self.pydocs = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->pydC);
  __Pyx_DECREF(__pyx_v_self->pydC);
  __pyx_v_self->pydC = ((PyObject*)Py_None);

  /* "clda.pyx":484
 * 
 *         self.pydC =None
 *         self.pydocs = None             # <<<<<<<<<<<<<<
 * 
 *         # testing
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->pydocs);
  __Pyx_DECREF(__pyx_v_self->pydocs);
  __pyx_v_self->pydocs = ((PyObject*)Py_None);

  /* "clda.pyx":487
 * 
 *         # testing
 *         if self.t_pydC:             # <<<<<<<<<<<<<<
 *             self.t_W = 0
 *             self.t_maxWC = 0
 */
  __pyx_t_3 = (__pyx_v_self->t_pydC != Py_None) && (PyList_GET_SIZE(__pyx_v_self->t_pydC) != 0);
  if (__pyx_t_3) {

    /* "clda.pyx":488
 *         # testing
 *         if self.t_pydC:
 *             self.t_W = 0             # <<<<<<<<<<<<<<
 *             self.t_maxWC = 0
 *             self.t_docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 */
    __pyx_v_self->t_W = 0;

    /* "clda.pyx":489
 *         if self.t_pydC:
 *             self.t_W = 0
 *             self.t_maxWC = 0             # <<<<<<<<<<<<<<
 *             self.t_docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 *             self.t_dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 */
    __pyx_v_self->t_maxWC = 0;

    /* "clda.pyx":490
 *             self.t_W = 0
 *             self.t_maxWC = 0
 *             self.t_docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))             # <<<<<<<<<<<<<<
 *             self.t_dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 *             self.t_dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 */
    __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(__pyx_t_5numpy_uint16_t *))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->t_docs = ((__pyx_t_5numpy_uint16_t **)__pyx_t_20);

    /* "clda.pyx":491
 *             self.t_maxWC = 0
 *             self.t_docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 *             self.t_dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))             # <<<<<<<<<<<<<<
 *             self.t_dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 *             for d, doc in enumerate(self.t_pydocs):
 */
    __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(__pyx_t_5numpy_uint8_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->t_dC = ((__pyx_t_5numpy_uint8_t *)__pyx_t_20);

    /* "clda.pyx":492
 *             self.t_docs = <np.uint16_t**>self.mem.alloc(self.D, sizeof(np.uint16_t*))
 *             self.t_dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 *             self.t_dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length             # <<<<<<<<<<<<<<
 *             for d, doc in enumerate(self.t_pydocs):
 *                 N = len(doc)
 */
    __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_self->D, (sizeof(unsigned int))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->t_dW = ((__pyx_t_10gsl_matrix_uint *)__pyx_t_20);

    /* "clda.pyx":493
 *             self.t_dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 *             self.t_dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 *             for d, doc in enumerate(self.t_pydocs):             # <<<<<<<<<<<<<<
 *                 N = len(doc)
 *                 self.t_dW[d] = N
 */
    __pyx_t_16 = 0;
    __pyx_t_12 = __pyx_v_self->t_pydocs; __Pyx_INCREF(__pyx_t_12); __pyx_t_21 = 0;
    for (;;) {
      if (__pyx_t_21 >= PyList_GET_SIZE(__pyx_t_12)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_21); __Pyx_INCREF(__pyx_t_9); __pyx_t_21++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_12, __pyx_t_21); __pyx_t_21++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
      if (!(likely(PyList_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_9)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_XDECREF_SET(__pyx_v_doc, ((PyObject*)__pyx_t_9));
      __pyx_t_9 = 0;
      __pyx_v_d = __pyx_t_16;
      __pyx_t_16 = (__pyx_t_16 + 1);

      /* "clda.pyx":494
 *             self.t_dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 *             for d, doc in enumerate(self.t_pydocs):
 *                 N = len(doc)             # <<<<<<<<<<<<<<
 *                 self.t_dW[d] = N
 *                 self.t_W += N
 */
      if (unlikely(__pyx_v_doc == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_22 = PyList_GET_SIZE(__pyx_v_doc); if (unlikely(__pyx_t_22 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_22); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_N, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "clda.pyx":495
 *             for d, doc in enumerate(self.t_pydocs):
 *                 N = len(doc)
 *                 self.t_dW[d] = N             # <<<<<<<<<<<<<<
 *                 self.t_W += N
 *                 if N > self.t_maxWC:
 */
      __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_v_N); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_self->t_dW[__pyx_v_d]) = __pyx_t_15;

      /* "clda.pyx":496
 *                 N = len(doc)
 *                 self.t_dW[d] = N
 *                 self.t_W += N             # <<<<<<<<<<<<<<
 *                 if N > self.t_maxWC:
 *                     self.t_maxWC = N
 */
      __pyx_t_9 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t_W); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_t_9, __pyx_v_N); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_t_10); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_self->t_W = __pyx_t_15;

      /* "clda.pyx":497
 *                 self.t_dW[d] = N
 *                 self.t_W += N
 *                 if N > self.t_maxWC:             # <<<<<<<<<<<<<<
 *                     self.t_maxWC = N
 *                 self.t_dC[d] = self.t_pydC[d]
 */
      __pyx_t_10 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t_maxWC); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_RichCompare(__pyx_v_N, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_3) {

        /* "clda.pyx":498
 *                 self.t_W += N
 *                 if N > self.t_maxWC:
 *                     self.t_maxWC = N             # <<<<<<<<<<<<<<
 *                 self.t_dC[d] = self.t_pydC[d]
 *                 self.t_docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 */
        __pyx_t_15 = __Pyx_PyInt_As_unsigned_int(__pyx_v_N); if (unlikely((__pyx_t_15 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_self->t_maxWC = __pyx_t_15;
        goto __pyx_L27;
      }
      __pyx_L27:;

      /* "clda.pyx":499
 *                 if N > self.t_maxWC:
 *                     self.t_maxWC = N
 *                 self.t_dC[d] = self.t_pydC[d]             # <<<<<<<<<<<<<<
 *                 self.t_docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 *                 for n, w in enumerate(doc):
 */
      if (unlikely(__pyx_v_self->t_pydC == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_27 = __Pyx_PyInt_As_npy_uint8(PyList_GET_ITEM(__pyx_v_self->t_pydC, __pyx_v_d)); if (unlikely((__pyx_t_27 == (npy_uint8)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_self->t_dC[__pyx_v_d]) = __pyx_t_27;

      /* "clda.pyx":500
 *                     self.t_maxWC = N
 *                 self.t_dC[d] = self.t_pydC[d]
 *                 self.t_docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))             # <<<<<<<<<<<<<<
 *                 for n, w in enumerate(doc):
 *                     self.t_docs[d][n] = w
 */
      __pyx_t_18 = __Pyx_PyInt_As_size_t(__pyx_v_N); if (unlikely((__pyx_t_18 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_20 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_t_18, (sizeof(__pyx_t_5numpy_uint16_t))); if (unlikely(__pyx_t_20 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      (__pyx_v_self->t_docs[__pyx_v_d]) = ((__pyx_t_5numpy_uint16_t *)__pyx_t_20);

      /* "clda.pyx":501
 *                 self.t_dC[d] = self.t_pydC[d]
 *                 self.t_docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 *                 for n, w in enumerate(doc):             # <<<<<<<<<<<<<<
 *                     self.t_docs[d][n] = w
 *             self.t_pydC = None
 */
      __pyx_t_18 = 0;
      __pyx_t_9 = __pyx_v_doc; __Pyx_INCREF(__pyx_t_9); __pyx_t_22 = 0;
      for (;;) {
        if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_22); __Pyx_INCREF(__pyx_t_10); __pyx_t_22++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_10 = PySequence_ITEM(__pyx_t_9, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
        __pyx_t_26 = __Pyx_PyInt_As_size_t(__pyx_t_10); if (unlikely((__pyx_t_26 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_w = __pyx_t_26;
        __pyx_v_n = __pyx_t_18;
        __pyx_t_18 = (__pyx_t_18 + 1);

        /* "clda.pyx":502
 *                 self.t_docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 *                 for n, w in enumerate(doc):
 *                     self.t_docs[d][n] = w             # <<<<<<<<<<<<<<
 *             self.t_pydC = None
 *             self.t_pydocs = None
 */
        ((__pyx_v_self->t_docs[__pyx_v_d])[__pyx_v_n]) = __pyx_v_w;

        /* "clda.pyx":501
 *                 self.t_dC[d] = self.t_pydC[d]
 *                 self.t_docs[d] = <np.uint16_t*>self.mem.alloc(N, sizeof(np.uint16_t))
 *                 for n, w in enumerate(doc):             # <<<<<<<<<<<<<<
 *                     self.t_docs[d][n] = w
 *             self.t_pydC = None
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "clda.pyx":493
 *             self.t_dC = <np.uint8_t*>self.mem.alloc(self.D, sizeof(np.uint8_t))
 *             self.t_dW = <uint*>self.mem.alloc(self.D, sizeof(uint)) # doc length
 *             for d, doc in enumerate(self.t_pydocs):             # <<<<<<<<<<<<<<
 *                 N = len(doc)
 *                 self.t_dW[d] = N
 */
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "clda.pyx":503
 *                 for n, w in enumerate(doc):
 *                     self.t_docs[d][n] = w
 *             self.t_pydC = None             # <<<<<<<<<<<<<<
 *             self.t_pydocs = None
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->t_pydC);
    __Pyx_DECREF(__pyx_v_self->t_pydC);
    __pyx_v_self->t_pydC = ((PyObject*)Py_None);

    /* "clda.pyx":504
 *                     self.t_docs[d][n] = w
 *             self.t_pydC = None
 *             self.t_pydocs = None             # <<<<<<<<<<<<<<
 * 
 *     cdef update_alpha(self, size_t c):
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->t_pydocs);
    __Pyx_DECREF(__pyx_v_self->t_pydocs);
    __pyx_v_self->t_pydocs = ((PyObject*)Py_None);
    goto __pyx_L24;
  }
  __pyx_L24:;

  /* "clda.pyx":418
 *             gsl_2d_matrix_incr(self.nCZ, c, z - self.T0, val)
 * 
 *     def initialize(self, load=False):             # <<<<<<<<<<<<<<
 *         logger.info("Initializing...")
 *         cdef size_t d
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("clda.CLDA.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_doc);
  __Pyx_XDECREF(__pyx_v__Y);
  __Pyx_XDECREF(__pyx_v__Z);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":506
 *             self.t_pydocs = None
 * 
 *     cdef update_alpha(self, size_t c):             # <<<<<<<<<<<<<<
 *         cdef size_t n_iter = 5
 *         cdef double shape = 1.001
 */

static PyObject *__pyx_f_4clda_4CLDA_update_alpha(struct __pyx_obj_4clda_CLDA *__pyx_v_self, size_t __pyx_v_c) {
  size_t __pyx_v_n_iter;
  double __pyx_v_shape;
  double __pyx_v_scale;
  double __pyx_v_unit;
  double *__pyx_v_alpha;
  size_t __pyx_v_i;
  size_t __pyx_v_k;
  size_t __pyx_v_Tc;
  double __pyx_v_oldAlphaK;
  double __pyx_v_denominator;
  double __pyx_v_currentDigamma;
  double __pyx_v_alphaSum;
  double **__pyx_v_histZW;
  double *__pyx_v_histW;
  size_t __pyx_v_maxW;
  CYTHON_UNUSED __pyx_t_10gsl_matrix_uint *__pyx_v_count;
  __pyx_t_10gsl_matrix_uint __pyx_v_nonZeroLimit;
  __pyx_t_10gsl_matrix_uint *__pyx_v_nonZeroLimits;
  double *__pyx_v_histogram;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  void *__pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  long __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_alpha", 0);

  /* "clda.pyx":507
 * 
 *     cdef update_alpha(self, size_t c):
 *         cdef size_t n_iter = 5             # <<<<<<<<<<<<<<
 *         cdef double shape = 1.001
 *         cdef double scale = 1.0
 */
  __pyx_v_n_iter = 5;

  /* "clda.pyx":508
 *     cdef update_alpha(self, size_t c):
 *         cdef size_t n_iter = 5
 *         cdef double shape = 1.001             # <<<<<<<<<<<<<<
 *         cdef double scale = 1.0
 *         cdef double unit = self.unit[c]
 */
  __pyx_v_shape = 1.001;

  /* "clda.pyx":509
 *         cdef size_t n_iter = 5
 *         cdef double shape = 1.001
 *         cdef double scale = 1.0             # <<<<<<<<<<<<<<
 *         cdef double unit = self.unit[c]
 * 
 */
  __pyx_v_scale = 1.0;

  /* "clda.pyx":510
 *         cdef double shape = 1.001
 *         cdef double scale = 1.0
 *         cdef double unit = self.unit[c]             # <<<<<<<<<<<<<<
 * 
 *         cdef double *alpha = self.alpha[c].data
 */
  __pyx_v_unit = (__pyx_v_self->unit[__pyx_v_c]);

  /* "clda.pyx":512
 *         cdef double unit = self.unit[c]
 * 
 *         cdef double *alpha = self.alpha[c].data             # <<<<<<<<<<<<<<
 *         cdef size_t i, j, k
 *         cdef size_t Tc = self.Tc[c]
 */
  __pyx_t_1 = (__pyx_v_self->alpha[__pyx_v_c])->data;
  __pyx_v_alpha = __pyx_t_1;

  /* "clda.pyx":514
 *         cdef double *alpha = self.alpha[c].data
 *         cdef size_t i, j, k
 *         cdef size_t Tc = self.Tc[c]             # <<<<<<<<<<<<<<
 * 
 *         cdef double oldAlphaK
 */
  __pyx_v_Tc = (__pyx_v_self->Tc[__pyx_v_c]);

  /* "clda.pyx":520
 *         cdef double currentDigamma
 * 
 *         cdef double alphaSum = 0             # <<<<<<<<<<<<<<
 *         for i in range(Tc):
 *             alphaSum += alpha[i]
 */
  __pyx_v_alphaSum = 0.0;

  /* "clda.pyx":521
 * 
 *         cdef double alphaSum = 0
 *         for i in range(Tc):             # <<<<<<<<<<<<<<
 *             alphaSum += alpha[i]
 * 
 */
  __pyx_t_2 = __pyx_v_Tc;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "clda.pyx":522
 *         cdef double alphaSum = 0
 *         for i in range(Tc):
 *             alphaSum += alpha[i]             # <<<<<<<<<<<<<<
 * 
 *         cdef double **histZW = self.histCZW[c]
 */
    __pyx_v_alphaSum = (__pyx_v_alphaSum + (__pyx_v_alpha[__pyx_v_i]));
  }

  /* "clda.pyx":524
 *             alphaSum += alpha[i]
 * 
 *         cdef double **histZW = self.histCZW[c]             # <<<<<<<<<<<<<<
 *         cdef double *histW = self.histCW[c]
 *         cdef size_t maxW = self.maxWC[c]
 */
  __pyx_v_histZW = (__pyx_v_self->histCZW[__pyx_v_c]);

  /* "clda.pyx":525
 * 
 *         cdef double **histZW = self.histCZW[c]
 *         cdef double *histW = self.histCW[c]             # <<<<<<<<<<<<<<
 *         cdef size_t maxW = self.maxWC[c]
 *         cdef uint *count = <uint*>self.mem.alloc(Tc, sizeof(uint))
 */
  __pyx_v_histW = (__pyx_v_self->histCW[__pyx_v_c]);

  /* "clda.pyx":526
 *         cdef double **histZW = self.histCZW[c]
 *         cdef double *histW = self.histCW[c]
 *         cdef size_t maxW = self.maxWC[c]             # <<<<<<<<<<<<<<
 *         cdef uint *count = <uint*>self.mem.alloc(Tc, sizeof(uint))
 *         cdef uint nonZeroLimit
 */
  __pyx_v_maxW = (__pyx_v_self->maxWC[__pyx_v_c]);

  /* "clda.pyx":527
 *         cdef double *histW = self.histCW[c]
 *         cdef size_t maxW = self.maxWC[c]
 *         cdef uint *count = <uint*>self.mem.alloc(Tc, sizeof(uint))             # <<<<<<<<<<<<<<
 *         cdef uint nonZeroLimit
 *         cdef uint *nonZeroLimits = <uint*>self.mem.alloc(Tc, sizeof(uint))
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_Tc, (sizeof(unsigned int))); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((__pyx_t_10gsl_matrix_uint *)__pyx_t_4);

  /* "clda.pyx":529
 *         cdef uint *count = <uint*>self.mem.alloc(Tc, sizeof(uint))
 *         cdef uint nonZeroLimit
 *         cdef uint *nonZeroLimits = <uint*>self.mem.alloc(Tc, sizeof(uint))             # <<<<<<<<<<<<<<
 *         cdef double *histogram
 * 
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, __pyx_v_Tc, (sizeof(unsigned int))); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nonZeroLimits = ((__pyx_t_10gsl_matrix_uint *)__pyx_t_4);

  /* "clda.pyx":532
 *         cdef double *histogram
 * 
 *         for i in range(Tc):             # <<<<<<<<<<<<<<
 *             nonZeroLimits[i] = 0
 * 
 */
  __pyx_t_2 = __pyx_v_Tc;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "clda.pyx":533
 * 
 *         for i in range(Tc):
 *             nonZeroLimits[i] = 0             # <<<<<<<<<<<<<<
 * 
 *         count_hist(histZW, nonZeroLimits, c, unit, maxW, Tc, self.D, self.dC, self.dW, self.dZ)
 */
    (__pyx_v_nonZeroLimits[__pyx_v_i]) = 0;
  }

  /* "clda.pyx":535
 *             nonZeroLimits[i] = 0
 * 
 *         count_hist(histZW, nonZeroLimits, c, unit, maxW, Tc, self.D, self.dC, self.dW, self.dZ)             # <<<<<<<<<<<<<<
 * 
 *         for k in range(n_iter):
 */
  count_hist(__pyx_v_histZW, __pyx_v_nonZeroLimits, __pyx_v_c, __pyx_v_unit, __pyx_v_maxW, __pyx_v_Tc, __pyx_v_self->D, __pyx_v_self->dC, __pyx_v_self->dW, __pyx_v_self->dZ);

  /* "clda.pyx":537
 *         count_hist(histZW, nonZeroLimits, c, unit, maxW, Tc, self.D, self.dC, self.dW, self.dZ)
 * 
 *         for k in range(n_iter):             # <<<<<<<<<<<<<<
 *             denominator = 0
 *             currentDigamma = 0
 */
  __pyx_t_2 = __pyx_v_n_iter;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_k = __pyx_t_3;

    /* "clda.pyx":538
 * 
 *         for k in range(n_iter):
 *             denominator = 0             # <<<<<<<<<<<<<<
 *             currentDigamma = 0
 * 
 */
    __pyx_v_denominator = 0.0;

    /* "clda.pyx":539
 *         for k in range(n_iter):
 *             denominator = 0
 *             currentDigamma = 0             # <<<<<<<<<<<<<<
 * 
 *             for i in range(1, maxW + 1):
 */
    __pyx_v_currentDigamma = 0.0;

    /* "clda.pyx":541
 *             currentDigamma = 0
 * 
 *             for i in range(1, maxW + 1):             # <<<<<<<<<<<<<<
 *                 currentDigamma += 1 / (alphaSum + i - 1)
 *                 denominator += histW[i] * currentDigamma
 */
    __pyx_t_5 = (__pyx_v_maxW + 1);
    for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "clda.pyx":542
 * 
 *             for i in range(1, maxW + 1):
 *                 currentDigamma += 1 / (alphaSum + i - 1)             # <<<<<<<<<<<<<<
 *                 denominator += histW[i] * currentDigamma
 * 
 */
      __pyx_v_currentDigamma = (__pyx_v_currentDigamma + (1.0 / ((__pyx_v_alphaSum + __pyx_v_i) - 1.0)));

      /* "clda.pyx":543
 *             for i in range(1, maxW + 1):
 *                 currentDigamma += 1 / (alphaSum + i - 1)
 *                 denominator += histW[i] * currentDigamma             # <<<<<<<<<<<<<<
 * 
 *             denominator -= 1/scale
 */
      __pyx_v_denominator = (__pyx_v_denominator + ((__pyx_v_histW[__pyx_v_i]) * __pyx_v_currentDigamma));
    }

    /* "clda.pyx":545
 *                 denominator += histW[i] * currentDigamma
 * 
 *             denominator -= 1/scale             # <<<<<<<<<<<<<<
 * 
 *             alphaSum = 0
 */
    __pyx_v_denominator = (__pyx_v_denominator - (1.0 / __pyx_v_scale));

    /* "clda.pyx":547
 *             denominator -= 1/scale
 * 
 *             alphaSum = 0             # <<<<<<<<<<<<<<
 * 
 *             for k in range(Tc):
 */
    __pyx_v_alphaSum = 0.0;

    /* "clda.pyx":549
 *             alphaSum = 0
 * 
 *             for k in range(Tc):             # <<<<<<<<<<<<<<
 *                 nonZeroLimit = nonZeroLimits[k]
 * 
 */
    __pyx_t_5 = __pyx_v_Tc;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_k = __pyx_t_6;

      /* "clda.pyx":550
 * 
 *             for k in range(Tc):
 *                 nonZeroLimit = nonZeroLimits[k]             # <<<<<<<<<<<<<<
 * 
 *                 oldAlphaK = alpha[k]
 */
      __pyx_v_nonZeroLimit = (__pyx_v_nonZeroLimits[__pyx_v_k]);

      /* "clda.pyx":552
 *                 nonZeroLimit = nonZeroLimits[k]
 * 
 *                 oldAlphaK = alpha[k]             # <<<<<<<<<<<<<<
 *                 alpha[k] = 0
 *                 currentDigamma = 0
 */
      __pyx_v_oldAlphaK = (__pyx_v_alpha[__pyx_v_k]);

      /* "clda.pyx":553
 * 
 *                 oldAlphaK = alpha[k]
 *                 alpha[k] = 0             # <<<<<<<<<<<<<<
 *                 currentDigamma = 0
 * 
 */
      (__pyx_v_alpha[__pyx_v_k]) = 0.0;

      /* "clda.pyx":554
 *                 oldAlphaK = alpha[k]
 *                 alpha[k] = 0
 *                 currentDigamma = 0             # <<<<<<<<<<<<<<
 * 
 *                 histogram = histZW[k]
 */
      __pyx_v_currentDigamma = 0.0;

      /* "clda.pyx":556
 *                 currentDigamma = 0
 * 
 *                 histogram = histZW[k]             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(1, nonZeroLimit + 1):
 */
      __pyx_v_histogram = (__pyx_v_histZW[__pyx_v_k]);

      /* "clda.pyx":558
 *                 histogram = histZW[k]
 * 
 *                 for i in range(1, nonZeroLimit + 1):             # <<<<<<<<<<<<<<
 *                     currentDigamma += 1 / (oldAlphaK + i - 1)
 *                     alpha[k] += histogram[i] * currentDigamma
 */
      __pyx_t_7 = (__pyx_v_nonZeroLimit + 1);
      for (__pyx_t_8 = 1; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "clda.pyx":559
 * 
 *                 for i in range(1, nonZeroLimit + 1):
 *                     currentDigamma += 1 / (oldAlphaK + i - 1)             # <<<<<<<<<<<<<<
 *                     alpha[k] += histogram[i] * currentDigamma
 * 
 */
        __pyx_v_currentDigamma = (__pyx_v_currentDigamma + (1.0 / ((__pyx_v_oldAlphaK + __pyx_v_i) - 1.0)));

        /* "clda.pyx":560
 *                 for i in range(1, nonZeroLimit + 1):
 *                     currentDigamma += 1 / (oldAlphaK + i - 1)
 *                     alpha[k] += histogram[i] * currentDigamma             # <<<<<<<<<<<<<<
 * 
 *                 alpha[k] = oldAlphaK * (alpha[k] + shape) / denominator
 */
        __pyx_t_9 = __pyx_v_k;
        (__pyx_v_alpha[__pyx_t_9]) = ((__pyx_v_alpha[__pyx_t_9]) + ((__pyx_v_histogram[__pyx_v_i]) * __pyx_v_currentDigamma));
      }

      /* "clda.pyx":562
 *                     alpha[k] += histogram[i] * currentDigamma
 * 
 *                 alpha[k] = oldAlphaK * (alpha[k] + shape) / denominator             # <<<<<<<<<<<<<<
 *                 alphaSum += alpha[k]
 *         logger.info("%d alpha:\t%s" % (c, ', '.join(['%.5f' % alpha[i] for i in range(5)])))
 */
      (__pyx_v_alpha[__pyx_v_k]) = ((__pyx_v_oldAlphaK * ((__pyx_v_alpha[__pyx_v_k]) + __pyx_v_shape)) / __pyx_v_denominator);

      /* "clda.pyx":563
 * 
 *                 alpha[k] = oldAlphaK * (alpha[k] + shape) / denominator
 *                 alphaSum += alpha[k]             # <<<<<<<<<<<<<<
 *         logger.info("%d alpha:\t%s" % (c, ', '.join(['%.5f' % alpha[i] for i in range(5)])))
 * 
 */
      __pyx_v_alphaSum = (__pyx_v_alphaSum + (__pyx_v_alpha[__pyx_v_k]));
    }
  }

  /* "clda.pyx":564
 *                 alpha[k] = oldAlphaK * (alpha[k] + shape) / denominator
 *                 alphaSum += alpha[k]
 *         logger.info("%d alpha:\t%s" % (c, ', '.join(['%.5f' % alpha[i] for i in range(5)])))             # <<<<<<<<<<<<<<
 * 
 *         if alphaSum < 0 or alphaSum / Tc > 1000:
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_info); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_v_c); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  for (__pyx_t_2 = 0; __pyx_t_2 < 5; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;
    __pyx_t_14 = PyFloat_FromDouble((__pyx_v_alpha[__pyx_v_i])); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyString_Format(__pyx_kp_s_5f, __pyx_t_14); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_15))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __pyx_t_15 = __Pyx_PyString_Join(__pyx_kp_s__7, __pyx_t_13); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyString_Format(__pyx_kp_s_d_alpha_s, __pyx_t_13); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (!__pyx_t_13) {
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_15); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_10);
  } else {
    __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_13); __Pyx_GIVEREF(__pyx_t_13); __pyx_t_13 = NULL;
    PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_15);
    __pyx_t_15 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_11, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "clda.pyx":566
 *         logger.info("%d alpha:\t%s" % (c, ', '.join(['%.5f' % alpha[i] for i in range(5)])))
 * 
 *         if alphaSum < 0 or alphaSum / Tc > 1000:             # <<<<<<<<<<<<<<
 *             raise ValueError('alpha became unstable, terminating..')
 * 
 */
  __pyx_t_17 = ((__pyx_v_alphaSum < 0.0) != 0);
  if (!__pyx_t_17) {
    goto __pyx_L19_next_or;
  } else {
    __pyx_t_16 = __pyx_t_17;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_L19_next_or:;
  __pyx_t_17 = (((__pyx_v_alphaSum / __pyx_v_Tc) > 1000.0) != 0);
  __pyx_t_16 = __pyx_t_17;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_16) {

    /* "clda.pyx":567
 * 
 *         if alphaSum < 0 or alphaSum / Tc > 1000:
 *             raise ValueError('alpha became unstable, terminating..')             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, resample=False, single=True, T0=None, eval_sigma=False):
 */
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "clda.pyx":506
 *             self.t_pydocs = None
 * 
 *     cdef update_alpha(self, size_t c):             # <<<<<<<<<<<<<<
 *         cdef size_t n_iter = 5
 *         cdef double shape = 1.001
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("clda.CLDA.update_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":569
 *             raise ValueError('alpha became unstable, terminating..')
 * 
 *     def evaluate(self, resample=False, single=True, T0=None, eval_sigma=False):             # <<<<<<<<<<<<<<
 * 
 *         cdef double scale = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_4clda_4CLDA_9evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4clda_4CLDA_9evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_resample = 0;
  PyObject *__pyx_v_single = 0;
  PyObject *__pyx_v_T0 = 0;
  PyObject *__pyx_v_eval_sigma = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_resample,&__pyx_n_s_single,&__pyx_n_s_T0,&__pyx_n_s_eval_sigma,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_True);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resample);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_single);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_T0);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eval_sigma);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_resample = values[0];
    __pyx_v_single = values[1];
    __pyx_v_T0 = values[2];
    __pyx_v_eval_sigma = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("clda.CLDA.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4clda_4CLDA_8evaluate(((struct __pyx_obj_4clda_CLDA *)__pyx_v_self), __pyx_v_resample, __pyx_v_single, __pyx_v_T0, __pyx_v_eval_sigma);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4clda_4CLDA_8evaluate(struct __pyx_obj_4clda_CLDA *__pyx_v_self, PyObject *__pyx_v_resample, PyObject *__pyx_v_single, PyObject *__pyx_v_T0, PyObject *__pyx_v_eval_sigma) {
  double __pyx_v_scale;
  size_t __pyx_v_w;
  size_t __pyx_v_y;
  size_t __pyx_v_z;
  size_t __pyx_v_c;
  size_t __pyx_v_d;
  size_t __pyx_v_k;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_v_alpha = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  __pyx_t_10gsl_matrix_uint __pyx_v_n;
  PyObject *__pyx_v_ys = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_b = NULL;
  double __pyx_v_loglik;
  double __pyx_v_perplexity;
  int __pyx_v_f;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  __pyx_t_10gsl_matrix_uint __pyx_t_8;
  size_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *(*__pyx_t_20)(PyObject *);
  __pyx_t_10gsl_matrix_uint __pyx_t_21;
  size_t __pyx_t_22;
  __pyx_t_10gsl_matrix_uint __pyx_t_23;
  size_t __pyx_t_24;
  double __pyx_t_25;
  __pyx_t_10gsl_matrix_uint __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "clda.pyx":571
 *     def evaluate(self, resample=False, single=True, T0=None, eval_sigma=False):
 * 
 *         cdef double scale = 0             # <<<<<<<<<<<<<<
 *         cdef size_t w, y, z, c, d, k
 *         if not single:
 */
  __pyx_v_scale = 0.0;

  /* "clda.pyx":573
 *         cdef double scale = 0
 *         cdef size_t w, y, z, c, d, k
 *         if not single:             # <<<<<<<<<<<<<<
 *             assert self.save_interval > 0
 *             gsl_2d_matrix_set_all(self.alpha, self.C, 0)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_single); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "clda.pyx":574
 *         cdef size_t w, y, z, c, d, k
 *         if not single:
 *             assert self.save_interval > 0             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_set_all(self.alpha, self.C, 0)
 *             gsl_2d_matrix_set_all(self.nDZ, self.D, 0)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_self->save_interval > 0) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "clda.pyx":575
 *         if not single:
 *             assert self.save_interval > 0
 *             gsl_2d_matrix_set_all(self.alpha, self.C, 0)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_set_all(self.nDZ, self.D, 0)
 *             gsl_2d_matrix_set_all(self.nYZ, 2, 0)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(__pyx_v_self->alpha, __pyx_v_self->C, 0.0);

    /* "clda.pyx":576
 *             assert self.save_interval > 0
 *             gsl_2d_matrix_set_all(self.alpha, self.C, 0)
 *             gsl_2d_matrix_set_all(self.nDZ, self.D, 0)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_set_all(self.nYZ, 2, 0)
 *             gsl_vector_set_all(self.nZ, 0)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(__pyx_v_self->nDZ, __pyx_v_self->D, 0.0);

    /* "clda.pyx":577
 *             gsl_2d_matrix_set_all(self.alpha, self.C, 0)
 *             gsl_2d_matrix_set_all(self.nDZ, self.D, 0)
 *             gsl_2d_matrix_set_all(self.nYZ, 2, 0)             # <<<<<<<<<<<<<<
 *             gsl_vector_set_all(self.nZ, 0)
 *             gsl_2d_matrix_set_all(self.n0WZ, self.V, 0)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(__pyx_v_self->nYZ, 2, 0.0);

    /* "clda.pyx":578
 *             gsl_2d_matrix_set_all(self.nDZ, self.D, 0)
 *             gsl_2d_matrix_set_all(self.nYZ, 2, 0)
 *             gsl_vector_set_all(self.nZ, 0)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_set_all(self.n0WZ, self.V, 0)
 *             gsl_vector_set_all(self.n0Z, 0)
 */
    gsl_vector_set_all(__pyx_v_self->nZ, 0.0);

    /* "clda.pyx":579
 *             gsl_2d_matrix_set_all(self.nYZ, 2, 0)
 *             gsl_vector_set_all(self.nZ, 0)
 *             gsl_2d_matrix_set_all(self.n0WZ, self.V, 0)             # <<<<<<<<<<<<<<
 *             gsl_vector_set_all(self.n0Z, 0)
 *             gsl_3d_matrix_set_all(self.n1CWZ, self.C, self.V, 0)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(__pyx_v_self->n0WZ, __pyx_v_self->V, 0.0);

    /* "clda.pyx":580
 *             gsl_vector_set_all(self.nZ, 0)
 *             gsl_2d_matrix_set_all(self.n0WZ, self.V, 0)
 *             gsl_vector_set_all(self.n0Z, 0)             # <<<<<<<<<<<<<<
 *             gsl_3d_matrix_set_all(self.n1CWZ, self.C, self.V, 0)
 *             gsl_2d_matrix_set_all(self.n1CZ, self.C, 0)
 */
    gsl_vector_set_all(__pyx_v_self->n0Z, 0.0);

    /* "clda.pyx":581
 *             gsl_2d_matrix_set_all(self.n0WZ, self.V, 0)
 *             gsl_vector_set_all(self.n0Z, 0)
 *             gsl_3d_matrix_set_all(self.n1CWZ, self.C, self.V, 0)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_set_all(self.n1CZ, self.C, 0)
 *             for i in range(self.C):
 */
    __pyx_f_10gsl_matrix_gsl_3d_matrix_set_all(__pyx_v_self->n1CWZ, __pyx_v_self->C, __pyx_v_self->V, 0.0);

    /* "clda.pyx":582
 *             gsl_vector_set_all(self.n0Z, 0)
 *             gsl_3d_matrix_set_all(self.n1CWZ, self.C, self.V, 0)
 *             gsl_2d_matrix_set_all(self.n1CZ, self.C, 0)             # <<<<<<<<<<<<<<
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(__pyx_v_self->n1CZ, __pyx_v_self->C, 0.0);

    /* "clda.pyx":583
 *             gsl_3d_matrix_set_all(self.n1CWZ, self.C, self.V, 0)
 *             gsl_2d_matrix_set_all(self.n1CZ, self.C, 0)
 *             for i in range(self.C):             # <<<<<<<<<<<<<<
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->C); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "clda.pyx":584
 *             gsl_2d_matrix_set_all(self.n1CZ, self.C, 0)
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:             # <<<<<<<<<<<<<<
 *                     continue
 *                 gsl_vector_set_all(self.nCZ[i], 0)
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = ((((__pyx_v_self->Tc[__pyx_t_7]) - __pyx_v_self->T0) <= 0) != 0);
      if (__pyx_t_2) {

        /* "clda.pyx":585
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue             # <<<<<<<<<<<<<<
 *                 gsl_vector_set_all(self.nCZ[i], 0)
 *                 gsl_2d_matrix_set_all(self.nCWZ[i], self.V, 0)
 */
        goto __pyx_L4_continue;
      }

      /* "clda.pyx":586
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 *                 gsl_vector_set_all(self.nCZ[i], 0)             # <<<<<<<<<<<<<<
 *                 gsl_2d_matrix_set_all(self.nCWZ[i], self.V, 0)
 * 
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      gsl_vector_set_all((__pyx_v_self->nCZ[__pyx_t_7]), 0.0);

      /* "clda.pyx":587
 *                     continue
 *                 gsl_vector_set_all(self.nCZ[i], 0)
 *                 gsl_2d_matrix_set_all(self.nCWZ[i], self.V, 0)             # <<<<<<<<<<<<<<
 * 
 *             for k in range(self.n_iter):
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all((__pyx_v_self->nCWZ[__pyx_t_7]), __pyx_v_self->V, 0.0);

      /* "clda.pyx":583
 *             gsl_3d_matrix_set_all(self.n1CWZ, self.C, self.V, 0)
 *             gsl_2d_matrix_set_all(self.n1CZ, self.C, 0)
 *             for i in range(self.C):             # <<<<<<<<<<<<<<
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 */
      __pyx_L4_continue:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "clda.pyx":589
 *                 gsl_2d_matrix_set_all(self.nCWZ[i], self.V, 0)
 * 
 *             for k in range(self.n_iter):             # <<<<<<<<<<<<<<
 *                 if k >= self.burn_in and k % self.save_interval == 0:
 *                     scale += 1
 */
    __pyx_t_8 = __pyx_v_self->n_iter;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "clda.pyx":590
 * 
 *             for k in range(self.n_iter):
 *                 if k >= self.burn_in and k % self.save_interval == 0:             # <<<<<<<<<<<<<<
 *                     scale += 1
 *                     Y, Z, alpha, _, _, _, _, _, _, _ = pickle.load(open('%s-%04d.pkl' % (self.prefix, k), 'rb'))
 */
      __pyx_t_1 = ((__pyx_v_k >= __pyx_v_self->burn_in) != 0);
      if (__pyx_t_1) {
        goto __pyx_L11_next_and;
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_L11_next_and:;
      __pyx_t_1 = (((__pyx_v_k % __pyx_v_self->save_interval) == 0) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_2) {

        /* "clda.pyx":591
 *             for k in range(self.n_iter):
 *                 if k >= self.burn_in and k % self.save_interval == 0:
 *                     scale += 1             # <<<<<<<<<<<<<<
 *                     Y, Z, alpha, _, _, _, _, _, _, _ = pickle.load(open('%s-%04d.pkl' % (self.prefix, k), 'rb'))
 *                     for c in range(self.C):
 */
        __pyx_v_scale = (__pyx_v_scale + 1.0);

        /* "clda.pyx":592
 *                 if k >= self.burn_in and k % self.save_interval == 0:
 *                     scale += 1
 *                     Y, Z, alpha, _, _, _, _, _, _, _ = pickle.load(open('%s-%04d.pkl' % (self.prefix, k), 'rb'))             # <<<<<<<<<<<<<<
 *                     for c in range(self.C):
 *                         for z in range(self.Tc[c]):
 */
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pickle); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_load); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_k); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_self->prefix);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_self->prefix);
        __Pyx_GIVEREF(__pyx_v_self->prefix);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_04d_pkl, __pyx_t_11); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_rb);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_n_s_rb);
        __Pyx_GIVEREF(__pyx_n_s_rb);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __Pyx_GIVEREF(__pyx_t_11); __pyx_t_11 = NULL;
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 10)) {
            if (size > 10) __Pyx_RaiseTooManyValuesError(10);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 4); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 5); 
            __pyx_t_15 = PyTuple_GET_ITEM(sequence, 6); 
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 7); 
            __pyx_t_17 = PyTuple_GET_ITEM(sequence, 8); 
            __pyx_t_18 = PyTuple_GET_ITEM(sequence, 9); 
          } else {
            __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 4); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 5); 
            __pyx_t_15 = PyList_GET_ITEM(sequence, 6); 
            __pyx_t_16 = PyList_GET_ITEM(sequence, 7); 
            __pyx_t_17 = PyList_GET_ITEM(sequence, 8); 
            __pyx_t_18 = PyList_GET_ITEM(sequence, 9); 
          }
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_18);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[10] = {&__pyx_t_10,&__pyx_t_12,&__pyx_t_3,&__pyx_t_11,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18};
            for (i=0; i < 10; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[10] = {&__pyx_t_10,&__pyx_t_12,&__pyx_t_3,&__pyx_t_11,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18};
          __pyx_t_19 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_20 = Py_TYPE(__pyx_t_19)->tp_iternext;
          for (index=0; index < 10; index++) {
            PyObject* item = __pyx_t_20(__pyx_t_19); if (unlikely(!item)) goto __pyx_L12_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_20(__pyx_t_19), 10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_20 = NULL;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          goto __pyx_L13_unpacking_done;
          __pyx_L12_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __pyx_t_20 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_L13_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_Y, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Z, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_alpha, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_DECREF_SET(__pyx_v__, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_DECREF_SET(__pyx_v__, __pyx_t_14);
        __pyx_t_14 = 0;
        __Pyx_DECREF_SET(__pyx_v__, __pyx_t_15);
        __pyx_t_15 = 0;
        __Pyx_DECREF_SET(__pyx_v__, __pyx_t_16);
        __pyx_t_16 = 0;
        __Pyx_DECREF_SET(__pyx_v__, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_DECREF_SET(__pyx_v__, __pyx_t_18);
        __pyx_t_18 = 0;

        /* "clda.pyx":593
 *                     scale += 1
 *                     Y, Z, alpha, _, _, _, _, _, _, _ = pickle.load(open('%s-%04d.pkl' % (self.prefix, k), 'rb'))
 *                     for c in range(self.C):             # <<<<<<<<<<<<<<
 *                         for z in range(self.Tc[c]):
 *                             gsl_1d_matrix_incr(self.alpha[c], z, alpha[c][z])
 */
        __pyx_t_21 = __pyx_v_self->C;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
          __pyx_v_c = __pyx_t_22;

          /* "clda.pyx":594
 *                     Y, Z, alpha, _, _, _, _, _, _, _ = pickle.load(open('%s-%04d.pkl' % (self.prefix, k), 'rb'))
 *                     for c in range(self.C):
 *                         for z in range(self.Tc[c]):             # <<<<<<<<<<<<<<
 *                             gsl_1d_matrix_incr(self.alpha[c], z, alpha[c][z])
 *                     for d in range(self.D):
 */
          __pyx_t_23 = (__pyx_v_self->Tc[__pyx_v_c]);
          for (__pyx_t_24 = 0; __pyx_t_24 < __pyx_t_23; __pyx_t_24+=1) {
            __pyx_v_z = __pyx_t_24;

            /* "clda.pyx":595
 *                     for c in range(self.C):
 *                         for z in range(self.Tc[c]):
 *                             gsl_1d_matrix_incr(self.alpha[c], z, alpha[c][z])             # <<<<<<<<<<<<<<
 *                     for d in range(self.D):
 *                         c = self.dC[d]
 */
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_alpha, __pyx_v_c, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_z, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_18 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_25 = __pyx_PyFloat_AsDouble(__pyx_t_18); if (unlikely((__pyx_t_25 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_f_10gsl_matrix_gsl_1d_matrix_incr((__pyx_v_self->alpha[__pyx_v_c]), __pyx_v_z, __pyx_t_25);
          }
        }

        /* "clda.pyx":596
 *                         for z in range(self.Tc[c]):
 *                             gsl_1d_matrix_incr(self.alpha[c], z, alpha[c][z])
 *                     for d in range(self.D):             # <<<<<<<<<<<<<<
 *                         c = self.dC[d]
 *                         for n in range(self.dW[d]):
 */
        __pyx_t_21 = __pyx_v_self->D;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
          __pyx_v_d = __pyx_t_22;

          /* "clda.pyx":597
 *                             gsl_1d_matrix_incr(self.alpha[c], z, alpha[c][z])
 *                     for d in range(self.D):
 *                         c = self.dC[d]             # <<<<<<<<<<<<<<
 *                         for n in range(self.dW[d]):
 *                             w = self.docs[d][n]
 */
          __pyx_v_c = (__pyx_v_self->dC[__pyx_v_d]);

          /* "clda.pyx":598
 *                     for d in range(self.D):
 *                         c = self.dC[d]
 *                         for n in range(self.dW[d]):             # <<<<<<<<<<<<<<
 *                             w = self.docs[d][n]
 *                             y = Y[d][n]
 */
          __pyx_t_23 = (__pyx_v_self->dW[__pyx_v_d]);
          for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_23; __pyx_t_26+=1) {
            __pyx_v_n = __pyx_t_26;

            /* "clda.pyx":599
 *                         c = self.dC[d]
 *                         for n in range(self.dW[d]):
 *                             w = self.docs[d][n]             # <<<<<<<<<<<<<<
 *                             y = Y[d][n]
 *                             z = Z[d][n]
 */
            __pyx_v_w = ((__pyx_v_self->docs[__pyx_v_d])[__pyx_v_n]);

            /* "clda.pyx":600
 *                         for n in range(self.dW[d]):
 *                             w = self.docs[d][n]
 *                             y = Y[d][n]             # <<<<<<<<<<<<<<
 *                             z = Z[d][n]
 *                             self.stat_incr(d, c, w, y, z, self.unit[c])
 */
            __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_Y, __pyx_v_d, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_18 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_18, __pyx_v_n, __pyx_t_10gsl_matrix_uint, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_y = __pyx_t_24;

            /* "clda.pyx":601
 *                             w = self.docs[d][n]
 *                             y = Y[d][n]
 *                             z = Z[d][n]             # <<<<<<<<<<<<<<
 *                             self.stat_incr(d, c, w, y, z, self.unit[c])
 *             scale = 1.0 / scale
 */
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_Z, __pyx_v_d, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_n, __pyx_t_10gsl_matrix_uint, 0, __Pyx_PyInt_From_unsigned_int, 0, 0, 0); if (unlikely(__pyx_t_18 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_24 = __Pyx_PyInt_As_size_t(__pyx_t_18); if (unlikely((__pyx_t_24 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_v_z = __pyx_t_24;

            /* "clda.pyx":602
 *                             y = Y[d][n]
 *                             z = Z[d][n]
 *                             self.stat_incr(d, c, w, y, z, self.unit[c])             # <<<<<<<<<<<<<<
 *             scale = 1.0 / scale
 * 
 */
            __pyx_t_18 = __pyx_f_4clda_4CLDA_stat_incr(__pyx_v_self, __pyx_v_d, __pyx_v_c, __pyx_v_w, __pyx_v_y, __pyx_v_z, (__pyx_v_self->unit[__pyx_v_c])); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          }
        }
        goto __pyx_L9;
      }
      __pyx_L9:;
    }

    /* "clda.pyx":603
 *                             z = Z[d][n]
 *                             self.stat_incr(d, c, w, y, z, self.unit[c])
 *             scale = 1.0 / scale             # <<<<<<<<<<<<<<
 * 
 *             gsl_2d_matrix_scale(self.alpha, self.C, scale)
 */
    __pyx_v_scale = (1.0 / __pyx_v_scale);

    /* "clda.pyx":605
 *             scale = 1.0 / scale
 * 
 *             gsl_2d_matrix_scale(self.alpha, self.C, scale)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_scale(self.nDZ, self.D, scale)
 *             gsl_2d_matrix_scale(self.nYZ, 2, scale)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(__pyx_v_self->alpha, __pyx_v_self->C, __pyx_v_scale);

    /* "clda.pyx":606
 * 
 *             gsl_2d_matrix_scale(self.alpha, self.C, scale)
 *             gsl_2d_matrix_scale(self.nDZ, self.D, scale)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_scale(self.nYZ, 2, scale)
 *             gsl_vector_scale(self.nZ, scale)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(__pyx_v_self->nDZ, __pyx_v_self->D, __pyx_v_scale);

    /* "clda.pyx":607
 *             gsl_2d_matrix_scale(self.alpha, self.C, scale)
 *             gsl_2d_matrix_scale(self.nDZ, self.D, scale)
 *             gsl_2d_matrix_scale(self.nYZ, 2, scale)             # <<<<<<<<<<<<<<
 *             gsl_vector_scale(self.nZ, scale)
 *             gsl_2d_matrix_scale(self.n0WZ, self.V, scale)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(__pyx_v_self->nYZ, 2, __pyx_v_scale);

    /* "clda.pyx":608
 *             gsl_2d_matrix_scale(self.nDZ, self.D, scale)
 *             gsl_2d_matrix_scale(self.nYZ, 2, scale)
 *             gsl_vector_scale(self.nZ, scale)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_scale(self.n0WZ, self.V, scale)
 *             gsl_vector_scale(self.n0Z, scale)
 */
    gsl_vector_scale(__pyx_v_self->nZ, __pyx_v_scale);

    /* "clda.pyx":609
 *             gsl_2d_matrix_scale(self.nYZ, 2, scale)
 *             gsl_vector_scale(self.nZ, scale)
 *             gsl_2d_matrix_scale(self.n0WZ, self.V, scale)             # <<<<<<<<<<<<<<
 *             gsl_vector_scale(self.n0Z, scale)
 *             gsl_3d_matrix_scale(self.n1CWZ, self.C, self.V, scale)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(__pyx_v_self->n0WZ, __pyx_v_self->V, __pyx_v_scale);

    /* "clda.pyx":610
 *             gsl_vector_scale(self.nZ, scale)
 *             gsl_2d_matrix_scale(self.n0WZ, self.V, scale)
 *             gsl_vector_scale(self.n0Z, scale)             # <<<<<<<<<<<<<<
 *             gsl_3d_matrix_scale(self.n1CWZ, self.C, self.V, scale)
 *             gsl_2d_matrix_scale(self.n1CZ, self.C, scale)
 */
    gsl_vector_scale(__pyx_v_self->n0Z, __pyx_v_scale);

    /* "clda.pyx":611
 *             gsl_2d_matrix_scale(self.n0WZ, self.V, scale)
 *             gsl_vector_scale(self.n0Z, scale)
 *             gsl_3d_matrix_scale(self.n1CWZ, self.C, self.V, scale)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_scale(self.n1CZ, self.C, scale)
 *             for i in range(self.C):
 */
    __pyx_f_10gsl_matrix_gsl_3d_matrix_scale(__pyx_v_self->n1CWZ, __pyx_v_self->C, __pyx_v_self->V, __pyx_v_scale);

    /* "clda.pyx":612
 *             gsl_vector_scale(self.n0Z, scale)
 *             gsl_3d_matrix_scale(self.n1CWZ, self.C, self.V, scale)
 *             gsl_2d_matrix_scale(self.n1CZ, self.C, scale)             # <<<<<<<<<<<<<<
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(__pyx_v_self->n1CZ, __pyx_v_self->C, __pyx_v_scale);

    /* "clda.pyx":613
 *             gsl_3d_matrix_scale(self.n1CWZ, self.C, self.V, scale)
 *             gsl_2d_matrix_scale(self.n1CZ, self.C, scale)
 *             for i in range(self.C):             # <<<<<<<<<<<<<<
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 */
    __pyx_t_18 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->C); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_18);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_18)) || PyTuple_CheckExact(__pyx_t_18)) {
      __pyx_t_4 = __pyx_t_18; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_18); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_18 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_18); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_18 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_18 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_18); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_18 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_18 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_18)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_18);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_18);
      __pyx_t_18 = 0;

      /* "clda.pyx":614
 *             gsl_2d_matrix_scale(self.n1CZ, self.C, scale)
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:             # <<<<<<<<<<<<<<
 *                     continue
 *                 gsl_vector_scale(self.nCZ[i], scale)
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = ((((__pyx_v_self->Tc[__pyx_t_7]) - __pyx_v_self->T0) <= 0) != 0);
      if (__pyx_t_2) {

        /* "clda.pyx":615
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue             # <<<<<<<<<<<<<<
 *                 gsl_vector_scale(self.nCZ[i], scale)
 *                 gsl_2d_matrix_scale(self.nCWZ[i], self.V, scale)
 */
        goto __pyx_L22_continue;
      }

      /* "clda.pyx":616
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 *                 gsl_vector_scale(self.nCZ[i], scale)             # <<<<<<<<<<<<<<
 *                 gsl_2d_matrix_scale(self.nCWZ[i], self.V, scale)
 * 
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      gsl_vector_scale((__pyx_v_self->nCZ[__pyx_t_7]), __pyx_v_scale);

      /* "clda.pyx":617
 *                     continue
 *                 gsl_vector_scale(self.nCZ[i], scale)
 *                 gsl_2d_matrix_scale(self.nCWZ[i], self.V, scale)             # <<<<<<<<<<<<<<
 * 
 *             gsl_vector_add_constant(self.nYZ[0], self.delta[0])
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_f_10gsl_matrix_gsl_2d_matrix_scale((__pyx_v_self->nCWZ[__pyx_t_7]), __pyx_v_self->V, __pyx_v_scale);

      /* "clda.pyx":613
 *             gsl_3d_matrix_scale(self.n1CWZ, self.C, self.V, scale)
 *             gsl_2d_matrix_scale(self.n1CZ, self.C, scale)
 *             for i in range(self.C):             # <<<<<<<<<<<<<<
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 */
      __pyx_L22_continue:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "clda.pyx":619
 *                 gsl_2d_matrix_scale(self.nCWZ[i], self.V, scale)
 * 
 *             gsl_vector_add_constant(self.nYZ[0], self.delta[0])             # <<<<<<<<<<<<<<
 *             gsl_vector_add_constant(self.nYZ[1], self.delta[1])
 *             gsl_vector_add_constant(self.nZ, self.deltaNorm)
 */
    gsl_vector_add_constant((__pyx_v_self->nYZ[0]), (__pyx_v_self->delta[0]));

    /* "clda.pyx":620
 * 
 *             gsl_vector_add_constant(self.nYZ[0], self.delta[0])
 *             gsl_vector_add_constant(self.nYZ[1], self.delta[1])             # <<<<<<<<<<<<<<
 *             gsl_vector_add_constant(self.nZ, self.deltaNorm)
 *             gsl_2d_matrix_add_constant(self.n0WZ, self.V, self.beta)
 */
    gsl_vector_add_constant((__pyx_v_self->nYZ[1]), (__pyx_v_self->delta[1]));

    /* "clda.pyx":621
 *             gsl_vector_add_constant(self.nYZ[0], self.delta[0])
 *             gsl_vector_add_constant(self.nYZ[1], self.delta[1])
 *             gsl_vector_add_constant(self.nZ, self.deltaNorm)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_add_constant(self.n0WZ, self.V, self.beta)
 *             gsl_vector_add_constant(self.n0Z, self.betaNorm)
 */
    gsl_vector_add_constant(__pyx_v_self->nZ, __pyx_v_self->deltaNorm);

    /* "clda.pyx":622
 *             gsl_vector_add_constant(self.nYZ[1], self.delta[1])
 *             gsl_vector_add_constant(self.nZ, self.deltaNorm)
 *             gsl_2d_matrix_add_constant(self.n0WZ, self.V, self.beta)             # <<<<<<<<<<<<<<
 *             gsl_vector_add_constant(self.n0Z, self.betaNorm)
 *             gsl_3d_matrix_add_constant(self.n1CWZ, self.C, self.V, self.beta)
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_add_constant(__pyx_v_self->n0WZ, __pyx_v_self->V, __pyx_v_self->beta);

    /* "clda.pyx":623
 *             gsl_vector_add_constant(self.nZ, self.deltaNorm)
 *             gsl_2d_matrix_add_constant(self.n0WZ, self.V, self.beta)
 *             gsl_vector_add_constant(self.n0Z, self.betaNorm)             # <<<<<<<<<<<<<<
 *             gsl_3d_matrix_add_constant(self.n1CWZ, self.C, self.V, self.beta)
 *             gsl_2d_matrix_add_constant(self.n1CZ, self.C, self.betaNorm)
 */
    gsl_vector_add_constant(__pyx_v_self->n0Z, __pyx_v_self->betaNorm);

    /* "clda.pyx":624
 *             gsl_2d_matrix_add_constant(self.n0WZ, self.V, self.beta)
 *             gsl_vector_add_constant(self.n0Z, self.betaNorm)
 *             gsl_3d_matrix_add_constant(self.n1CWZ, self.C, self.V, self.beta)             # <<<<<<<<<<<<<<
 *             gsl_2d_matrix_add_constant(self.n1CZ, self.C, self.betaNorm)
 *             for i in range(self.C):
 */
    __pyx_f_10gsl_matrix_gsl_3d_matrix_add_constant(__pyx_v_self->n1CWZ, __pyx_v_self->C, __pyx_v_self->V, __pyx_v_self->beta);

    /* "clda.pyx":625
 *             gsl_vector_add_constant(self.n0Z, self.betaNorm)
 *             gsl_3d_matrix_add_constant(self.n1CWZ, self.C, self.V, self.beta)
 *             gsl_2d_matrix_add_constant(self.n1CZ, self.C, self.betaNorm)             # <<<<<<<<<<<<<<
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_add_constant(__pyx_v_self->n1CZ, __pyx_v_self->C, __pyx_v_self->betaNorm);

    /* "clda.pyx":626
 *             gsl_3d_matrix_add_constant(self.n1CWZ, self.C, self.V, self.beta)
 *             gsl_2d_matrix_add_constant(self.n1CZ, self.C, self.betaNorm)
 *             for i in range(self.C):             # <<<<<<<<<<<<<<
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 */
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->C); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_18 = PyTuple_New(1); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_18, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_18 = __pyx_t_4; __Pyx_INCREF(__pyx_t_18); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_18 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_6 = Py_TYPE(__pyx_t_18)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_18))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_18)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_18, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_18, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_18)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_18, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_18, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_18);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "clda.pyx":627
 *             gsl_2d_matrix_add_constant(self.n1CZ, self.C, self.betaNorm)
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:             # <<<<<<<<<<<<<<
 *                     continue
 *                 gsl_vector_add_constant(self.nCZ[i], self.betaNorm)
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = ((((__pyx_v_self->Tc[__pyx_t_7]) - __pyx_v_self->T0) <= 0) != 0);
      if (__pyx_t_2) {

        /* "clda.pyx":628
 *             for i in range(self.C):
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue             # <<<<<<<<<<<<<<
 *                 gsl_vector_add_constant(self.nCZ[i], self.betaNorm)
 *                 gsl_2d_matrix_add_constant(self.nCWZ[i], self.V, self.beta)
 */
        goto __pyx_L25_continue;
      }

      /* "clda.pyx":629
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 *                 gsl_vector_add_constant(self.nCZ[i], self.betaNorm)             # <<<<<<<<<<<<<<
 *                 gsl_2d_matrix_add_constant(self.nCWZ[i], self.V, self.beta)
 *         if eval_sigma:
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      gsl_vector_add_constant((__pyx_v_self->nCZ[__pyx_t_7]), __pyx_v_self->betaNorm);

      /* "clda.pyx":630
 *                     continue
 *                 gsl_vector_add_constant(self.nCZ[i], self.betaNorm)
 *                 gsl_2d_matrix_add_constant(self.nCWZ[i], self.V, self.beta)             # <<<<<<<<<<<<<<
 *         if eval_sigma:
 *             ys = []
 */
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_f_10gsl_matrix_gsl_2d_matrix_add_constant((__pyx_v_self->nCWZ[__pyx_t_7]), __pyx_v_self->V, __pyx_v_self->beta);

      /* "clda.pyx":626
 *             gsl_3d_matrix_add_constant(self.n1CWZ, self.C, self.V, self.beta)
 *             gsl_2d_matrix_add_constant(self.n1CZ, self.C, self.betaNorm)
 *             for i in range(self.C):             # <<<<<<<<<<<<<<
 *                 if self.Tc[i] - self.T0 <= 0:
 *                     continue
 */
      __pyx_L25_continue:;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "clda.pyx":631
 *                 gsl_vector_add_constant(self.nCZ[i], self.betaNorm)
 *                 gsl_2d_matrix_add_constant(self.nCWZ[i], self.V, self.beta)
 *         if eval_sigma:             # <<<<<<<<<<<<<<
 *             ys = []
 *             for i in range(self.T0):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eval_sigma); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "clda.pyx":632
 *                 gsl_2d_matrix_add_constant(self.nCWZ[i], self.V, self.beta)
 *         if eval_sigma:
 *             ys = []             # <<<<<<<<<<<<<<
 *             for i in range(self.T0):
 *                 print gsl_vector_get(self.nYZ[0], i) - self.delta[0], gsl_vector_get(self.nZ, i) - self.deltaNorm
 */
    __pyx_t_18 = PyList_New(0); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_v_ys = __pyx_t_18;
    __pyx_t_18 = 0;

    /* "clda.pyx":633
 *         if eval_sigma:
 *             ys = []
 *             for i in range(self.T0):             # <<<<<<<<<<<<<<
 *                 print gsl_vector_get(self.nYZ[0], i) - self.delta[0], gsl_vector_get(self.nZ, i) - self.deltaNorm
 *                 if (gsl_vector_get(self.nZ, i) - self.deltaNorm) < 1e-5:
 */
    __pyx_t_18 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_18);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_18)) || PyTuple_CheckExact(__pyx_t_18)) {
      __pyx_t_4 = __pyx_t_18; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_18); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_18 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_18); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_18 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_18 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_18); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_18 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_18 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_18)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_18);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_18);
      __pyx_t_18 = 0;

      /* "clda.pyx":634
 *             ys = []
 *             for i in range(self.T0):
 *                 print gsl_vector_get(self.nYZ[0], i) - self.delta[0], gsl_vector_get(self.nZ, i) - self.deltaNorm             # <<<<<<<<<<<<<<
 *                 if (gsl_vector_get(self.nZ, i) - self.deltaNorm) < 1e-5:
 *                     ys.append(0)
 */
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_18 = PyFloat_FromDouble((gsl_vector_get((__pyx_v_self->nYZ[0]), __pyx_t_9) - (__pyx_v_self->delta[0]))); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_17 = PyFloat_FromDouble((gsl_vector_get(__pyx_v_self->nZ, __pyx_t_9) - __pyx_v_self->deltaNorm)); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_17);
      __pyx_t_18 = 0;
      __pyx_t_17 = 0;
      if (__Pyx_Print(0, __pyx_t_16, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "clda.pyx":635
 *             for i in range(self.T0):
 *                 print gsl_vector_get(self.nYZ[0], i) - self.delta[0], gsl_vector_get(self.nZ, i) - self.deltaNorm
 *                 if (gsl_vector_get(self.nZ, i) - self.deltaNorm) < 1e-5:             # <<<<<<<<<<<<<<
 *                     ys.append(0)
 *                 else:
 */
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = (((gsl_vector_get(__pyx_v_self->nZ, __pyx_t_9) - __pyx_v_self->deltaNorm) < 1e-5) != 0);
      if (__pyx_t_2) {

        /* "clda.pyx":636
 *                 print gsl_vector_get(self.nYZ[0], i) - self.delta[0], gsl_vector_get(self.nZ, i) - self.deltaNorm
 *                 if (gsl_vector_get(self.nZ, i) - self.deltaNorm) < 1e-5:
 *                     ys.append(0)             # <<<<<<<<<<<<<<
 *                 else:
 *                     ys.append((gsl_vector_get(self.nYZ[0], i) - self.delta[0]) / (gsl_vector_get(self.nZ, i) - self.deltaNorm))
 */
        __pyx_t_27 = __Pyx_PyObject_Append(__pyx_v_ys, __pyx_int_0); if (unlikely(__pyx_t_27 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L31;
      }
      /*else*/ {

        /* "clda.pyx":638
 *                     ys.append(0)
 *                 else:
 *                     ys.append((gsl_vector_get(self.nYZ[0], i) - self.delta[0]) / (gsl_vector_get(self.nZ, i) - self.deltaNorm))             # <<<<<<<<<<<<<<
 *             ys = sorted(ys)
 *             print ys
 */
        __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_22 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_22 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_16 = PyFloat_FromDouble(((gsl_vector_get((__pyx_v_self->nYZ[0]), __pyx_t_9) - (__pyx_v_self->delta[0])) / (gsl_vector_get(__pyx_v_self->nZ, __pyx_t_22) - __pyx_v_self->deltaNorm))); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_27 = __Pyx_PyObject_Append(__pyx_v_ys, __pyx_t_16); if (unlikely(__pyx_t_27 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __pyx_L31:;

      /* "clda.pyx":633
 *         if eval_sigma:
 *             ys = []
 *             for i in range(self.T0):             # <<<<<<<<<<<<<<
 *                 print gsl_vector_get(self.nYZ[0], i) - self.delta[0], gsl_vector_get(self.nZ, i) - self.deltaNorm
 *                 if (gsl_vector_get(self.nZ, i) - self.deltaNorm) < 1e-5:
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "clda.pyx":639
 *                 else:
 *                     ys.append((gsl_vector_get(self.nYZ[0], i) - self.delta[0]) / (gsl_vector_get(self.nZ, i) - self.deltaNorm))
 *             ys = sorted(ys)             # <<<<<<<<<<<<<<
 *             print ys
 *             a = 0
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_4, NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_ys, __pyx_t_16);
    __pyx_t_16 = 0;

    /* "clda.pyx":640
 *                     ys.append((gsl_vector_get(self.nYZ[0], i) - self.delta[0]) / (gsl_vector_get(self.nZ, i) - self.deltaNorm))
 *             ys = sorted(ys)
 *             print ys             # <<<<<<<<<<<<<<
 *             a = 0
 *             for i in range(self.T0 - T0, self.T0):
 */
    if (__Pyx_PrintOne(0, __pyx_v_ys) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "clda.pyx":641
 *             ys = sorted(ys)
 *             print ys
 *             a = 0             # <<<<<<<<<<<<<<
 *             for i in range(self.T0 - T0, self.T0):
 *                 a += ys[i]
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_a = __pyx_int_0;

    /* "clda.pyx":642
 *             print ys
 *             a = 0
 *             for i in range(self.T0 - T0, self.T0):             # <<<<<<<<<<<<<<
 *                 a += ys[i]
 *             b = 0
 */
    __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_16, __pyx_v_T0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_16);
    __pyx_t_4 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_17, NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
      __pyx_t_17 = __pyx_t_16; __Pyx_INCREF(__pyx_t_17); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_6 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_17))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_17)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_16 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_5); __Pyx_INCREF(__pyx_t_16); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_16 = PySequence_ITEM(__pyx_t_17, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_5); __Pyx_INCREF(__pyx_t_16); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_16 = PySequence_ITEM(__pyx_t_17, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_16 = __pyx_t_6(__pyx_t_17);
        if (unlikely(!__pyx_t_16)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_16);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "clda.pyx":643
 *             a = 0
 *             for i in range(self.T0 - T0, self.T0):
 *                 a += ys[i]             # <<<<<<<<<<<<<<
 *             b = 0
 *             for i in range(0, self.T0 - T0):
 */
      __pyx_t_16 = PyObject_GetItem(__pyx_v_ys, __pyx_v_i); if (unlikely(__pyx_t_16 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_a, __pyx_t_16); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF_SET(__pyx_v_a, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "clda.pyx":642
 *             print ys
 *             a = 0
 *             for i in range(self.T0 - T0, self.T0):             # <<<<<<<<<<<<<<
 *                 a += ys[i]
 *             b = 0
 */
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "clda.pyx":644
 *             for i in range(self.T0 - T0, self.T0):
 *                 a += ys[i]
 *             b = 0             # <<<<<<<<<<<<<<
 *             for i in range(0, self.T0 - T0):
 *                 b += ys[i]
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_b = __pyx_int_0;

    /* "clda.pyx":645
 *                 a += ys[i]
 *             b = 0
 *             for i in range(0, self.T0 - T0):             # <<<<<<<<<<<<<<
 *                 b += ys[i]
 *             if T0 != 0:
 */
    __pyx_t_17 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_17, __pyx_v_T0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_INCREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_17 = __pyx_t_4; __Pyx_INCREF(__pyx_t_17); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_6 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_17))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_17)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_17, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_17, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_17);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "clda.pyx":646
 *             b = 0
 *             for i in range(0, self.T0 - T0):
 *                 b += ys[i]             # <<<<<<<<<<<<<<
 *             if T0 != 0:
 *                 a /= T0
 */
      __pyx_t_4 = PyObject_GetItem(__pyx_v_ys, __pyx_v_i); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = PyNumber_InPlaceAdd(__pyx_v_b, __pyx_t_4); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_b, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "clda.pyx":645
 *                 a += ys[i]
 *             b = 0
 *             for i in range(0, self.T0 - T0):             # <<<<<<<<<<<<<<
 *                 b += ys[i]
 *             if T0 != 0:
 */
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "clda.pyx":647
 *             for i in range(0, self.T0 - T0):
 *                 b += ys[i]
 *             if T0 != 0:             # <<<<<<<<<<<<<<
 *                 a /= T0
 *             if T0 != self.T0:
 */
    __pyx_t_17 = PyObject_RichCompare(__pyx_v_T0, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_17); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (__pyx_t_2) {

      /* "clda.pyx":648
 *                 b += ys[i]
 *             if T0 != 0:
 *                 a /= T0             # <<<<<<<<<<<<<<
 *             if T0 != self.T0:
 *                 b /= (self.T0 - T0)
 */
      __pyx_t_17 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_a, __pyx_v_T0); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF_SET(__pyx_v_a, __pyx_t_17);
      __pyx_t_17 = 0;
      goto __pyx_L36;
    }
    __pyx_L36:;

    /* "clda.pyx":649
 *             if T0 != 0:
 *                 a /= T0
 *             if T0 != self.T0:             # <<<<<<<<<<<<<<
 *                 b /= (self.T0 - T0)
 *             return a, b, a - b
 */
    __pyx_t_17 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = PyObject_RichCompare(__pyx_v_T0, __pyx_t_17, Py_NE); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (__pyx_t_2) {

      /* "clda.pyx":650
 *                 a /= T0
 *             if T0 != self.T0:
 *                 b /= (self.T0 - T0)             # <<<<<<<<<<<<<<
 *             return a, b, a - b
 * 
 */
      __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = PyNumber_Subtract(__pyx_t_16, __pyx_v_T0); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_b, __pyx_t_17); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF_SET(__pyx_v_b, __pyx_t_16);
      __pyx_t_16 = 0;
      goto __pyx_L37;
    }
    __pyx_L37:;

    /* "clda.pyx":651
 *             if T0 != self.T0:
 *                 b /= (self.T0 - T0)
 *             return a, b, a - b             # <<<<<<<<<<<<<<
 * 
 *         cdef double loglik, perplexity
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_16 = PyNumber_Subtract(__pyx_v_a, __pyx_v_b); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = PyTuple_New(3); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_INCREF(__pyx_v_a);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_v_a);
    __Pyx_GIVEREF(__pyx_v_a);
    __Pyx_INCREF(__pyx_v_b);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_16);
    __pyx_t_16 = 0;
    __pyx_r = __pyx_t_17;
    __pyx_t_17 = 0;
    goto __pyx_L0;
  }

  /* "clda.pyx":655
 *         cdef double loglik, perplexity
 *         cdef int f
 *         f = 1 if resample else 0             # <<<<<<<<<<<<<<
 * 
 *         loglik = evaluate(20, f,
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_resample); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {
    __pyx_t_28 = 1;
  } else {
    __pyx_t_28 = 0;
  }
  __pyx_v_f = __pyx_t_28;

  /* "clda.pyx":657
 *         f = 1 if resample else 0
 * 
 *         loglik = evaluate(20, f,             # <<<<<<<<<<<<<<
 *             self.Tc, self.T0, self.t_maxWC, self.C, self.t_D, self.t_dC, self.t_dW, self.t_docs,
 *             self.alpha, self.unit,
 */
  __pyx_v_loglik = evaluate(20, __pyx_v_f, __pyx_v_self->Tc, __pyx_v_self->T0, __pyx_v_self->t_maxWC, __pyx_v_self->C, __pyx_v_self->t_D, __pyx_v_self->t_dC, __pyx_v_self->t_dW, __pyx_v_self->t_docs, __pyx_v_self->alpha, __pyx_v_self->unit, __pyx_v_self->nZ, __pyx_v_self->n0Z, __pyx_v_self->nYZ, __pyx_v_self->n0WZ, __pyx_v_self->n1CWZ, __pyx_v_self->n1CZ, __pyx_v_self->nCWZ, __pyx_v_self->nCZ);

  /* "clda.pyx":661
 *             self.alpha, self.unit,
 *             self.nZ, self.n0Z, self.nYZ, self.n0WZ, self.n1CWZ, self.n1CZ, self.nCWZ, self.nCZ)
 *         perplexity = exp(- loglik / self.t_W)             # <<<<<<<<<<<<<<
 *         logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))
 *         return perplexity
 */
  __pyx_v_perplexity = exp(((-__pyx_v_loglik) / __pyx_v_self->t_W));

  /* "clda.pyx":662
 *             self.nZ, self.n0Z, self.nYZ, self.n0WZ, self.n1CWZ, self.n1CZ, self.nCWZ, self.nCZ)
 *         perplexity = exp(- loglik / self.t_W)
 *         logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))             # <<<<<<<<<<<<<<
 *         return perplexity
 * 
 */
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_loglik); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_perplexity); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  __pyx_t_16 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyString_Format(__pyx_kp_s_log_likelihood_2f_perplexity_2f, __pyx_t_15); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_15) {
    __pyx_t_17 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_18); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_GOTREF(__pyx_t_17);
  } else {
    __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;
    PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_18);
    __pyx_t_18 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_16, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "clda.pyx":663
 *         perplexity = exp(- loglik / self.t_W)
 *         logger.info('log likelihood: %2f, perplexity: %2f' % (loglik, perplexity))
 *         return perplexity             # <<<<<<<<<<<<<<
 * 
 *     def save(self, stats=False, k=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_perplexity); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_r = __pyx_t_17;
  __pyx_t_17 = 0;
  goto __pyx_L0;

  /* "clda.pyx":569
 *             raise ValueError('alpha became unstable, terminating..')
 * 
 *     def evaluate(self, resample=False, single=True, T0=None, eval_sigma=False):             # <<<<<<<<<<<<<<
 * 
 *         cdef double scale = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("clda.CLDA.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_ys);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "clda.pyx":665
 *         return perplexity
 * 
 *     def save(self, stats=False, k=None):             # <<<<<<<<<<<<<<
 *         cdef size_t d
 *         cdef size_t n
 */

/* Python wrapper */
static PyObject *__pyx_pw_4clda_4CLDA_11save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4clda_4CLDA_11save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_stats = 0;
  PyObject *__pyx_v_k = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stats,&__pyx_n_s_k,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stats);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_stats = values[0];
    __pyx_v_k = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("clda.CLDA.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4clda_4CLDA_10save(((struct __pyx_obj_4clda_CLDA *)__pyx_v_self), __pyx_v_stats, __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4clda_4CLDA_10save(struct __pyx_obj_4clda_CLDA *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_stats, PyObject *__pyx_v_k) {
  size_t __pyx_v_d;
  size_t __pyx_v_n;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_v_Tc = NULL;
  __pyx_t_10gsl_matrix_uint __pyx_v_i;
  __pyx_t_10gsl_matrix_uint __pyx_v_c;
  CYTHON_UNUSED PyObject *__pyx_v_dw = NULL;
  PyObject *__pyx_v_dy = NULL;
  PyObject *__pyx_v_dz = NULL;
  PyObject *__pyx_v_prefix = NULL;
  PyObject *__pyx_v_n_iter = NULL;
  PyObject *__pyx_v_alpha = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_10gsl_matrix_uint __pyx_t_2;
  __pyx_t_10gsl_matrix_uint __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "clda.pyx":668
 *         cdef size_t d
 *         cdef size_t n
 *         Y = []             # <<<<<<<<<<<<<<
 *         Z = []
 *         Tc = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Y = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "clda.pyx":669
 *         cdef size_t n
 *         Y = []
 *         Z = []             # <<<<<<<<<<<<<<
 *         Tc = []
 *         for i in range(self.C):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Z = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "clda.pyx":670
 *         Y = []
 *         Z = []
 *         Tc = []             # <<<<<<<<<<<<<<
 *         for i in range(self.C):
 *             Tc.append(self.Tc[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_Tc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "clda.pyx":671
 *         Z = []
 *         Tc = []
 *         for i in range(self.C):             # <<<<<<<<<<<<<<
 *             Tc.append(self.Tc[i])
 * 
 */
  __pyx_t_2 = __pyx_v_self->C;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "clda.pyx":672
 *         Tc = []
 *         for i in range(self.C):
 *             Tc.append(self.Tc[i])             # <<<<<<<<<<<<<<
 * 
 *         for d in range(self.D):
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int((__pyx_v_self->Tc[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_Tc, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "clda.pyx":674
 *             Tc.append(self.Tc[i])
 * 
 *         for d in range(self.D):             # <<<<<<<<<<<<<<
 *             c = self.dC[d]
 *             dw = [self.docs[d][n] for n in range(self.dW[d])]
 */
  __pyx_t_2 = __pyx_v_self->D;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_2; __pyx_t_5+=1) {
    __pyx_v_d = __pyx_t_5;

    /* "clda.pyx":675
 * 
 *         for d in range(self.D):
 *             c = self.dC[d]             # <<<<<<<<<<<<<<
 *             dw = [self.docs[d][n] for n in range(self.dW[d])]
 *             dy = [self.dY[d][n] for n in range(self.dW[d])]
 */
    __pyx_v_c = (__pyx_v_self->dC[__pyx_v_d]);

    /* "clda.pyx":676
 *         for d in range(self.D):
 *             c = self.dC[d]
 *             dw = [self.docs[d][n] for n in range(self.dW[d])]             # <<<<<<<<<<<<<<
 *             dy = [self.dY[d][n] for n in range(self.dW[d])]
 *             dz = [self.dZ[d][n] for n in range(self.dW[d])]
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_v_self->dW[__pyx_v_d]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_3; __pyx_t_6+=1) {
      __pyx_v_n = __pyx_t_6;
      __pyx_t_7 = __Pyx_PyInt_From_npy_uint16(((__pyx_v_self->docs[__pyx_v_d])[__pyx_v_n])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_dw, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "clda.pyx":677
 *             c = self.dC[d]
 *             dw = [self.docs[d][n] for n in range(self.dW[d])]
 *             dy = [self.dY[d][n] for n in range(self.dW[d])]             # <<<<<<<<<<<<<<
 *             dz = [self.dZ[d][n] for n in range(self.dW[d])]
 *             Y.append(dy)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_v_self->dW[__pyx_v_d]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_3; __pyx_t_6+=1) {
      __pyx_v_n = __pyx_t_6;
      __pyx_t_7 = __Pyx_PyInt_From_npy_uint8(((__pyx_v_self->dY[__pyx_v_d])[__pyx_v_n])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_dy, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "clda.pyx":678
 *             dw = [self.docs[d][n] for n in range(self.dW[d])]
 *             dy = [self.dY[d][n] for n in range(self.dW[d])]
 *             dz = [self.dZ[d][n] for n in range(self.dW[d])]             # <<<<<<<<<<<<<<
 *             Y.append(dy)
 *             Z.append(dz)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_v_self->dW[__pyx_v_d]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_3; __pyx_t_6+=1) {
      __pyx_v_n = __pyx_t_6;
      __pyx_t_7 = __Pyx_PyInt_From_npy_uint16(((__pyx_v_self->dZ[__pyx_v_d])[__pyx_v_n])); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_dz, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "clda.pyx":679
 *             dy = [self.dY[d][n] for n in range(self.dW[d])]
 *             dz = [self.dZ[d][n] for n in range(self.dW[d])]
 *             Y.append(dy)             # <<<<<<<<<<<<<<
 *             Z.append(dz)
 *         prefix = self.prefix
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_v_dy); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "clda.pyx":680
 *             dz = [self.dZ[d][n] for n in range(self.dW[d])]
 *             Y.append(dy)
 *             Z.append(dz)             # <<<<<<<<<<<<<<
 *         prefix = self.prefix
 *         n_iter = self.n_iter
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_Z, __pyx_v_dz); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "clda.pyx":681
 *             Y.append(dy)
 *             Z.append(dz)
 *         prefix = self.prefix             # <<<<<<<<<<<<<<
 *         n_iter = self.n_iter
 *         if k:
 */
  __pyx_t_1 = __pyx_v_self->prefix;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_prefix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "clda.pyx":682
 *             Z.append(dz)
 *         prefix = self.prefix
 *         n_iter = self.n_iter             # <<<<<<<<<<<<<<
 *         if k:
 *             prefix = prefix + ('-%04d' % (k))
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->n_iter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_n_iter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "clda.pyx":683
 *         prefix = self.prefix
 *         n_iter = self.n_iter
 *         if k:             # <<<<<<<<<<<<<<
 *             prefix = prefix + ('-%04d' % (k))
 *             n_iter = k
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_k); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_8) {

    /* "clda.pyx":684
 *         n_iter = self.n_iter
 *         if k:
 *             prefix = prefix + ('-%04d' % (k))             # <<<<<<<<<<<<<<
 *             n_iter = k
 *         alpha = []
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_04d, __pyx_v_k); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Add(__pyx_v_prefix, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_prefix, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "clda.pyx":685
 *         if k:
 *             prefix = prefix + ('-%04d' % (k))
 *             n_iter = k             # <<<<<<<<<<<<<<
 *         alpha = []
 *         for c in xrange(self.C):
 */
    __Pyx_INCREF(__pyx_v_k);
    __Pyx_DECREF_SET(__pyx_v_n_iter, __pyx_v_k);
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "clda.pyx":686
 *             prefix = prefix + ('-%04d' % (k))
 *             n_iter = k
 *         alpha = []             # <<<<<<<<<<<<<<
 *         for c in xrange(self.C):
 *             alpha.append(gsl2numpy(self.alpha[c]))
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_alpha = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "clda.pyx":687
 *             n_iter = k
 *         alpha = []
 *         for c in xrange(self.C):             # <<<<<<<<<<<<<<
 *             alpha.append(gsl2numpy(self.alpha[c]))
 *         pickle.dump((Y, Z, alpha, n_iter, self.T0, Tc, self.V, self.C, self.D, self.word2id),
 */
  __pyx_t_2 = __pyx_v_self->C;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_c = __pyx_t_3;

    /* "clda.pyx":688
 *         alpha = []
 *         for c in xrange(self.C):
 *             alpha.append(gsl2numpy(self.alpha[c]))             # <<<<<<<<<<<<<<
 *         pickle.dump((Y, Z, alpha, n_iter, self.T0, Tc, self.V, self.C, self.D, self.word2id),
 *                 open(prefix + '.pkl', 'wb'))
 */
    __pyx_t_7 = ((PyObject *)__pyx_f_4clda_gsl2numpy((__pyx_v_self->alpha[__pyx_v_c]))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_alpha, __pyx_t_7); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "clda.pyx":689
 *         for c in xrange(self.C):
 *             alpha.append(gsl2numpy(self.alpha[c]))
 *         pickle.dump((Y, Z, alpha, n_iter, self.T0, Tc, self.V, self.C, self.D, self.word2id),             # <<<<<<<<<<<<<<
 *                 open(prefix + '.pkl', 'wb'))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pickle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dump); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->T0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->V); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->C); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->D); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyTuple_New(10); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_v_Y);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_Y);
  __Pyx_GIVEREF(__pyx_v_Y);
  __Pyx_INCREF(__pyx_v_Z);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_Z);
  __Pyx_GIVEREF(__pyx_v_Z);
  __Pyx_INCREF(__pyx_v_alpha);
  PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_v_alpha);
  __Pyx_GIVEREF(__pyx_v_alpha);
  __Pyx_INCREF(__pyx_v_n_iter);
  PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_v_n_iter);
  __Pyx_GIVEREF(__pyx_v_n_iter);
  PyTuple_SET_ITEM(__pyx_t_13, 4, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_Tc);
  PyTuple_SET_ITEM(__pyx_t_13, 5, __pyx_v_Tc);
  __Pyx_GIVEREF(__pyx_v_Tc);
  PyTuple_SET_ITEM(__pyx_t_13, 6, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_13, 7, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_13, 8, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_v_self->word2id);
  PyTuple_SET_ITEM(__pyx_t_13, 9, __pyx_v_self->word2id);
  __Pyx_GIVEREF(__pyx_v_self->word2id);
  __pyx_t_1 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;

  /* "clda.pyx":690
 *             alpha.append(gsl2numpy(self.alpha[c]))
 *         pickle.dump((Y, Z, alpha, n_iter, self.T0, Tc, self.V, self.C, self.D, self.word2id),
 *                 open(prefix + '.pkl', 'wb'))             # <<<<<<<<<<<<<<
 */
  __pyx_t_12 = PyNumber_Add(__pyx_v_prefix, __pyx_kp_s_pkl); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_n_s_wb);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_n_s_wb);
  __Pyx_GIVEREF(__pyx_n_s_wb);
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_11, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_14 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_14 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_11) {
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __Pyx_GIVEREF(__pyx_t_11); __pyx_t_11 = NULL;
  }
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_14, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_14, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "clda.pyx":665
 *         return perplexity
 * 
 *     def save(self, stats=False, k=None):             # <<<<<<<<<<<<<<
 *         cdef size_t d
 *         cdef size_t n
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("clda.CLDA.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_Tc);
  __Pyx_XDECREF(__pyx_v_dw);
  __Pyx_XDECREF(__pyx_v_dy);
  __Pyx_XDECREF(__pyx_v_dz);
  __Pyx_XDECREF(__pyx_v_prefix);
  __Pyx_XDECREF(__pyx_v_n_iter);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
    goto __pyx_L7_next_and;
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_L7_next_and:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
    goto __pyx_L10_next_and;
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_L10_next_and:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    goto __pyx_L16_next_and;
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_L16_next_and:;
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
      goto __pyx_L21_next_and;
    }
    __pyx_L21_next_and:;
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
      goto __pyx_L22_next_and;
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L22_next_and:;
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
      goto __pyx_L9_next_and;
    }
    __pyx_L9_next_and:;
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
      goto __pyx_L10_next_and;
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L10_next_and:;
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gsl_matrix.pxd":6
 * ctypedef unsigned int uint
 * 
 * cdef inline gsl_vector** alloc_2d_gsl_matrix(uint A, uint B, double val):             # <<<<<<<<<<<<<<
 *     cdef gsl_vector **m = <gsl_vector**>PyMem_Malloc(A * sizeof(gsl_vector*))
 *     if not m:
 */

static CYTHON_INLINE gsl_vector **__pyx_f_10gsl_matrix_alloc_2d_gsl_matrix(__pyx_t_10gsl_matrix_uint __pyx_v_A, __pyx_t_10gsl_matrix_uint __pyx_v_B, double __pyx_v_val) {
  gsl_vector **__pyx_v_m;
  size_t __pyx_v_i;
  gsl_vector **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_10gsl_matrix_uint __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alloc_2d_gsl_matrix", 0);

  /* "gsl_matrix.pxd":7
 * 
 * cdef inline gsl_vector** alloc_2d_gsl_matrix(uint A, uint B, double val):
 *     cdef gsl_vector **m = <gsl_vector**>PyMem_Malloc(A * sizeof(gsl_vector*))             # <<<<<<<<<<<<<<
 *     if not m:
 *         raise MemoryError()
 */
  __pyx_v_m = ((gsl_vector **)PyMem_Malloc((__pyx_v_A * (sizeof(gsl_vector *)))));

  /* "gsl_matrix.pxd":8
 * cdef inline gsl_vector** alloc_2d_gsl_matrix(uint A, uint B, double val):
 *     cdef gsl_vector **m = <gsl_vector**>PyMem_Malloc(A * sizeof(gsl_vector*))
 *     if not m:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     cdef size_t i
 */
  __pyx_t_1 = ((!(__pyx_v_m != 0)) != 0);
  if (__pyx_t_1) {

    /* "gsl_matrix.pxd":9
 *     cdef gsl_vector **m = <gsl_vector**>PyMem_Malloc(A * sizeof(gsl_vector*))
 *     if not m:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "gsl_matrix.pxd":11
 *         raise MemoryError()
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         m[i] = gsl_vector_alloc(B)
 *         gsl_vector_set_all(m[i], val)
 */
  __pyx_t_2 = __pyx_v_A;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "gsl_matrix.pxd":12
 *     cdef size_t i
 *     for i in range(A):
 *         m[i] = gsl_vector_alloc(B)             # <<<<<<<<<<<<<<
 *         gsl_vector_set_all(m[i], val)
 *     return m
 */
    (__pyx_v_m[__pyx_v_i]) = gsl_vector_alloc(__pyx_v_B);

    /* "gsl_matrix.pxd":13
 *     for i in range(A):
 *         m[i] = gsl_vector_alloc(B)
 *         gsl_vector_set_all(m[i], val)             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    gsl_vector_set_all((__pyx_v_m[__pyx_v_i]), __pyx_v_val);
  }

  /* "gsl_matrix.pxd":14
 *         m[i] = gsl_vector_alloc(B)
 *         gsl_vector_set_all(m[i], val)
 *     return m             # <<<<<<<<<<<<<<
 * 
 * cdef inline gsl_vector*** alloc_3d_gsl_matrix(uint A, uint B, uint C, double val):
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "gsl_matrix.pxd":6
 * ctypedef unsigned int uint
 * 
 * cdef inline gsl_vector** alloc_2d_gsl_matrix(uint A, uint B, double val):             # <<<<<<<<<<<<<<
 *     cdef gsl_vector **m = <gsl_vector**>PyMem_Malloc(A * sizeof(gsl_vector*))
 *     if not m:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("gsl_matrix.alloc_2d_gsl_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gsl_matrix.pxd":16
 *     return m
 * 
 * cdef inline gsl_vector*** alloc_3d_gsl_matrix(uint A, uint B, uint C, double val):             # <<<<<<<<<<<<<<
 *     cdef gsl_vector ***m = <gsl_vector***>PyMem_Malloc(A * sizeof(gsl_vector**))
 *     if not m:
 */

static CYTHON_INLINE gsl_vector ***__pyx_f_10gsl_matrix_alloc_3d_gsl_matrix(__pyx_t_10gsl_matrix_uint __pyx_v_A, __pyx_t_10gsl_matrix_uint __pyx_v_B, __pyx_t_10gsl_matrix_uint __pyx_v_C, double __pyx_v_val) {
  gsl_vector ***__pyx_v_m;
  size_t __pyx_v_i;
  gsl_vector ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_10gsl_matrix_uint __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alloc_3d_gsl_matrix", 0);

  /* "gsl_matrix.pxd":17
 * 
 * cdef inline gsl_vector*** alloc_3d_gsl_matrix(uint A, uint B, uint C, double val):
 *     cdef gsl_vector ***m = <gsl_vector***>PyMem_Malloc(A * sizeof(gsl_vector**))             # <<<<<<<<<<<<<<
 *     if not m:
 *         raise MemoryError()
 */
  __pyx_v_m = ((gsl_vector ***)PyMem_Malloc((__pyx_v_A * (sizeof(gsl_vector **)))));

  /* "gsl_matrix.pxd":18
 * cdef inline gsl_vector*** alloc_3d_gsl_matrix(uint A, uint B, uint C, double val):
 *     cdef gsl_vector ***m = <gsl_vector***>PyMem_Malloc(A * sizeof(gsl_vector**))
 *     if not m:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     cdef size_t i
 */
  __pyx_t_1 = ((!(__pyx_v_m != 0)) != 0);
  if (__pyx_t_1) {

    /* "gsl_matrix.pxd":19
 *     cdef gsl_vector ***m = <gsl_vector***>PyMem_Malloc(A * sizeof(gsl_vector**))
 *     if not m:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "gsl_matrix.pxd":21
 *         raise MemoryError()
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         m[i] = alloc_2d_gsl_matrix(B, C, val)
 *     return m
 */
  __pyx_t_2 = __pyx_v_A;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "gsl_matrix.pxd":22
 *     cdef size_t i
 *     for i in range(A):
 *         m[i] = alloc_2d_gsl_matrix(B, C, val)             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    (__pyx_v_m[__pyx_v_i]) = __pyx_f_10gsl_matrix_alloc_2d_gsl_matrix(__pyx_v_B, __pyx_v_C, __pyx_v_val);
  }

  /* "gsl_matrix.pxd":23
 *     for i in range(A):
 *         m[i] = alloc_2d_gsl_matrix(B, C, val)
 *     return m             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_2d_gsl_matrix(gsl_vector** m, uint A):
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "gsl_matrix.pxd":16
 *     return m
 * 
 * cdef inline gsl_vector*** alloc_3d_gsl_matrix(uint A, uint B, uint C, double val):             # <<<<<<<<<<<<<<
 *     cdef gsl_vector ***m = <gsl_vector***>PyMem_Malloc(A * sizeof(gsl_vector**))
 *     if not m:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("gsl_matrix.alloc_3d_gsl_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gsl_matrix.pxd":25
 *     return m
 * 
 * cdef inline void free_2d_gsl_matrix(gsl_vector** m, uint A):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_free_2d_gsl_matrix(gsl_vector **__pyx_v_m, __pyx_t_10gsl_matrix_uint __pyx_v_A) {
  size_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  __pyx_t_10gsl_matrix_uint __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("free_2d_gsl_matrix", 0);

  /* "gsl_matrix.pxd":27
 * cdef inline void free_2d_gsl_matrix(gsl_vector** m, uint A):
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         gsl_vector_free(m[i])
 *     PyMem_Free(m)
 */
  __pyx_t_1 = __pyx_v_A;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "gsl_matrix.pxd":28
 *     cdef size_t i
 *     for i in range(A):
 *         gsl_vector_free(m[i])             # <<<<<<<<<<<<<<
 *     PyMem_Free(m)
 * 
 */
    gsl_vector_free((__pyx_v_m[__pyx_v_i]));
  }

  /* "gsl_matrix.pxd":29
 *     for i in range(A):
 *         gsl_vector_free(m[i])
 *     PyMem_Free(m)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_3d_gsl_matrix(gsl_vector*** m, uint A, uint B):
 */
  PyMem_Free(__pyx_v_m);

  /* "gsl_matrix.pxd":25
 *     return m
 * 
 * cdef inline void free_2d_gsl_matrix(gsl_vector** m, uint A):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":31
 *     PyMem_Free(m)
 * 
 * cdef inline void free_3d_gsl_matrix(gsl_vector*** m, uint A, uint B):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_free_3d_gsl_matrix(gsl_vector ***__pyx_v_m, __pyx_t_10gsl_matrix_uint __pyx_v_A, __pyx_t_10gsl_matrix_uint __pyx_v_B) {
  size_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  __pyx_t_10gsl_matrix_uint __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("free_3d_gsl_matrix", 0);

  /* "gsl_matrix.pxd":33
 * cdef inline void free_3d_gsl_matrix(gsl_vector*** m, uint A, uint B):
 *     cdef size_t i
 *     for i in range(A):             # <<<<<<<<<<<<<<
 *         free_2d_gsl_matrix(m[i], B)
 *     PyMem_Free(m)
 */
  __pyx_t_1 = __pyx_v_A;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "gsl_matrix.pxd":34
 *     cdef size_t i
 *     for i in range(A):
 *         free_2d_gsl_matrix(m[i], B)             # <<<<<<<<<<<<<<
 *     PyMem_Free(m)
 * 
 */
    __pyx_f_10gsl_matrix_free_2d_gsl_matrix((__pyx_v_m[__pyx_v_i]), __pyx_v_B);
  }

  /* "gsl_matrix.pxd":35
 *     for i in range(A):
 *         free_2d_gsl_matrix(m[i], B)
 *     PyMem_Free(m)             # <<<<<<<<<<<<<<
 * 
 * # warning: no range check below
 */
  PyMem_Free(__pyx_v_m);

  /* "gsl_matrix.pxd":31
 *     PyMem_Free(m)
 * 
 * cdef inline void free_3d_gsl_matrix(gsl_vector*** m, uint A, uint B):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(A):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":38
 * 
 * # warning: no range check below
 * cdef inline void gsl_1d_matrix_incr(gsl_vector* m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     (gsl_vector_ptr(m, i))[0] += x
 * 
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_1d_matrix_incr(gsl_vector *__pyx_v_m, size_t __pyx_v_i, double __pyx_v_x) {
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  long __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_1d_matrix_incr", 0);

  /* "gsl_matrix.pxd":39
 * # warning: no range check below
 * cdef inline void gsl_1d_matrix_incr(gsl_vector* m, size_t i, double x):
 *     (gsl_vector_ptr(m, i))[0] += x             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_2d_matrix_incr(gsl_vector** m, size_t i, size_t j, double x):
 */
  __pyx_t_1 = gsl_vector_ptr(__pyx_v_m, __pyx_v_i);
  __pyx_t_2 = 0;
  (__pyx_t_1[__pyx_t_2]) = ((__pyx_t_1[__pyx_t_2]) + __pyx_v_x);

  /* "gsl_matrix.pxd":38
 * 
 * # warning: no range check below
 * cdef inline void gsl_1d_matrix_incr(gsl_vector* m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     (gsl_vector_ptr(m, i))[0] += x
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":41
 *     (gsl_vector_ptr(m, i))[0] += x
 * 
 * cdef inline void gsl_2d_matrix_incr(gsl_vector** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     (gsl_vector_ptr(m[i], j))[0] += x
 * 
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_incr(gsl_vector **__pyx_v_m, size_t __pyx_v_i, size_t __pyx_v_j, double __pyx_v_x) {
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  long __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_2d_matrix_incr", 0);

  /* "gsl_matrix.pxd":42
 * 
 * cdef inline void gsl_2d_matrix_incr(gsl_vector** m, size_t i, size_t j, double x):
 *     (gsl_vector_ptr(m[i], j))[0] += x             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_3d_matrix_incr(gsl_vector*** m, size_t i, size_t j, size_t k, double x):
 */
  __pyx_t_1 = gsl_vector_ptr((__pyx_v_m[__pyx_v_i]), __pyx_v_j);
  __pyx_t_2 = 0;
  (__pyx_t_1[__pyx_t_2]) = ((__pyx_t_1[__pyx_t_2]) + __pyx_v_x);

  /* "gsl_matrix.pxd":41
 *     (gsl_vector_ptr(m, i))[0] += x
 * 
 * cdef inline void gsl_2d_matrix_incr(gsl_vector** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     (gsl_vector_ptr(m[i], j))[0] += x
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":44
 *     (gsl_vector_ptr(m[i], j))[0] += x
 * 
 * cdef inline void gsl_3d_matrix_incr(gsl_vector*** m, size_t i, size_t j, size_t k, double x):             # <<<<<<<<<<<<<<
 *     (gsl_vector_ptr(m[i][j], k))[0] += x
 * 
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_incr(gsl_vector ***__pyx_v_m, size_t __pyx_v_i, size_t __pyx_v_j, size_t __pyx_v_k, double __pyx_v_x) {
  __Pyx_RefNannyDeclarations
  double *__pyx_t_1;
  long __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_3d_matrix_incr", 0);

  /* "gsl_matrix.pxd":45
 * 
 * cdef inline void gsl_3d_matrix_incr(gsl_vector*** m, size_t i, size_t j, size_t k, double x):
 *     (gsl_vector_ptr(m[i][j], k))[0] += x             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_2d_matrix_add_constant(gsl_vector** m, size_t i, double x):
 */
  __pyx_t_1 = gsl_vector_ptr(((__pyx_v_m[__pyx_v_i])[__pyx_v_j]), __pyx_v_k);
  __pyx_t_2 = 0;
  (__pyx_t_1[__pyx_t_2]) = ((__pyx_t_1[__pyx_t_2]) + __pyx_v_x);

  /* "gsl_matrix.pxd":44
 *     (gsl_vector_ptr(m[i], j))[0] += x
 * 
 * cdef inline void gsl_3d_matrix_incr(gsl_vector*** m, size_t i, size_t j, size_t k, double x):             # <<<<<<<<<<<<<<
 *     (gsl_vector_ptr(m[i][j], k))[0] += x
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":47
 *     (gsl_vector_ptr(m[i][j], k))[0] += x
 * 
 * cdef inline void gsl_2d_matrix_add_constant(gsl_vector** m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_add_constant(gsl_vector **__pyx_v_m, size_t __pyx_v_i, double __pyx_v_x) {
  size_t __pyx_v_k;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_2d_matrix_add_constant", 0);

  /* "gsl_matrix.pxd":49
 * cdef inline void gsl_2d_matrix_add_constant(gsl_vector** m, size_t i, double x):
 *     cdef size_t k
 *     for k in range(i):             # <<<<<<<<<<<<<<
 *         gsl_vector_add_constant(m[k], x)
 * 
 */
  __pyx_t_1 = __pyx_v_i;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_k = __pyx_t_2;

    /* "gsl_matrix.pxd":50
 *     cdef size_t k
 *     for k in range(i):
 *         gsl_vector_add_constant(m[k], x)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_3d_matrix_add_constant(gsl_vector*** m, size_t i, size_t j, double x):
 */
    gsl_vector_add_constant((__pyx_v_m[__pyx_v_k]), __pyx_v_x);
  }

  /* "gsl_matrix.pxd":47
 *     (gsl_vector_ptr(m[i][j], k))[0] += x
 * 
 * cdef inline void gsl_2d_matrix_add_constant(gsl_vector** m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":52
 *         gsl_vector_add_constant(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_add_constant(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_add_constant(gsl_vector ***__pyx_v_m, size_t __pyx_v_i, size_t __pyx_v_j, double __pyx_v_x) {
  size_t __pyx_v_k;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_3d_matrix_add_constant", 0);

  /* "gsl_matrix.pxd":54
 * cdef inline void gsl_3d_matrix_add_constant(gsl_vector*** m, size_t i, size_t j, double x):
 *     cdef size_t k
 *     for k in range(i):             # <<<<<<<<<<<<<<
 *         gsl_2d_matrix_add_constant(m[k], j, x)
 * 
 */
  __pyx_t_1 = __pyx_v_i;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_k = __pyx_t_2;

    /* "gsl_matrix.pxd":55
 *     cdef size_t k
 *     for k in range(i):
 *         gsl_2d_matrix_add_constant(m[k], j, x)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_2d_matrix_set_all(gsl_vector** m, size_t i, double x):
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_add_constant((__pyx_v_m[__pyx_v_k]), __pyx_v_j, __pyx_v_x);
  }

  /* "gsl_matrix.pxd":52
 *         gsl_vector_add_constant(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_add_constant(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":57
 *         gsl_2d_matrix_add_constant(m[k], j, x)
 * 
 * cdef inline void gsl_2d_matrix_set_all(gsl_vector** m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all(gsl_vector **__pyx_v_m, size_t __pyx_v_i, double __pyx_v_x) {
  size_t __pyx_v_k;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_2d_matrix_set_all", 0);

  /* "gsl_matrix.pxd":59
 * cdef inline void gsl_2d_matrix_set_all(gsl_vector** m, size_t i, double x):
 *     cdef size_t k
 *     for k in range(i):             # <<<<<<<<<<<<<<
 *         gsl_vector_set_all(m[k], x)
 * 
 */
  __pyx_t_1 = __pyx_v_i;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_k = __pyx_t_2;

    /* "gsl_matrix.pxd":60
 *     cdef size_t k
 *     for k in range(i):
 *         gsl_vector_set_all(m[k], x)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_3d_matrix_set_all(gsl_vector*** m, size_t i, size_t j, double x):
 */
    gsl_vector_set_all((__pyx_v_m[__pyx_v_k]), __pyx_v_x);
  }

  /* "gsl_matrix.pxd":57
 *         gsl_2d_matrix_add_constant(m[k], j, x)
 * 
 * cdef inline void gsl_2d_matrix_set_all(gsl_vector** m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":62
 *         gsl_vector_set_all(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_set_all(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_set_all(gsl_vector ***__pyx_v_m, size_t __pyx_v_i, size_t __pyx_v_j, double __pyx_v_x) {
  size_t __pyx_v_k;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_3d_matrix_set_all", 0);

  /* "gsl_matrix.pxd":64
 * cdef inline void gsl_3d_matrix_set_all(gsl_vector*** m, size_t i, size_t j, double x):
 *     cdef size_t k
 *     for k in range(i):             # <<<<<<<<<<<<<<
 *         gsl_2d_matrix_set_all(m[k], j, x)
 * 
 */
  __pyx_t_1 = __pyx_v_i;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_k = __pyx_t_2;

    /* "gsl_matrix.pxd":65
 *     cdef size_t k
 *     for k in range(i):
 *         gsl_2d_matrix_set_all(m[k], j, x)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_2d_matrix_scale(gsl_vector** m, size_t i, double x):
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_set_all((__pyx_v_m[__pyx_v_k]), __pyx_v_j, __pyx_v_x);
  }

  /* "gsl_matrix.pxd":62
 *         gsl_vector_set_all(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_set_all(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":67
 *         gsl_2d_matrix_set_all(m[k], j, x)
 * 
 * cdef inline void gsl_2d_matrix_scale(gsl_vector** m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_2d_matrix_scale(gsl_vector **__pyx_v_m, size_t __pyx_v_i, double __pyx_v_x) {
  size_t __pyx_v_k;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_2d_matrix_scale", 0);

  /* "gsl_matrix.pxd":69
 * cdef inline void gsl_2d_matrix_scale(gsl_vector** m, size_t i, double x):
 *     cdef size_t k
 *     for k in range(i):             # <<<<<<<<<<<<<<
 *         gsl_vector_scale(m[k], x)
 * 
 */
  __pyx_t_1 = __pyx_v_i;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_k = __pyx_t_2;

    /* "gsl_matrix.pxd":70
 *     cdef size_t k
 *     for k in range(i):
 *         gsl_vector_scale(m[k], x)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void gsl_3d_matrix_scale(gsl_vector*** m, size_t i, size_t j, double x):
 */
    gsl_vector_scale((__pyx_v_m[__pyx_v_k]), __pyx_v_x);
  }

  /* "gsl_matrix.pxd":67
 *         gsl_2d_matrix_set_all(m[k], j, x)
 * 
 * cdef inline void gsl_2d_matrix_scale(gsl_vector** m, size_t i, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gsl_matrix.pxd":72
 *         gsl_vector_scale(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_scale(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

static CYTHON_INLINE void __pyx_f_10gsl_matrix_gsl_3d_matrix_scale(gsl_vector ***__pyx_v_m, size_t __pyx_v_i, size_t __pyx_v_j, double __pyx_v_x) {
  size_t __pyx_v_k;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("gsl_3d_matrix_scale", 0);

  /* "gsl_matrix.pxd":74
 * cdef inline void gsl_3d_matrix_scale(gsl_vector*** m, size_t i, size_t j, double x):
 *     cdef size_t k
 *     for k in range(i):             # <<<<<<<<<<<<<<
 *         gsl_2d_matrix_scale(m[k], j, x)
 */
  __pyx_t_1 = __pyx_v_i;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_k = __pyx_t_2;

    /* "gsl_matrix.pxd":75
 *     cdef size_t k
 *     for k in range(i):
 *         gsl_2d_matrix_scale(m[k], j, x)             # <<<<<<<<<<<<<<
 */
    __pyx_f_10gsl_matrix_gsl_2d_matrix_scale((__pyx_v_m[__pyx_v_k]), __pyx_v_j, __pyx_v_x);
  }

  /* "gsl_matrix.pxd":72
 *         gsl_vector_scale(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_scale(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}
static struct __pyx_vtabstruct_4clda_CLDA __pyx_vtable_4clda_CLDA;

static PyObject *__pyx_tp_new_4clda_CLDA(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4clda_CLDA *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4clda_CLDA *)o);
  p->__pyx_vtab = __pyx_vtabptr_4clda_CLDA;
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  p->Dc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->word2id = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->z0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->zc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->pydC = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->pydocs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->test = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);
  p->t_pydC = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->t_pydocs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4clda_CLDA(PyObject *o) {
  struct __pyx_obj_4clda_CLDA *p = (struct __pyx_obj_4clda_CLDA *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4clda_4CLDA_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mem);
  Py_CLEAR(p->Dc);
  Py_CLEAR(p->word2id);
  Py_CLEAR(p->z0);
  Py_CLEAR(p->zc);
  Py_CLEAR(p->pydC);
  Py_CLEAR(p->pydocs);
  Py_CLEAR(p->test);
  Py_CLEAR(p->t_pydC);
  Py_CLEAR(p->t_pydocs);
  Py_CLEAR(p->prefix);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4clda_CLDA(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4clda_CLDA *p = (struct __pyx_obj_4clda_CLDA *)o;
  if (p->mem) {
    e = (*v)(((PyObject*)p->mem), a); if (e) return e;
  }
  if (p->Dc) {
    e = (*v)(p->Dc, a); if (e) return e;
  }
  if (p->word2id) {
    e = (*v)(p->word2id, a); if (e) return e;
  }
  if (p->z0) {
    e = (*v)(((PyObject*)p->z0), a); if (e) return e;
  }
  if (p->zc) {
    e = (*v)(p->zc, a); if (e) return e;
  }
  if (p->pydC) {
    e = (*v)(p->pydC, a); if (e) return e;
  }
  if (p->pydocs) {
    e = (*v)(p->pydocs, a); if (e) return e;
  }
  if (p->test) {
    e = (*v)(((PyObject*)p->test), a); if (e) return e;
  }
  if (p->t_pydC) {
    e = (*v)(p->t_pydC, a); if (e) return e;
  }
  if (p->t_pydocs) {
    e = (*v)(p->t_pydocs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4clda_CLDA(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4clda_CLDA *p = (struct __pyx_obj_4clda_CLDA *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Dc);
  p->Dc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->word2id);
  p->word2id = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->z0);
  p->z0 = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->zc);
  p->zc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pydC);
  p->pydC = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->pydocs);
  p->pydocs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->test);
  p->test = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->t_pydC);
  p->t_pydC = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->t_pydocs);
  p->t_pydocs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_4clda_CLDA[] = {
  {"run", (PyCFunction)__pyx_pw_4clda_4CLDA_5run, METH_VARARGS|METH_KEYWORDS, 0},
  {"initialize", (PyCFunction)__pyx_pw_4clda_4CLDA_7initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"evaluate", (PyCFunction)__pyx_pw_4clda_4CLDA_9evaluate, METH_VARARGS|METH_KEYWORDS, 0},
  {"save", (PyCFunction)__pyx_pw_4clda_4CLDA_11save, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4clda_CLDA = {
  PyVarObject_HEAD_INIT(0, 0)
  "clda.CLDA", /*tp_name*/
  sizeof(struct __pyx_obj_4clda_CLDA), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4clda_CLDA, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4clda_CLDA, /*tp_traverse*/
  __pyx_tp_clear_4clda_CLDA, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4clda_CLDA, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4clda_4CLDA_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4clda_CLDA, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "clda",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_04d, __pyx_k_04d, sizeof(__pyx_k_04d), 0, 0, 1, 0},
  {&__pyx_kp_s_5f, __pyx_k_5f, sizeof(__pyx_k_5f), 0, 0, 1, 0},
  {&__pyx_kp_s_Allocating_memory, __pyx_k_Allocating_memory, sizeof(__pyx_k_Allocating_memory), 0, 0, 1, 0},
  {&__pyx_n_s_CLDA, __pyx_k_CLDA, sizeof(__pyx_k_CLDA), 0, 0, 1, 1},
  {&__pyx_kp_s_Collection_d_d, __pyx_k_Collection_d_d, sizeof(__pyx_k_Collection_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Evaluating, __pyx_k_Evaluating, sizeof(__pyx_k_Evaluating), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Initializing, __pyx_k_Initializing, sizeof(__pyx_k_Initializing), 0, 0, 1, 0},
  {&__pyx_kp_s_Iteration_d, __pyx_k_Iteration_d, sizeof(__pyx_k_Iteration_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Loading_data, __pyx_k_Loading_data, sizeof(__pyx_k_Loading_data), 0, 0, 1, 0},
  {&__pyx_kp_s_Loading_states, __pyx_k_Loading_states, sizeof(__pyx_k_Loading_states), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_s_Optimizing_alpha, __pyx_k_Optimizing_alpha, sizeof(__pyx_k_Optimizing_alpha), 0, 0, 1, 0},
  {&__pyx_kp_s_Running_with_d_threads, __pyx_k_Running_with_d_threads, sizeof(__pyx_k_Running_with_d_threads), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_T0, __pyx_k_T0, sizeof(__pyx_k_T0), 0, 0, 1, 1},
  {&__pyx_kp_s_Test_docs_d, __pyx_k_Test_docs_d, sizeof(__pyx_k_Test_docs_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Total_docs_d, __pyx_k_Total_docs_d, sizeof(__pyx_k_Total_docs_d), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 0},
  {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_kp_s_alpha_became_unstable_terminatin, __pyx_k_alpha_became_unstable_terminatin, sizeof(__pyx_k_alpha_became_unstable_terminatin), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_kp_s_average_running_time_of_each_ite, __pyx_k_average_running_time_of_each_ite, sizeof(__pyx_k_average_running_time_of_each_ite), 0, 0, 1, 0},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_burn_in, __pyx_k_burn_in, sizeof(__pyx_k_burn_in), 0, 0, 1, 1},
  {&__pyx_n_s_cPickle, __pyx_k_cPickle, sizeof(__pyx_k_cPickle), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_corpus_path, __pyx_k_corpus_path, sizeof(__pyx_k_corpus_path), 0, 0, 1, 1},
  {&__pyx_kp_s_d_alpha_s, __pyx_k_d_alpha_s, sizeof(__pyx_k_d_alpha_s), 0, 0, 1, 0},
  {&__pyx_n_s_datetime, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_kp_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 0},
  {&__pyx_n_s_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eval_interval, __pyx_k_eval_interval, sizeof(__pyx_k_eval_interval), 0, 0, 1, 1},
  {&__pyx_n_s_eval_sigma, __pyx_k_eval_sigma, sizeof(__pyx_k_eval_sigma), 0, 0, 1, 1},
  {&__pyx_kp_s_evaluate, __pyx_k_evaluate, sizeof(__pyx_k_evaluate), 0, 0, 1, 0},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_gmean, __pyx_k_gmean, sizeof(__pyx_k_gmean), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_kp_s_log_likelihood_2f_perplexity_2f, __pyx_k_log_likelihood_2f_perplexity_2f, sizeof(__pyx_k_log_likelihood_2f_perplexity_2f), 0, 0, 1, 0},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_n_iter, __pyx_k_n_iter, sizeof(__pyx_k_n_iter), 0, 0, 1, 1},
  {&__pyx_n_s_n_worker, __pyx_k_n_worker, sizeof(__pyx_k_n_worker), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_now, __pyx_k_now, sizeof(__pyx_k_now), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num_topics_0, __pyx_k_num_topics_0, sizeof(__pyx_k_num_topics_0), 0, 0, 1, 1},
  {&__pyx_n_s_num_topics_c, __pyx_k_num_topics_c, sizeof(__pyx_k_num_topics_c), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_of_collections_d, __pyx_k_of_collections_d, sizeof(__pyx_k_of_collections_d), 0, 0, 1, 0},
  {&__pyx_kp_s_of_isolated_topics_s, __pyx_k_of_isolated_topics_s, sizeof(__pyx_k_of_isolated_topics_s), 0, 0, 1, 0},
  {&__pyx_kp_s_of_shared_topics_d, __pyx_k_of_shared_topics_d, sizeof(__pyx_k_of_shared_topics_d), 0, 0, 1, 0},
  {&__pyx_kp_s_of_terms_d, __pyx_k_of_terms_d, sizeof(__pyx_k_of_terms_d), 0, 0, 1, 0},
  {&__pyx_kp_s_of_vocab_words_d, __pyx_k_of_vocab_words_d, sizeof(__pyx_k_of_vocab_words_d), 0, 0, 1, 0},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_kp_s_pkl, __pyx_k_pkl, sizeof(__pyx_k_pkl), 0, 0, 1, 0},
  {&__pyx_n_s_polygamma, __pyx_k_polygamma, sizeof(__pyx_k_polygamma), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_psi, __pyx_k_psi, sizeof(__pyx_k_psi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 0, 1, 1},
  {&__pyx_n_s_resample, __pyx_k_resample, sizeof(__pyx_k_resample), 0, 0, 1, 1},
  {&__pyx_kp_s_s_04d_pkl, __pyx_k_s_04d_pkl, sizeof(__pyx_k_s_04d_pkl), 0, 0, 1, 0},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_n_s_save_interval, __pyx_k_save_interval, sizeof(__pyx_k_save_interval), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_special, __pyx_k_scipy_special, sizeof(__pyx_k_scipy_special), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_stats_mstats, __pyx_k_scipy_stats_mstats, sizeof(__pyx_k_scipy_stats_mstats), 0, 0, 1, 1},
  {&__pyx_n_s_single, __pyx_k_single, sizeof(__pyx_k_single), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stats, __pyx_k_stats, sizeof(__pyx_k_stats), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_path, __pyx_k_test_path, sizeof(__pyx_k_test_path), 0, 0, 1, 1},
  {&__pyx_kp_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 0},
  {&__pyx_n_s_timedelta, __pyx_k_timedelta, sizeof(__pyx_k_timedelta), 0, 0, 1, 1},
  {&__pyx_n_s_total_seconds, __pyx_k_total_seconds, sizeof(__pyx_k_total_seconds), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_wb, __pyx_k_wb, sizeof(__pyx_k_wb), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "clda.pyx":177
 *         self.pydC = []
 *         self.pydocs = []
 *         logger.info("Loading data...")             # <<<<<<<<<<<<<<
 *         self.nW = 0
 *         Dc = defaultdict(int)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Loading_data); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "clda.pyx":192
 *                     continue
 *                 collection_id = int(line[0])
 *                 line = line[1:]             # <<<<<<<<<<<<<<
 * 
 *                 temp = []
 */
  __pyx_slice__3 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);

  /* "clda.pyx":186
 *         cdef size_t i, j
 * 
 *         with open(corpus_path, 'r') as f:             # <<<<<<<<<<<<<<
 *             for line in f:
 *                 line = line.strip().split()
 */
  __pyx_tuple__4 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "clda.pyx":237
 *                     line = line.strip().split()
 *                     collection_id = int(line[0])
 *                     line = line[1:]             # <<<<<<<<<<<<<<
 *                     self.t_pydC.append(collection_id)
 *                     self.t_pydocs.append([self.word2id[w] for w in line if w in self.word2id])
 */
  __pyx_slice__5 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "clda.pyx":233
 *             self.t_pydC = []
 *             self.t_pydocs = []
 *             with open(test_path, 'r') as f:             # <<<<<<<<<<<<<<
 *                 for line in f:
 *                     line = line.strip().split()
 */
  __pyx_tuple__6 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "clda.pyx":271
 *         self.burn_in = burn_in
 * 
 *         logger.info("Allocating memory...")             # <<<<<<<<<<<<<<
 * 
 *         self.n0Z = gsl_vector_alloc(self.T0)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Allocating_memory); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "clda.pyx":369
 * 
 *             if k > self.burn_in and k % 10 == 0:
 *                 logger.info('Optimizing alpha...')             # <<<<<<<<<<<<<<
 *                 for c in xrange(self.C):
 *                     self.update_alpha(c)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Optimizing_alpha); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "clda.pyx":378
 * 
 *             if self.eval_interval > 0 and self.test and k % self.eval_interval == 0:
 *                 logger.info('Evaluating...')             # <<<<<<<<<<<<<<
 *                 start_time = datetime.datetime.now()
 *                 loglik = evaluate(20, 0,
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Evaluating); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "clda.pyx":398
 * 
 *         self.save()
 *         logger.info('...done')             # <<<<<<<<<<<<<<
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)
 *         logger.info('average running time of each iteration: %s' % (avgdiff))
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_done); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "clda.pyx":399
 *         self.save()
 *         logger.info('...done')
 *         avgdiff = sum(timediff, datetime.timedelta(0)) / len(timediff)             # <<<<<<<<<<<<<<
 *         logger.info('average running time of each iteration: %s' % (avgdiff))
 *         timeout.close()
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "clda.pyx":419
 * 
 *     def initialize(self, load=False):
 *         logger.info("Initializing...")             # <<<<<<<<<<<<<<
 *         cdef size_t d
 *         cdef size_t n
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Initializing); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "clda.pyx":428
 *         cdef size_t c
 *         if load:
 *             logger.info("Loading states...")             # <<<<<<<<<<<<<<
 *             _Y, _Z, alpha, self.iter, _, _, _, _, _, _ = pickle.load(open(self.prefix + '.pkl', 'rb'))
 *             for c in range(self.C):
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Loading_states); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "clda.pyx":462
 *                 Z = _Z[d]
 *             else:
 *                 Y = np.random.randint(2, size=N)             # <<<<<<<<<<<<<<
 *                 Z = np.random.randint(self.Tc[c], size=N)
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "clda.pyx":567
 * 
 *         if alphaSum < 0 or alphaSum / Tc > 1000:
 *             raise ValueError('alpha became unstable, terminating..')             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, resample=False, single=True, T0=None, eval_sigma=False):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_alpha_became_unstable_terminatin); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "clda.pyx":29
 * from gsl_matrix cimport *
 * 
 * logger = logging.getLogger("CLDA")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdlib.h":
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_CLDA); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float__01 = PyFloat_FromDouble(.01); if (unlikely(!__pyx_float__01)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_50_0 = PyFloat_FromDouble(50.0); if (unlikely(!__pyx_float_50_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_500 = PyInt_FromLong(500); if (unlikely(!__pyx_int_500)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initclda(void); /*proto*/
PyMODINIT_FUNC initclda(void)
#else
PyMODINIT_FUNC PyInit_clda(void); /*proto*/
PyMODINIT_FUNC PyInit_clda(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_clda(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("clda", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_clda) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "clda")) {
      if (unlikely(PyDict_SetItemString(modules, "clda", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_4clda_CLDA = &__pyx_vtable_4clda_CLDA;
  __pyx_vtable_4clda_CLDA.stat_incr = (PyObject *(*)(struct __pyx_obj_4clda_CLDA *, int, int, int, int, __pyx_t_10gsl_matrix_uint, double))__pyx_f_4clda_4CLDA_stat_incr;
  __pyx_vtable_4clda_CLDA.update_alpha = (PyObject *(*)(struct __pyx_obj_4clda_CLDA *, size_t))__pyx_f_4clda_4CLDA_update_alpha;
  if (PyType_Ready(&__pyx_type_4clda_CLDA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4clda_CLDA.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4clda_CLDA.tp_dict, __pyx_vtabptr_4clda_CLDA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "CLDA", (PyObject *)&__pyx_type_4clda_CLDA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4clda_CLDA = &__pyx_type_4clda_CLDA;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType("cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType("cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), 1); if (unlikely(!__pyx_ptype_5cymem_5cymem_Address)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "clda.pyx":11
 * from cython_gsl cimport *
 * from cpython cimport bool
 * from collections import defaultdict             # <<<<<<<<<<<<<<
 * import logging
 * import datetime
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_defaultdict);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_defaultdict);
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":12
 * from cpython cimport bool
 * from collections import defaultdict
 * import logging             # <<<<<<<<<<<<<<
 * import datetime
 * from cymem.cymem cimport Pool
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":13
 * from collections import defaultdict
 * import logging
 * import datetime             # <<<<<<<<<<<<<<
 * from cymem.cymem cimport Pool
 * from cpython.mem cimport PyMem_Malloc, PyMem_Free
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_datetime, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datetime, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":16
 * from cymem.cymem cimport Pool
 * from cpython.mem cimport PyMem_Malloc, PyMem_Free
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from scipy.special import polygamma, psi
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":18
 * import numpy as np
 * cimport numpy as np
 * from scipy.special import polygamma, psi             # <<<<<<<<<<<<<<
 * from scipy.stats.mstats import gmean
 * import random
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_polygamma);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_polygamma);
  __Pyx_GIVEREF(__pyx_n_s_polygamma);
  __Pyx_INCREF(__pyx_n_s_psi);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_psi);
  __Pyx_GIVEREF(__pyx_n_s_psi);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_special, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_polygamma); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_polygamma, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_psi); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_psi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "clda.pyx":19
 * cimport numpy as np
 * from scipy.special import polygamma, psi
 * from scipy.stats.mstats import gmean             # <<<<<<<<<<<<<<
 * import random
 * import cPickle as pickle
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_gmean);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_gmean);
  __Pyx_GIVEREF(__pyx_n_s_gmean);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_stats_mstats, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_gmean); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gmean, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":20
 * from scipy.special import polygamma, psi
 * from scipy.stats.mstats import gmean
 * import random             # <<<<<<<<<<<<<<
 * import cPickle as pickle
 * cimport openmp
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":21
 * from scipy.stats.mstats import gmean
 * import random
 * import cPickle as pickle             # <<<<<<<<<<<<<<
 * cimport openmp
 * from cython.parallel import parallel, prange
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cPickle, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pickle, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":29
 * from gsl_matrix cimport *
 * 
 * logger = logging.getLogger("CLDA")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdlib.h":
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "clda.pyx":158
 * 
 *     def __init__(self, corpus_path, prefix, test_path=None, num_topics_0=10, num_topics_c=10,
 *             alpha=50.0, delta=[1, 1], beta=.01, n_worker=-1,             # <<<<<<<<<<<<<<
 *                  n_iter=20, save_interval=50, eval_interval=10, burn_in=500):
 *         self.mem = Pool()
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_INCREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __pyx_k_ = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "clda.pyx":1
 * #!/usr/bin/env cython             # <<<<<<<<<<<<<<
 * # -*- coding: utf-8 -*-
 * # cython: profile=False
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gsl_matrix.pxd":72
 *         gsl_vector_scale(m[k], x)
 * 
 * cdef inline void gsl_3d_matrix_scale(gsl_vector*** m, size_t i, size_t j, double x):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     for k in range(i):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init clda", __pyx_clineno, __pyx_lineno, __pyx_filename);
      Py_DECREF(__pyx_d); __pyx_d = 0;
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init clda");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE npy_uint8 __Pyx_PyInt_As_npy_uint8(PyObject *x) {
    const npy_uint8 neg_one = (npy_uint8) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_uint8) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_uint8, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_uint8) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint8, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(npy_uint8) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(npy_uint8) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint8,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(npy_uint8, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(npy_uint8) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(npy_uint8, long, PyLong_AsLong(x))
            } else if (sizeof(npy_uint8) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(npy_uint8, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_uint8 val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_uint8) -1;
        }
    } else {
        npy_uint8 val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (npy_uint8) -1;
        val = __Pyx_PyInt_As_npy_uint8(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint8");
    return (npy_uint8) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint8");
    return (npy_uint8) -1;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint16(npy_uint16 value) {
    const npy_uint16 neg_one = (npy_uint16) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint16) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint16) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(npy_uint16) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(npy_uint16) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint16) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint16),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint8(npy_uint8 value) {
    const npy_uint8 neg_one = (npy_uint8) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint8) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint8) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(npy_uint8) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(npy_uint8) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint8) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint8),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
